/home/manzand/Documents/Python/neuralODE_examples/cifar/odenet_cifar_example_tiny.py
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb  4 09:04:31 2021

@author: manzand
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 19 15:10:31 2021

@author: manzand
"""

import os
import argparse
import logging
import time
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms
from scipy.io import savemat

parser = argparse.ArgumentParser()
parser.add_argument('--network', type=str, choices=['resnet', 'odenet'], default='odenet')
parser.add_argument('--tol', type=float, default=1e-3)
parser.add_argument('--adjoint', type=eval, default=False, choices=[True, False])
parser.add_argument('--downsampling-method', type=str, default='conv', choices=['conv', 'res'])
parser.add_argument('--nepochs', type=int, default=200)
parser.add_argument('--data_aug', type=eval, default=False, choices=[True, False])
parser.add_argument('--lr', type=float, default=0.01)
parser.add_argument('--batch_size', type=int, default=128)
parser.add_argument('--test_batch_size', type=int, default=1000)

parser.add_argument('--save', type=str, default='../logs/cifartiny')
parser.add_argument('--debug', action='store_true')
parser.add_argument('--gpu', type=int, default=0)
args = parser.parse_args()

if args.adjoint:
    from torchdiffeq import odeint_adjoint as odeint
else:
    from torchdiffeq import odeint


def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


def norm(dim):
    return nn.BatchNorm2d(min(64, dim), dim)


class ConcatConv2d(nn.Module):

    def __init__(self, dim_in, dim_out, ksize=3, stride=1, padding=0, dilation=1, groups=1, bias=True, transpose=False):
        super(ConcatConv2d, self).__init__()
        module = nn.ConvTranspose2d if transpose else nn.Conv2d
        self._layer = module(
            dim_in + 1, dim_out, kernel_size=ksize, stride=stride, padding=padding, dilation=dilation, groups=groups,
            bias=bias
        )

    def forward(self, t, x):
        tt = torch.ones_like(x[:, :1, :, :]) * t
        ttx = torch.cat([tt, x], 1)
        return self._layer(ttx)


class ODEfunc(nn.Module):

    def __init__(self,dim):
        super(ODEfunc, self).__init__()
        self.fc1 = nn.Linear(dim,16)
        self.fc2 = nn.Linear(16, dim)
        self.nfe = 0

    def forward(self, t, x):
        self.nfe += 1
        # print('11111111111111111111')
        # print(x.size())
        out = self.fc1(x)
        # print('222222222222222222')
        # print(out.size())
        out = self.fc2(out)
        return out


class ODEBlock(nn.Module):

    def __init__(self, odefunc):
        super(ODEBlock, self).__init__()
        self.odefunc = odefunc
        self.integration_time = torch.tensor([0, 1]).float()

    def forward(self, x):
        self.integration_time = self.integration_time.type_as(x)
        out = odeint(self.odefunc, x, self.integration_time, rtol=args.tol, atol=args.tol)
        return out[1]

    @property
    def nfe(self):
        return self.odefunc.nfe

    @nfe.setter
    def nfe(self, value):
        self.odefunc.nfe = value


class Flatten(nn.Module):

    def __init__(self):
        super(Flatten, self).__init__()

    def forward(self, x):
        shape = torch.prod(torch.tensor(x.shape[1:])).item()
        xout = x.view(-1, shape)
        # print(xout.size())
        return xout


class RunningAverageMeter(object):
    """Computes and stores the average and current value"""

    def __init__(self, momentum=0.99):
        self.momentum = momentum
        self.reset()

    def reset(self):
        self.val = None
        self.avg = 0

    def update(self, val):
        if self.val is None:
            self.avg = val
        else:
            self.avg = self.avg * self.momentum + val * (1 - self.momentum)
        self.val = val


def get_cifar_loaders(data_aug=False, batch_size=32, test_batch_size=1000, perc=1.0):
    if data_aug:
        transform_train = transforms.Compose([
            transforms.RandomCrop(28, padding=4),
            transforms.ToTensor(),
        ])
    else:
        transform_train = transforms.Compose([
            transforms.ToTensor(),
        ])

    transform_test = transforms.Compose([
        transforms.ToTensor(),
    ])

    train_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_train), batch_size=batch_size,
        shuffle=True, num_workers=2, drop_last=True
    )

    train_eval_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    test_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=False, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    return train_loader, test_loader, train_eval_loader


def inf_generator(iterable):
    """Allows training with DataLoaders in a single infinite loop:
        for i, (x, y) in enumerate(inf_generator(train_loader)):
    """
    iterator = iterable.__iter__()
    while True:
        try:
            yield iterator.__next__()
        except StopIteration:
            iterator = iterable.__iter__()


def learning_rate_with_decay(batch_size, batch_denom, batches_per_epoch, boundary_epochs, decay_rates):
    initial_learning_rate = args.lr * batch_size / batch_denom

    boundaries = [int(batches_per_epoch * epoch) for epoch in boundary_epochs]
    vals = [initial_learning_rate * decay for decay in decay_rates]

    def learning_rate_fn(itr):
        lt = [itr < b for b in boundaries] + [True]
        i = np.argmax(lt)
        return vals[i]

    return learning_rate_fn


def one_hot(x, K):
    return np.array(x[:, None] == np.arange(K)[None, :], dtype=int)


def accuracy(model, dataset_loader):
    total_correct = 0
    for x, y in dataset_loader:
        x = x.to(device)
        y = one_hot(np.array(y.numpy()), 10)

        target_class = np.argmax(y, axis=1)
        predicted_class = np.argmax(model(x).cpu().detach().numpy(), axis=1)
        total_correct += np.sum(predicted_class == target_class)
    return total_correct / len(dataset_loader.dataset)


def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)


def makedirs(dirname):
    if not os.path.exists(dirname):
        os.makedirs(dirname)


def get_logger(logpath, filepath, package_files=[], displaying=True, saving=True, debug=False):
    logger = logging.getLogger()
    if debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logger.setLevel(level)
    if saving:
        info_file_handler = logging.FileHandler(logpath, mode="a")
        info_file_handler.setLevel(level)
        logger.addHandler(info_file_handler)
    if displaying:
        console_handler = logging.StreamHandler()
        console_handler.setLevel(level)
        logger.addHandler(console_handler)
    logger.info(filepath)
    with open(filepath, "r") as f:
        logger.info(f.read())

    for f in package_files:
        logger.info(f)
        with open(f, "r") as package_f:
            logger.info(package_f.read())

    return logger


if __name__ == '__main__':

    makedirs(args.save)
    logger = get_logger(logpath=os.path.join(args.save, 'logs'), filepath=os.path.abspath(__file__))
    logger.info(args)

    device = torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')

    is_odenet = args.network == 'odenet'

    downsampling_layers = [
        nn.Conv2d(3, 4, 3, 1),
        norm(4),
        nn.ReLU(inplace=True),
        nn.Conv2d(4, 4, 4, 2, 1),
        norm(4),
        nn.ReLU(inplace=True),
        Flatten(),
    ]


    feature_layers = [ODEBlock(ODEfunc(900))] 
    fc_layers = [nn.Linear(900, 10)]

    model = nn.Sequential(*downsampling_layers, *feature_layers, *fc_layers).to(device)

    logger.info(model)
    logger.info('Number of parameters: {}'.format(count_parameters(model)))

    criterion = nn.CrossEntropyLoss().to(device)

    train_loader, test_loader, train_eval_loader = get_cifar_loaders(
        args.data_aug, args.batch_size, args.test_batch_size
    )

    data_gen = inf_generator(train_loader)
    batches_per_epoch = len(train_loader)

    lr_fn = learning_rate_with_decay(
        args.batch_size, batch_denom=128, batches_per_epoch=batches_per_epoch, boundary_epochs=[60, 100, 140],
        decay_rates=[1, 0.1, 0.01, 0.001]
    )

    optimizer = torch.optim.SGD(model.parameters(), lr=args.lr, momentum=0.9)

    best_acc = 0
    batch_time_meter = RunningAverageMeter()
    f_nfe_meter = RunningAverageMeter()
    b_nfe_meter = RunningAverageMeter()
    end = time.time()

    for itr in range(args.nepochs * batches_per_epoch):

        for param_group in optimizer.param_groups:
            param_group['lr'] = lr_fn(itr)

        optimizer.zero_grad()
        x, y = data_gen.__next__()
        x = x.to(device)
        y = y.to(device)
        logits = model(x)
        loss = criterion(logits, y)

        if is_odenet:
            nfe_forward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        loss.backward()
        optimizer.step()

        if is_odenet:
            nfe_backward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        batch_time_meter.update(time.time() - end)
        if is_odenet:
            f_nfe_meter.update(nfe_forward)
            b_nfe_meter.update(nfe_backward)
        end = time.time()

        if itr % batches_per_epoch == 0:
            with torch.no_grad():
                train_acc = accuracy(model, train_eval_loader)
                val_acc = accuracy(model, test_loader)
                if val_acc > best_acc:
                    torch.save({'state_dict': model.state_dict(), 'args': args}, os.path.join(args.save, 'model.pth'))
                    best_acc = val_acc
                if best_acc > 0.98 and train_acc > 0.98:
                    break
                logger.info(
                    "Epoch {:04d} | Time {:.3f} ({:.3f}) | NFE-F {:.1f} | NFE-B {:.1f} | "
                    "Train Acc {:.4f} | Test Acc {:.4f}".format(
                        itr // batches_per_epoch, batch_time_meter.val, batch_time_meter.avg, f_nfe_meter.avg,
                        b_nfe_meter.avg, train_acc, val_acc
                    )
                )
    names = []
    params = []
    for name,param in model.named_parameters():
        names.append(name)
        params.append(param.detach().numpy())
    nn1 = dict({'Wb':params,'names':names})
    for name,param in model.named_buffers():
        names.append(name)
        params.append(param.detach().numpy())
    savemat("odecnn_cifar_tiny.mat",nn1)
Namespace(adjoint=False, batch_size=128, data_aug=False, debug=False, downsampling_method='conv', gpu=0, lr=0.01, nepochs=200, network='odenet', save='../logs/cifartiny', test_batch_size=1000, tol=0.001)
Sequential(
  (0): Conv2d(3, 4, kernel_size=(3, 3), stride=(1, 1))
  (1): BatchNorm2d(4, eps=4, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(4, 4, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (4): BatchNorm2d(4, eps=4, momentum=0.1, affine=True, track_running_stats=True)
  (5): ReLU(inplace=True)
  (6): Flatten()
  (7): ODEBlock(
    (odefunc): ODEfunc(
      (fc1): Linear(in_features=900, out_features=16, bias=True)
      (fc2): Linear(in_features=16, out_features=900, bias=True)
    )
  )
  (8): Linear(in_features=900, out_features=10, bias=True)
)
Number of parameters: 39114
Epoch 0000 | Time 0.204 (0.204) | NFE-F 20.0 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0001 | Time 0.187 (0.084) | NFE-F 15.7 | NFE-B 0.0 | Train Acc 0.2736 | Test Acc 0.2811
Epoch 0002 | Time 0.182 (0.073) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.2977 | Test Acc 0.3011
Epoch 0003 | Time 0.187 (0.081) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.3794 | Test Acc 0.3808
Epoch 0004 | Time 0.250 (0.089) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.4320 | Test Acc 0.4271
Epoch 0005 | Time 0.242 (0.087) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.4507 | Test Acc 0.4475
/home/manzand/Documents/Python/neuralODE_examples/cifar/odenet_cifar_example_tiny.py
/home/manzand/Documents/Python/neuralODE_examples/cifar/odenet_cifar_example_tiny.py
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb  4 09:04:31 2021

@author: manzand
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 19 15:10:31 2021

@author: manzand
"""

import os
import argparse
import logging
import time
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms
from scipy.io import savemat

parser = argparse.ArgumentParser()
parser.add_argument('--network', type=str, choices=['resnet', 'odenet'], default='odenet')
parser.add_argument('--tol', type=float, default=1e-3)
parser.add_argument('--adjoint', type=eval, default=False, choices=[True, False])
parser.add_argument('--downsampling-method', type=str, default='conv', choices=['conv', 'res'])
parser.add_argument('--nepochs', type=int, default=200)
parser.add_argument('--data_aug', type=eval, default=False, choices=[True, False])
parser.add_argument('--lr', type=float, default=0.01)
parser.add_argument('--batch_size', type=int, default=128)
parser.add_argument('--test_batch_size', type=int, default=1000)

parser.add_argument('--save', type=str, default='../logs/cifartiny')
parser.add_argument('--debug', action='store_true')
parser.add_argument('--gpu', type=int, default=0)
args = parser.parse_args()

if args.adjoint:
    from torchdiffeq import odeint_adjoint as odeint
else:
    from torchdiffeq import odeint


def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


def norm(dim):
    return nn.BatchNorm2d(min(64, dim), dim)


class ConcatConv2d(nn.Module):

    def __init__(self, dim_in, dim_out, ksize=3, stride=1, padding=0, dilation=1, groups=1, bias=True, transpose=False):
        super(ConcatConv2d, self).__init__()
        module = nn.ConvTranspose2d if transpose else nn.Conv2d
        self._layer = module(
            dim_in + 1, dim_out, kernel_size=ksize, stride=stride, padding=padding, dilation=dilation, groups=groups,
            bias=bias
        )

    def forward(self, t, x):
        tt = torch.ones_like(x[:, :1, :, :]) * t
        ttx = torch.cat([tt, x], 1)
        return self._layer(ttx)


class ODEfunc(nn.Module):

    def __init__(self,dim):
        super(ODEfunc, self).__init__()
        self.fc1 = nn.Linear(dim,16)
        self.fc2 = nn.Linear(16, dim)
        self.nfe = 0

    def forward(self, t, x):
        self.nfe += 1
        # print('11111111111111111111')
        # print(x.size())
        out = self.fc1(x)
        # print('222222222222222222')
        # print(out.size())
        out = self.fc2(out)
        return out


class ODEBlock(nn.Module):

    def __init__(self, odefunc):
        super(ODEBlock, self).__init__()
        self.odefunc = odefunc
        self.integration_time = torch.tensor([0, 1]).float()

    def forward(self, x):
        self.integration_time = self.integration_time.type_as(x)
        out = odeint(self.odefunc, x, self.integration_time, rtol=args.tol, atol=args.tol)
        return out[1]

    @property
    def nfe(self):
        return self.odefunc.nfe

    @nfe.setter
    def nfe(self, value):
        self.odefunc.nfe = value


class Flatten(nn.Module):

    def __init__(self):
        super(Flatten, self).__init__()

    def forward(self, x):
        shape = torch.prod(torch.tensor(x.shape[1:])).item()
        xout = x.view(-1, shape)
        # print(xout.size())
        return xout


class RunningAverageMeter(object):
    """Computes and stores the average and current value"""

    def __init__(self, momentum=0.99):
        self.momentum = momentum
        self.reset()

    def reset(self):
        self.val = None
        self.avg = 0

    def update(self, val):
        if self.val is None:
            self.avg = val
        else:
            self.avg = self.avg * self.momentum + val * (1 - self.momentum)
        self.val = val


def get_cifar_loaders(data_aug=False, batch_size=32, test_batch_size=1000, perc=1.0):
    if data_aug:
        transform_train = transforms.Compose([
            transforms.RandomCrop(28, padding=4),
            transforms.ToTensor(),
        ])
    else:
        transform_train = transforms.Compose([
            transforms.ToTensor(),
        ])

    transform_test = transforms.Compose([
        transforms.ToTensor(),
    ])

    train_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_train), batch_size=batch_size,
        shuffle=True, num_workers=2, drop_last=True
    )

    train_eval_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    test_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=False, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    return train_loader, test_loader, train_eval_loader


def inf_generator(iterable):
    """Allows training with DataLoaders in a single infinite loop:
        for i, (x, y) in enumerate(inf_generator(train_loader)):
    """
    iterator = iterable.__iter__()
    while True:
        try:
            yield iterator.__next__()
        except StopIteration:
            iterator = iterable.__iter__()


def learning_rate_with_decay(batch_size, batch_denom, batches_per_epoch, boundary_epochs, decay_rates):
    initial_learning_rate = args.lr * batch_size / batch_denom

    boundaries = [int(batches_per_epoch * epoch) for epoch in boundary_epochs]
    vals = [initial_learning_rate * decay for decay in decay_rates]

    def learning_rate_fn(itr):
        lt = [itr < b for b in boundaries] + [True]
        i = np.argmax(lt)
        return vals[i]

    return learning_rate_fn


def one_hot(x, K):
    return np.array(x[:, None] == np.arange(K)[None, :], dtype=int)


def accuracy(model, dataset_loader):
    total_correct = 0
    for x, y in dataset_loader:
        x = x.to(device)
        y = one_hot(np.array(y.numpy()), 10)

        target_class = np.argmax(y, axis=1)
        predicted_class = np.argmax(model(x).cpu().detach().numpy(), axis=1)
        total_correct += np.sum(predicted_class == target_class)
    return total_correct / len(dataset_loader.dataset)


def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)


def makedirs(dirname):
    if not os.path.exists(dirname):
        os.makedirs(dirname)


def get_logger(logpath, filepath, package_files=[], displaying=True, saving=True, debug=False):
    logger = logging.getLogger()
    if debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logger.setLevel(level)
    if saving:
        info_file_handler = logging.FileHandler(logpath, mode="a")
        info_file_handler.setLevel(level)
        logger.addHandler(info_file_handler)
    if displaying:
        console_handler = logging.StreamHandler()
        console_handler.setLevel(level)
        logger.addHandler(console_handler)
    logger.info(filepath)
    with open(filepath, "r") as f:
        logger.info(f.read())

    for f in package_files:
        logger.info(f)
        with open(f, "r") as package_f:
            logger.info(package_f.read())

    return logger


if __name__ == '__main__':

    makedirs(args.save)
    logger = get_logger(logpath=os.path.join(args.save, 'logs'), filepath=os.path.abspath(__file__))
    logger.info(args)

    device = torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')

    is_odenet = args.network == 'odenet'

    downsampling_layers = [
        nn.Conv2d(3, 4, 3, 1),
        norm(4),
        nn.ReLU(inplace=True),
        nn.Conv2d(4, 4, 4, 2, 1),
        norm(4),
        nn.ReLU(inplace=True),
        nn.Conv2d(4, 4, 4, 2, 1),
        norm(4),
        nn.ReLU(inplace=True),
        Flatten(),
    ]


    feature_layers = [ODEBlock(ODEfunc(900))] 
    fc_layers = [nn.Linear(900, 10)]

    model = nn.Sequential(*downsampling_layers, *feature_layers, *fc_layers).to(device)

    logger.info(model)
    logger.info('Number of parameters: {}'.format(count_parameters(model)))

    criterion = nn.CrossEntropyLoss().to(device)

    train_loader, test_loader, train_eval_loader = get_cifar_loaders(
        args.data_aug, args.batch_size, args.test_batch_size
    )

    data_gen = inf_generator(train_loader)
    batches_per_epoch = len(train_loader)

    lr_fn = learning_rate_with_decay(
        args.batch_size, batch_denom=128, batches_per_epoch=batches_per_epoch, boundary_epochs=[60, 100, 140],
        decay_rates=[1, 0.1, 0.01, 0.001]
    )

    optimizer = torch.optim.SGD(model.parameters(), lr=args.lr, momentum=0.9)

    best_acc = 0
    batch_time_meter = RunningAverageMeter()
    f_nfe_meter = RunningAverageMeter()
    b_nfe_meter = RunningAverageMeter()
    end = time.time()

    for itr in range(args.nepochs * batches_per_epoch):

        for param_group in optimizer.param_groups:
            param_group['lr'] = lr_fn(itr)

        optimizer.zero_grad()
        x, y = data_gen.__next__()
        x = x.to(device)
        y = y.to(device)
        logits = model(x)
        loss = criterion(logits, y)

        if is_odenet:
            nfe_forward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        loss.backward()
        optimizer.step()

        if is_odenet:
            nfe_backward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        batch_time_meter.update(time.time() - end)
        if is_odenet:
            f_nfe_meter.update(nfe_forward)
            b_nfe_meter.update(nfe_backward)
        end = time.time()

        if itr % batches_per_epoch == 0:
            with torch.no_grad():
                train_acc = accuracy(model, train_eval_loader)
                val_acc = accuracy(model, test_loader)
                if val_acc > best_acc:
                    torch.save({'state_dict': model.state_dict(), 'args': args}, os.path.join(args.save, 'model.pth'))
                    best_acc = val_acc
                if best_acc > 0.98 and train_acc > 0.98:
                    break
                logger.info(
                    "Epoch {:04d} | Time {:.3f} ({:.3f}) | NFE-F {:.1f} | NFE-B {:.1f} | "
                    "Train Acc {:.4f} | Test Acc {:.4f}".format(
                        itr // batches_per_epoch, batch_time_meter.val, batch_time_meter.avg, f_nfe_meter.avg,
                        b_nfe_meter.avg, train_acc, val_acc
                    )
                )
    names = []
    params = []
    for name,param in model.named_parameters():
        names.append(name)
        params.append(param.detach().numpy())
    nn1 = dict({'Wb':params,'names':names})
    for name,param in model.named_buffers():
        names.append(name)
        params.append(param.detach().numpy())
    savemat("odecnn_cifar_tiny.mat",nn1)
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb  4 09:04:31 2021

@author: manzand
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 19 15:10:31 2021

@author: manzand
"""

import os
import argparse
import logging
import time
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms
from scipy.io import savemat

parser = argparse.ArgumentParser()
parser.add_argument('--network', type=str, choices=['resnet', 'odenet'], default='odenet')
parser.add_argument('--tol', type=float, default=1e-3)
parser.add_argument('--adjoint', type=eval, default=False, choices=[True, False])
parser.add_argument('--downsampling-method', type=str, default='conv', choices=['conv', 'res'])
parser.add_argument('--nepochs', type=int, default=200)
parser.add_argument('--data_aug', type=eval, default=False, choices=[True, False])
parser.add_argument('--lr', type=float, default=0.01)
parser.add_argument('--batch_size', type=int, default=128)
parser.add_argument('--test_batch_size', type=int, default=1000)

parser.add_argument('--save', type=str, default='../logs/cifartiny')
parser.add_argument('--debug', action='store_true')
parser.add_argument('--gpu', type=int, default=0)
args = parser.parse_args()

if args.adjoint:
    from torchdiffeq import odeint_adjoint as odeint
else:
    from torchdiffeq import odeint


def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


def norm(dim):
    return nn.BatchNorm2d(min(64, dim), dim)


class ConcatConv2d(nn.Module):

    def __init__(self, dim_in, dim_out, ksize=3, stride=1, padding=0, dilation=1, groups=1, bias=True, transpose=False):
        super(ConcatConv2d, self).__init__()
        module = nn.ConvTranspose2d if transpose else nn.Conv2d
        self._layer = module(
            dim_in + 1, dim_out, kernel_size=ksize, stride=stride, padding=padding, dilation=dilation, groups=groups,
            bias=bias
        )

    def forward(self, t, x):
        tt = torch.ones_like(x[:, :1, :, :]) * t
        ttx = torch.cat([tt, x], 1)
        return self._layer(ttx)


class ODEfunc(nn.Module):

    def __init__(self,dim):
        super(ODEfunc, self).__init__()
        self.fc1 = nn.Linear(dim,16)
        self.fc2 = nn.Linear(16, dim)
        self.nfe = 0

    def forward(self, t, x):
        self.nfe += 1
        # print('11111111111111111111')
        # print(x.size())
        out = self.fc1(x)
        # print('222222222222222222')
        # print(out.size())
        out = self.fc2(out)
        return out


class ODEBlock(nn.Module):

    def __init__(self, odefunc):
        super(ODEBlock, self).__init__()
        self.odefunc = odefunc
        self.integration_time = torch.tensor([0, 1]).float()

    def forward(self, x):
        self.integration_time = self.integration_time.type_as(x)
        out = odeint(self.odefunc, x, self.integration_time, rtol=args.tol, atol=args.tol)
        return out[1]

    @property
    def nfe(self):
        return self.odefunc.nfe

    @nfe.setter
    def nfe(self, value):
        self.odefunc.nfe = value


class Flatten(nn.Module):

    def __init__(self):
        super(Flatten, self).__init__()

    def forward(self, x):
        shape = torch.prod(torch.tensor(x.shape[1:])).item()
        xout = x.view(-1, shape)
        # print(xout.size())
        return xout


class RunningAverageMeter(object):
    """Computes and stores the average and current value"""

    def __init__(self, momentum=0.99):
        self.momentum = momentum
        self.reset()

    def reset(self):
        self.val = None
        self.avg = 0

    def update(self, val):
        if self.val is None:
            self.avg = val
        else:
            self.avg = self.avg * self.momentum + val * (1 - self.momentum)
        self.val = val


def get_cifar_loaders(data_aug=False, batch_size=32, test_batch_size=1000, perc=1.0):
    if data_aug:
        transform_train = transforms.Compose([
            transforms.RandomCrop(28, padding=4),
            transforms.ToTensor(),
        ])
    else:
        transform_train = transforms.Compose([
            transforms.ToTensor(),
        ])

    transform_test = transforms.Compose([
        transforms.ToTensor(),
    ])

    train_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_train), batch_size=batch_size,
        shuffle=True, num_workers=2, drop_last=True
    )

    train_eval_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    test_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=False, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    return train_loader, test_loader, train_eval_loader


def inf_generator(iterable):
    """Allows training with DataLoaders in a single infinite loop:
        for i, (x, y) in enumerate(inf_generator(train_loader)):
    """
    iterator = iterable.__iter__()
    while True:
        try:
            yield iterator.__next__()
        except StopIteration:
            iterator = iterable.__iter__()


def learning_rate_with_decay(batch_size, batch_denom, batches_per_epoch, boundary_epochs, decay_rates):
    initial_learning_rate = args.lr * batch_size / batch_denom

    boundaries = [int(batches_per_epoch * epoch) for epoch in boundary_epochs]
    vals = [initial_learning_rate * decay for decay in decay_rates]

    def learning_rate_fn(itr):
        lt = [itr < b for b in boundaries] + [True]
        i = np.argmax(lt)
        return vals[i]

    return learning_rate_fn


def one_hot(x, K):
    return np.array(x[:, None] == np.arange(K)[None, :], dtype=int)


def accuracy(model, dataset_loader):
    total_correct = 0
    for x, y in dataset_loader:
        x = x.to(device)
        y = one_hot(np.array(y.numpy()), 10)

        target_class = np.argmax(y, axis=1)
        predicted_class = np.argmax(model(x).cpu().detach().numpy(), axis=1)
        total_correct += np.sum(predicted_class == target_class)
    return total_correct / len(dataset_loader.dataset)


def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)


def makedirs(dirname):
    if not os.path.exists(dirname):
        os.makedirs(dirname)


def get_logger(logpath, filepath, package_files=[], displaying=True, saving=True, debug=False):
    logger = logging.getLogger()
    if debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logger.setLevel(level)
    if saving:
        info_file_handler = logging.FileHandler(logpath, mode="a")
        info_file_handler.setLevel(level)
        logger.addHandler(info_file_handler)
    if displaying:
        console_handler = logging.StreamHandler()
        console_handler.setLevel(level)
        logger.addHandler(console_handler)
    logger.info(filepath)
    with open(filepath, "r") as f:
        logger.info(f.read())

    for f in package_files:
        logger.info(f)
        with open(f, "r") as package_f:
            logger.info(package_f.read())

    return logger


if __name__ == '__main__':

    makedirs(args.save)
    logger = get_logger(logpath=os.path.join(args.save, 'logs'), filepath=os.path.abspath(__file__))
    logger.info(args)

    device = torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')

    is_odenet = args.network == 'odenet'

    downsampling_layers = [
        nn.Conv2d(3, 4, 3, 1),
        norm(4),
        nn.ReLU(inplace=True),
        nn.Conv2d(4, 4, 4, 2, 1),
        norm(4),
        nn.ReLU(inplace=True),
        nn.Conv2d(4, 4, 4, 2, 1),
        norm(4),
        nn.ReLU(inplace=True),
        Flatten(),
    ]


    feature_layers = [ODEBlock(ODEfunc(900))] 
    fc_layers = [nn.Linear(900, 10)]

    model = nn.Sequential(*downsampling_layers, *feature_layers, *fc_layers).to(device)

    logger.info(model)
    logger.info('Number of parameters: {}'.format(count_parameters(model)))

    criterion = nn.CrossEntropyLoss().to(device)

    train_loader, test_loader, train_eval_loader = get_cifar_loaders(
        args.data_aug, args.batch_size, args.test_batch_size
    )

    data_gen = inf_generator(train_loader)
    batches_per_epoch = len(train_loader)

    lr_fn = learning_rate_with_decay(
        args.batch_size, batch_denom=128, batches_per_epoch=batches_per_epoch, boundary_epochs=[60, 100, 140],
        decay_rates=[1, 0.1, 0.01, 0.001]
    )

    optimizer = torch.optim.SGD(model.parameters(), lr=args.lr, momentum=0.9)

    best_acc = 0
    batch_time_meter = RunningAverageMeter()
    f_nfe_meter = RunningAverageMeter()
    b_nfe_meter = RunningAverageMeter()
    end = time.time()

    for itr in range(args.nepochs * batches_per_epoch):

        for param_group in optimizer.param_groups:
            param_group['lr'] = lr_fn(itr)

        optimizer.zero_grad()
        x, y = data_gen.__next__()
        x = x.to(device)
        y = y.to(device)
        logits = model(x)
        loss = criterion(logits, y)

        if is_odenet:
            nfe_forward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        loss.backward()
        optimizer.step()

        if is_odenet:
            nfe_backward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        batch_time_meter.update(time.time() - end)
        if is_odenet:
            f_nfe_meter.update(nfe_forward)
            b_nfe_meter.update(nfe_backward)
        end = time.time()

        if itr % batches_per_epoch == 0:
            with torch.no_grad():
                train_acc = accuracy(model, train_eval_loader)
                val_acc = accuracy(model, test_loader)
                if val_acc > best_acc:
                    torch.save({'state_dict': model.state_dict(), 'args': args}, os.path.join(args.save, 'model.pth'))
                    best_acc = val_acc
                if best_acc > 0.98 and train_acc > 0.98:
                    break
                logger.info(
                    "Epoch {:04d} | Time {:.3f} ({:.3f}) | NFE-F {:.1f} | NFE-B {:.1f} | "
                    "Train Acc {:.4f} | Test Acc {:.4f}".format(
                        itr // batches_per_epoch, batch_time_meter.val, batch_time_meter.avg, f_nfe_meter.avg,
                        b_nfe_meter.avg, train_acc, val_acc
                    )
                )
    names = []
    params = []
    for name,param in model.named_parameters():
        names.append(name)
        params.append(param.detach().numpy())
    nn1 = dict({'Wb':params,'names':names})
    for name,param in model.named_buffers():
        names.append(name)
        params.append(param.detach().numpy())
    savemat("odecnn_cifar_tiny.mat",nn1)
Namespace(adjoint=False, batch_size=128, data_aug=False, debug=False, downsampling_method='conv', gpu=0, lr=0.01, nepochs=200, network='odenet', save='../logs/cifartiny', test_batch_size=1000, tol=0.001)
Namespace(adjoint=False, batch_size=128, data_aug=False, debug=False, downsampling_method='conv', gpu=0, lr=0.01, nepochs=200, network='odenet', save='../logs/cifartiny', test_batch_size=1000, tol=0.001)
Sequential(
  (0): Conv2d(3, 4, kernel_size=(3, 3), stride=(1, 1))
  (1): BatchNorm2d(4, eps=4, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(4, 4, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (4): BatchNorm2d(4, eps=4, momentum=0.1, affine=True, track_running_stats=True)
  (5): ReLU(inplace=True)
  (6): Conv2d(4, 4, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (7): BatchNorm2d(4, eps=4, momentum=0.1, affine=True, track_running_stats=True)
  (8): ReLU(inplace=True)
  (9): Flatten()
  (10): ODEBlock(
    (odefunc): ODEfunc(
      (fc1): Linear(in_features=900, out_features=16, bias=True)
      (fc2): Linear(in_features=16, out_features=900, bias=True)
    )
  )
  (11): Linear(in_features=900, out_features=10, bias=True)
)
Sequential(
  (0): Conv2d(3, 4, kernel_size=(3, 3), stride=(1, 1))
  (1): BatchNorm2d(4, eps=4, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(4, 4, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (4): BatchNorm2d(4, eps=4, momentum=0.1, affine=True, track_running_stats=True)
  (5): ReLU(inplace=True)
  (6): Conv2d(4, 4, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (7): BatchNorm2d(4, eps=4, momentum=0.1, affine=True, track_running_stats=True)
  (8): ReLU(inplace=True)
  (9): Flatten()
  (10): ODEBlock(
    (odefunc): ODEfunc(
      (fc1): Linear(in_features=900, out_features=16, bias=True)
      (fc2): Linear(in_features=16, out_features=900, bias=True)
    )
  )
  (11): Linear(in_features=900, out_features=10, bias=True)
)
Number of parameters: 39382
Number of parameters: 39382
/home/manzand/Documents/Python/neuralODE_examples/cifar/odenet_cifar_example_tiny.py
/home/manzand/Documents/Python/neuralODE_examples/cifar/odenet_cifar_example_tiny.py
/home/manzand/Documents/Python/neuralODE_examples/cifar/odenet_cifar_example_tiny.py
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb  4 09:04:31 2021

@author: manzand
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 19 15:10:31 2021

@author: manzand
"""

import os
import argparse
import logging
import time
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms
from scipy.io import savemat

parser = argparse.ArgumentParser()
parser.add_argument('--network', type=str, choices=['resnet', 'odenet'], default='odenet')
parser.add_argument('--tol', type=float, default=1e-3)
parser.add_argument('--adjoint', type=eval, default=False, choices=[True, False])
parser.add_argument('--downsampling-method', type=str, default='conv', choices=['conv', 'res'])
parser.add_argument('--nepochs', type=int, default=200)
parser.add_argument('--data_aug', type=eval, default=False, choices=[True, False])
parser.add_argument('--lr', type=float, default=0.01)
parser.add_argument('--batch_size', type=int, default=128)
parser.add_argument('--test_batch_size', type=int, default=1000)

parser.add_argument('--save', type=str, default='../logs/cifartiny')
parser.add_argument('--debug', action='store_true')
parser.add_argument('--gpu', type=int, default=0)
args = parser.parse_args()

if args.adjoint:
    from torchdiffeq import odeint_adjoint as odeint
else:
    from torchdiffeq import odeint


def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


def norm(dim):
    return nn.BatchNorm2d(min(64, dim), dim)


class ConcatConv2d(nn.Module):

    def __init__(self, dim_in, dim_out, ksize=3, stride=1, padding=0, dilation=1, groups=1, bias=True, transpose=False):
        super(ConcatConv2d, self).__init__()
        module = nn.ConvTranspose2d if transpose else nn.Conv2d
        self._layer = module(
            dim_in + 1, dim_out, kernel_size=ksize, stride=stride, padding=padding, dilation=dilation, groups=groups,
            bias=bias
        )

    def forward(self, t, x):
        tt = torch.ones_like(x[:, :1, :, :]) * t
        ttx = torch.cat([tt, x], 1)
        return self._layer(ttx)


class ODEfunc(nn.Module):

    def __init__(self,dim):
        super(ODEfunc, self).__init__()
        self.fc1 = nn.Linear(dim,16)
        self.fc2 = nn.Linear(16, dim)
        self.nfe = 0

    def forward(self, t, x):
        self.nfe += 1
        # print('11111111111111111111')
        # print(x.size())
        out = self.fc1(x)
        # print('222222222222222222')
        # print(out.size())
        out = self.fc2(out)
        return out


class ODEBlock(nn.Module):

    def __init__(self, odefunc):
        super(ODEBlock, self).__init__()
        self.odefunc = odefunc
        self.integration_time = torch.tensor([0, 1]).float()

    def forward(self, x):
        self.integration_time = self.integration_time.type_as(x)
        out = odeint(self.odefunc, x, self.integration_time, rtol=args.tol, atol=args.tol)
        return out[1]

    @property
    def nfe(self):
        return self.odefunc.nfe

    @nfe.setter
    def nfe(self, value):
        self.odefunc.nfe = value


class Flatten(nn.Module):

    def __init__(self):
        super(Flatten, self).__init__()

    def forward(self, x):
        shape = torch.prod(torch.tensor(x.shape[1:])).item()
        xout = x.view(-1, shape)
        # print(xout.size())
        return xout


class RunningAverageMeter(object):
    """Computes and stores the average and current value"""

    def __init__(self, momentum=0.99):
        self.momentum = momentum
        self.reset()

    def reset(self):
        self.val = None
        self.avg = 0

    def update(self, val):
        if self.val is None:
            self.avg = val
        else:
            self.avg = self.avg * self.momentum + val * (1 - self.momentum)
        self.val = val


def get_cifar_loaders(data_aug=False, batch_size=32, test_batch_size=1000, perc=1.0):
    if data_aug:
        transform_train = transforms.Compose([
            transforms.RandomCrop(28, padding=4),
            transforms.ToTensor(),
        ])
    else:
        transform_train = transforms.Compose([
            transforms.ToTensor(),
        ])

    transform_test = transforms.Compose([
        transforms.ToTensor(),
    ])

    train_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_train), batch_size=batch_size,
        shuffle=True, num_workers=2, drop_last=True
    )

    train_eval_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    test_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=False, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    return train_loader, test_loader, train_eval_loader


def inf_generator(iterable):
    """Allows training with DataLoaders in a single infinite loop:
        for i, (x, y) in enumerate(inf_generator(train_loader)):
    """
    iterator = iterable.__iter__()
    while True:
        try:
            yield iterator.__next__()
        except StopIteration:
            iterator = iterable.__iter__()


def learning_rate_with_decay(batch_size, batch_denom, batches_per_epoch, boundary_epochs, decay_rates):
    initial_learning_rate = args.lr * batch_size / batch_denom

    boundaries = [int(batches_per_epoch * epoch) for epoch in boundary_epochs]
    vals = [initial_learning_rate * decay for decay in decay_rates]

    def learning_rate_fn(itr):
        lt = [itr < b for b in boundaries] + [True]
        i = np.argmax(lt)
        return vals[i]

    return learning_rate_fn


def one_hot(x, K):
    return np.array(x[:, None] == np.arange(K)[None, :], dtype=int)


def accuracy(model, dataset_loader):
    total_correct = 0
    for x, y in dataset_loader:
        x = x.to(device)
        y = one_hot(np.array(y.numpy()), 10)

        target_class = np.argmax(y, axis=1)
        predicted_class = np.argmax(model(x).cpu().detach().numpy(), axis=1)
        total_correct += np.sum(predicted_class == target_class)
    return total_correct / len(dataset_loader.dataset)


def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)


def makedirs(dirname):
    if not os.path.exists(dirname):
        os.makedirs(dirname)


def get_logger(logpath, filepath, package_files=[], displaying=True, saving=True, debug=False):
    logger = logging.getLogger()
    if debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logger.setLevel(level)
    if saving:
        info_file_handler = logging.FileHandler(logpath, mode="a")
        info_file_handler.setLevel(level)
        logger.addHandler(info_file_handler)
    if displaying:
        console_handler = logging.StreamHandler()
        console_handler.setLevel(level)
        logger.addHandler(console_handler)
    logger.info(filepath)
    with open(filepath, "r") as f:
        logger.info(f.read())

    for f in package_files:
        logger.info(f)
        with open(f, "r") as package_f:
            logger.info(package_f.read())

    return logger


if __name__ == '__main__':

    makedirs(args.save)
    logger = get_logger(logpath=os.path.join(args.save, 'logs'), filepath=os.path.abspath(__file__))
    logger.info(args)

    device = torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')

    is_odenet = args.network == 'odenet'

    downsampling_layers = [
        nn.Conv2d(3, 4, 3, 1),
        norm(4),
        nn.ReLU(inplace=True),
        nn.Conv2d(4, 4, 4, 2, 1),
        norm(4),
        nn.ReLU(inplace=True),
        nn.Conv2d(4, 4, 4, 2, 1),
        norm(4),
        nn.ReLU(inplace=True),
        Flatten(),
    ]

    feature_layers = [ODEBlock(ODEfunc(196))] 
    fc_layers = [nn.Linear(196, 10)]
    # feature_layers = [ODEBlock(ODEfunc(900))] 
    # fc_layers = [nn.Linear(900, 10)]

    model = nn.Sequential(*downsampling_layers, *feature_layers, *fc_layers).to(device)

    logger.info(model)
    logger.info('Number of parameters: {}'.format(count_parameters(model)))

    criterion = nn.CrossEntropyLoss().to(device)

    train_loader, test_loader, train_eval_loader = get_cifar_loaders(
        args.data_aug, args.batch_size, args.test_batch_size
    )

    data_gen = inf_generator(train_loader)
    batches_per_epoch = len(train_loader)

    lr_fn = learning_rate_with_decay(
        args.batch_size, batch_denom=128, batches_per_epoch=batches_per_epoch, boundary_epochs=[60, 100, 140],
        decay_rates=[1, 0.1, 0.01, 0.001]
    )

    optimizer = torch.optim.SGD(model.parameters(), lr=args.lr, momentum=0.9)

    best_acc = 0
    batch_time_meter = RunningAverageMeter()
    f_nfe_meter = RunningAverageMeter()
    b_nfe_meter = RunningAverageMeter()
    end = time.time()

    for itr in range(args.nepochs * batches_per_epoch):

        for param_group in optimizer.param_groups:
            param_group['lr'] = lr_fn(itr)

        optimizer.zero_grad()
        x, y = data_gen.__next__()
        x = x.to(device)
        y = y.to(device)
        logits = model(x)
        loss = criterion(logits, y)

        if is_odenet:
            nfe_forward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        loss.backward()
        optimizer.step()

        if is_odenet:
            nfe_backward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        batch_time_meter.update(time.time() - end)
        if is_odenet:
            f_nfe_meter.update(nfe_forward)
            b_nfe_meter.update(nfe_backward)
        end = time.time()

        if itr % batches_per_epoch == 0:
            with torch.no_grad():
                train_acc = accuracy(model, train_eval_loader)
                val_acc = accuracy(model, test_loader)
                if val_acc > best_acc:
                    torch.save({'state_dict': model.state_dict(), 'args': args}, os.path.join(args.save, 'model.pth'))
                    best_acc = val_acc
                if best_acc > 0.98 and train_acc > 0.98:
                    break
                logger.info(
                    "Epoch {:04d} | Time {:.3f} ({:.3f}) | NFE-F {:.1f} | NFE-B {:.1f} | "
                    "Train Acc {:.4f} | Test Acc {:.4f}".format(
                        itr // batches_per_epoch, batch_time_meter.val, batch_time_meter.avg, f_nfe_meter.avg,
                        b_nfe_meter.avg, train_acc, val_acc
                    )
                )
    names = []
    params = []
    for name,param in model.named_parameters():
        names.append(name)
        params.append(param.detach().numpy())
    nn1 = dict({'Wb':params,'names':names})
    for name,param in model.named_buffers():
        names.append(name)
        params.append(param.detach().numpy())
    savemat("odecnn_cifar_tiny.mat",nn1)
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb  4 09:04:31 2021

@author: manzand
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 19 15:10:31 2021

@author: manzand
"""

import os
import argparse
import logging
import time
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms
from scipy.io import savemat

parser = argparse.ArgumentParser()
parser.add_argument('--network', type=str, choices=['resnet', 'odenet'], default='odenet')
parser.add_argument('--tol', type=float, default=1e-3)
parser.add_argument('--adjoint', type=eval, default=False, choices=[True, False])
parser.add_argument('--downsampling-method', type=str, default='conv', choices=['conv', 'res'])
parser.add_argument('--nepochs', type=int, default=200)
parser.add_argument('--data_aug', type=eval, default=False, choices=[True, False])
parser.add_argument('--lr', type=float, default=0.01)
parser.add_argument('--batch_size', type=int, default=128)
parser.add_argument('--test_batch_size', type=int, default=1000)

parser.add_argument('--save', type=str, default='../logs/cifartiny')
parser.add_argument('--debug', action='store_true')
parser.add_argument('--gpu', type=int, default=0)
args = parser.parse_args()

if args.adjoint:
    from torchdiffeq import odeint_adjoint as odeint
else:
    from torchdiffeq import odeint


def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


def norm(dim):
    return nn.BatchNorm2d(min(64, dim), dim)


class ConcatConv2d(nn.Module):

    def __init__(self, dim_in, dim_out, ksize=3, stride=1, padding=0, dilation=1, groups=1, bias=True, transpose=False):
        super(ConcatConv2d, self).__init__()
        module = nn.ConvTranspose2d if transpose else nn.Conv2d
        self._layer = module(
            dim_in + 1, dim_out, kernel_size=ksize, stride=stride, padding=padding, dilation=dilation, groups=groups,
            bias=bias
        )

    def forward(self, t, x):
        tt = torch.ones_like(x[:, :1, :, :]) * t
        ttx = torch.cat([tt, x], 1)
        return self._layer(ttx)


class ODEfunc(nn.Module):

    def __init__(self,dim):
        super(ODEfunc, self).__init__()
        self.fc1 = nn.Linear(dim,16)
        self.fc2 = nn.Linear(16, dim)
        self.nfe = 0

    def forward(self, t, x):
        self.nfe += 1
        # print('11111111111111111111')
        # print(x.size())
        out = self.fc1(x)
        # print('222222222222222222')
        # print(out.size())
        out = self.fc2(out)
        return out


class ODEBlock(nn.Module):

    def __init__(self, odefunc):
        super(ODEBlock, self).__init__()
        self.odefunc = odefunc
        self.integration_time = torch.tensor([0, 1]).float()

    def forward(self, x):
        self.integration_time = self.integration_time.type_as(x)
        out = odeint(self.odefunc, x, self.integration_time, rtol=args.tol, atol=args.tol)
        return out[1]

    @property
    def nfe(self):
        return self.odefunc.nfe

    @nfe.setter
    def nfe(self, value):
        self.odefunc.nfe = value


class Flatten(nn.Module):

    def __init__(self):
        super(Flatten, self).__init__()

    def forward(self, x):
        shape = torch.prod(torch.tensor(x.shape[1:])).item()
        xout = x.view(-1, shape)
        # print(xout.size())
        return xout


class RunningAverageMeter(object):
    """Computes and stores the average and current value"""

    def __init__(self, momentum=0.99):
        self.momentum = momentum
        self.reset()

    def reset(self):
        self.val = None
        self.avg = 0

    def update(self, val):
        if self.val is None:
            self.avg = val
        else:
            self.avg = self.avg * self.momentum + val * (1 - self.momentum)
        self.val = val


def get_cifar_loaders(data_aug=False, batch_size=32, test_batch_size=1000, perc=1.0):
    if data_aug:
        transform_train = transforms.Compose([
            transforms.RandomCrop(28, padding=4),
            transforms.ToTensor(),
        ])
    else:
        transform_train = transforms.Compose([
            transforms.ToTensor(),
        ])

    transform_test = transforms.Compose([
        transforms.ToTensor(),
    ])

    train_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_train), batch_size=batch_size,
        shuffle=True, num_workers=2, drop_last=True
    )

    train_eval_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    test_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=False, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    return train_loader, test_loader, train_eval_loader


def inf_generator(iterable):
    """Allows training with DataLoaders in a single infinite loop:
        for i, (x, y) in enumerate(inf_generator(train_loader)):
    """
    iterator = iterable.__iter__()
    while True:
        try:
            yield iterator.__next__()
        except StopIteration:
            iterator = iterable.__iter__()


def learning_rate_with_decay(batch_size, batch_denom, batches_per_epoch, boundary_epochs, decay_rates):
    initial_learning_rate = args.lr * batch_size / batch_denom

    boundaries = [int(batches_per_epoch * epoch) for epoch in boundary_epochs]
    vals = [initial_learning_rate * decay for decay in decay_rates]

    def learning_rate_fn(itr):
        lt = [itr < b for b in boundaries] + [True]
        i = np.argmax(lt)
        return vals[i]

    return learning_rate_fn


def one_hot(x, K):
    return np.array(x[:, None] == np.arange(K)[None, :], dtype=int)


def accuracy(model, dataset_loader):
    total_correct = 0
    for x, y in dataset_loader:
        x = x.to(device)
        y = one_hot(np.array(y.numpy()), 10)

        target_class = np.argmax(y, axis=1)
        predicted_class = np.argmax(model(x).cpu().detach().numpy(), axis=1)
        total_correct += np.sum(predicted_class == target_class)
    return total_correct / len(dataset_loader.dataset)


def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)


def makedirs(dirname):
    if not os.path.exists(dirname):
        os.makedirs(dirname)


def get_logger(logpath, filepath, package_files=[], displaying=True, saving=True, debug=False):
    logger = logging.getLogger()
    if debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logger.setLevel(level)
    if saving:
        info_file_handler = logging.FileHandler(logpath, mode="a")
        info_file_handler.setLevel(level)
        logger.addHandler(info_file_handler)
    if displaying:
        console_handler = logging.StreamHandler()
        console_handler.setLevel(level)
        logger.addHandler(console_handler)
    logger.info(filepath)
    with open(filepath, "r") as f:
        logger.info(f.read())

    for f in package_files:
        logger.info(f)
        with open(f, "r") as package_f:
            logger.info(package_f.read())

    return logger


if __name__ == '__main__':

    makedirs(args.save)
    logger = get_logger(logpath=os.path.join(args.save, 'logs'), filepath=os.path.abspath(__file__))
    logger.info(args)

    device = torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')

    is_odenet = args.network == 'odenet'

    downsampling_layers = [
        nn.Conv2d(3, 4, 3, 1),
        norm(4),
        nn.ReLU(inplace=True),
        nn.Conv2d(4, 4, 4, 2, 1),
        norm(4),
        nn.ReLU(inplace=True),
        nn.Conv2d(4, 4, 4, 2, 1),
        norm(4),
        nn.ReLU(inplace=True),
        Flatten(),
    ]

    feature_layers = [ODEBlock(ODEfunc(196))] 
    fc_layers = [nn.Linear(196, 10)]
    # feature_layers = [ODEBlock(ODEfunc(900))] 
    # fc_layers = [nn.Linear(900, 10)]

    model = nn.Sequential(*downsampling_layers, *feature_layers, *fc_layers).to(device)

    logger.info(model)
    logger.info('Number of parameters: {}'.format(count_parameters(model)))

    criterion = nn.CrossEntropyLoss().to(device)

    train_loader, test_loader, train_eval_loader = get_cifar_loaders(
        args.data_aug, args.batch_size, args.test_batch_size
    )

    data_gen = inf_generator(train_loader)
    batches_per_epoch = len(train_loader)

    lr_fn = learning_rate_with_decay(
        args.batch_size, batch_denom=128, batches_per_epoch=batches_per_epoch, boundary_epochs=[60, 100, 140],
        decay_rates=[1, 0.1, 0.01, 0.001]
    )

    optimizer = torch.optim.SGD(model.parameters(), lr=args.lr, momentum=0.9)

    best_acc = 0
    batch_time_meter = RunningAverageMeter()
    f_nfe_meter = RunningAverageMeter()
    b_nfe_meter = RunningAverageMeter()
    end = time.time()

    for itr in range(args.nepochs * batches_per_epoch):

        for param_group in optimizer.param_groups:
            param_group['lr'] = lr_fn(itr)

        optimizer.zero_grad()
        x, y = data_gen.__next__()
        x = x.to(device)
        y = y.to(device)
        logits = model(x)
        loss = criterion(logits, y)

        if is_odenet:
            nfe_forward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        loss.backward()
        optimizer.step()

        if is_odenet:
            nfe_backward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        batch_time_meter.update(time.time() - end)
        if is_odenet:
            f_nfe_meter.update(nfe_forward)
            b_nfe_meter.update(nfe_backward)
        end = time.time()

        if itr % batches_per_epoch == 0:
            with torch.no_grad():
                train_acc = accuracy(model, train_eval_loader)
                val_acc = accuracy(model, test_loader)
                if val_acc > best_acc:
                    torch.save({'state_dict': model.state_dict(), 'args': args}, os.path.join(args.save, 'model.pth'))
                    best_acc = val_acc
                if best_acc > 0.98 and train_acc > 0.98:
                    break
                logger.info(
                    "Epoch {:04d} | Time {:.3f} ({:.3f}) | NFE-F {:.1f} | NFE-B {:.1f} | "
                    "Train Acc {:.4f} | Test Acc {:.4f}".format(
                        itr // batches_per_epoch, batch_time_meter.val, batch_time_meter.avg, f_nfe_meter.avg,
                        b_nfe_meter.avg, train_acc, val_acc
                    )
                )
    names = []
    params = []
    for name,param in model.named_parameters():
        names.append(name)
        params.append(param.detach().numpy())
    nn1 = dict({'Wb':params,'names':names})
    for name,param in model.named_buffers():
        names.append(name)
        params.append(param.detach().numpy())
    savemat("odecnn_cifar_tiny.mat",nn1)
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb  4 09:04:31 2021

@author: manzand
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 19 15:10:31 2021

@author: manzand
"""

import os
import argparse
import logging
import time
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms
from scipy.io import savemat

parser = argparse.ArgumentParser()
parser.add_argument('--network', type=str, choices=['resnet', 'odenet'], default='odenet')
parser.add_argument('--tol', type=float, default=1e-3)
parser.add_argument('--adjoint', type=eval, default=False, choices=[True, False])
parser.add_argument('--downsampling-method', type=str, default='conv', choices=['conv', 'res'])
parser.add_argument('--nepochs', type=int, default=200)
parser.add_argument('--data_aug', type=eval, default=False, choices=[True, False])
parser.add_argument('--lr', type=float, default=0.01)
parser.add_argument('--batch_size', type=int, default=128)
parser.add_argument('--test_batch_size', type=int, default=1000)

parser.add_argument('--save', type=str, default='../logs/cifartiny')
parser.add_argument('--debug', action='store_true')
parser.add_argument('--gpu', type=int, default=0)
args = parser.parse_args()

if args.adjoint:
    from torchdiffeq import odeint_adjoint as odeint
else:
    from torchdiffeq import odeint


def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


def norm(dim):
    return nn.BatchNorm2d(min(64, dim), dim)


class ConcatConv2d(nn.Module):

    def __init__(self, dim_in, dim_out, ksize=3, stride=1, padding=0, dilation=1, groups=1, bias=True, transpose=False):
        super(ConcatConv2d, self).__init__()
        module = nn.ConvTranspose2d if transpose else nn.Conv2d
        self._layer = module(
            dim_in + 1, dim_out, kernel_size=ksize, stride=stride, padding=padding, dilation=dilation, groups=groups,
            bias=bias
        )

    def forward(self, t, x):
        tt = torch.ones_like(x[:, :1, :, :]) * t
        ttx = torch.cat([tt, x], 1)
        return self._layer(ttx)


class ODEfunc(nn.Module):

    def __init__(self,dim):
        super(ODEfunc, self).__init__()
        self.fc1 = nn.Linear(dim,16)
        self.fc2 = nn.Linear(16, dim)
        self.nfe = 0

    def forward(self, t, x):
        self.nfe += 1
        # print('11111111111111111111')
        # print(x.size())
        out = self.fc1(x)
        # print('222222222222222222')
        # print(out.size())
        out = self.fc2(out)
        return out


class ODEBlock(nn.Module):

    def __init__(self, odefunc):
        super(ODEBlock, self).__init__()
        self.odefunc = odefunc
        self.integration_time = torch.tensor([0, 1]).float()

    def forward(self, x):
        self.integration_time = self.integration_time.type_as(x)
        out = odeint(self.odefunc, x, self.integration_time, rtol=args.tol, atol=args.tol)
        return out[1]

    @property
    def nfe(self):
        return self.odefunc.nfe

    @nfe.setter
    def nfe(self, value):
        self.odefunc.nfe = value


class Flatten(nn.Module):

    def __init__(self):
        super(Flatten, self).__init__()

    def forward(self, x):
        shape = torch.prod(torch.tensor(x.shape[1:])).item()
        xout = x.view(-1, shape)
        # print(xout.size())
        return xout


class RunningAverageMeter(object):
    """Computes and stores the average and current value"""

    def __init__(self, momentum=0.99):
        self.momentum = momentum
        self.reset()

    def reset(self):
        self.val = None
        self.avg = 0

    def update(self, val):
        if self.val is None:
            self.avg = val
        else:
            self.avg = self.avg * self.momentum + val * (1 - self.momentum)
        self.val = val


def get_cifar_loaders(data_aug=False, batch_size=32, test_batch_size=1000, perc=1.0):
    if data_aug:
        transform_train = transforms.Compose([
            transforms.RandomCrop(28, padding=4),
            transforms.ToTensor(),
        ])
    else:
        transform_train = transforms.Compose([
            transforms.ToTensor(),
        ])

    transform_test = transforms.Compose([
        transforms.ToTensor(),
    ])

    train_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_train), batch_size=batch_size,
        shuffle=True, num_workers=2, drop_last=True
    )

    train_eval_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    test_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=False, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    return train_loader, test_loader, train_eval_loader


def inf_generator(iterable):
    """Allows training with DataLoaders in a single infinite loop:
        for i, (x, y) in enumerate(inf_generator(train_loader)):
    """
    iterator = iterable.__iter__()
    while True:
        try:
            yield iterator.__next__()
        except StopIteration:
            iterator = iterable.__iter__()


def learning_rate_with_decay(batch_size, batch_denom, batches_per_epoch, boundary_epochs, decay_rates):
    initial_learning_rate = args.lr * batch_size / batch_denom

    boundaries = [int(batches_per_epoch * epoch) for epoch in boundary_epochs]
    vals = [initial_learning_rate * decay for decay in decay_rates]

    def learning_rate_fn(itr):
        lt = [itr < b for b in boundaries] + [True]
        i = np.argmax(lt)
        return vals[i]

    return learning_rate_fn


def one_hot(x, K):
    return np.array(x[:, None] == np.arange(K)[None, :], dtype=int)


def accuracy(model, dataset_loader):
    total_correct = 0
    for x, y in dataset_loader:
        x = x.to(device)
        y = one_hot(np.array(y.numpy()), 10)

        target_class = np.argmax(y, axis=1)
        predicted_class = np.argmax(model(x).cpu().detach().numpy(), axis=1)
        total_correct += np.sum(predicted_class == target_class)
    return total_correct / len(dataset_loader.dataset)


def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)


def makedirs(dirname):
    if not os.path.exists(dirname):
        os.makedirs(dirname)


def get_logger(logpath, filepath, package_files=[], displaying=True, saving=True, debug=False):
    logger = logging.getLogger()
    if debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logger.setLevel(level)
    if saving:
        info_file_handler = logging.FileHandler(logpath, mode="a")
        info_file_handler.setLevel(level)
        logger.addHandler(info_file_handler)
    if displaying:
        console_handler = logging.StreamHandler()
        console_handler.setLevel(level)
        logger.addHandler(console_handler)
    logger.info(filepath)
    with open(filepath, "r") as f:
        logger.info(f.read())

    for f in package_files:
        logger.info(f)
        with open(f, "r") as package_f:
            logger.info(package_f.read())

    return logger


if __name__ == '__main__':

    makedirs(args.save)
    logger = get_logger(logpath=os.path.join(args.save, 'logs'), filepath=os.path.abspath(__file__))
    logger.info(args)

    device = torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')

    is_odenet = args.network == 'odenet'

    downsampling_layers = [
        nn.Conv2d(3, 4, 3, 1),
        norm(4),
        nn.ReLU(inplace=True),
        nn.Conv2d(4, 4, 4, 2, 1),
        norm(4),
        nn.ReLU(inplace=True),
        nn.Conv2d(4, 4, 4, 2, 1),
        norm(4),
        nn.ReLU(inplace=True),
        Flatten(),
    ]

    feature_layers = [ODEBlock(ODEfunc(196))] 
    fc_layers = [nn.Linear(196, 10)]
    # feature_layers = [ODEBlock(ODEfunc(900))] 
    # fc_layers = [nn.Linear(900, 10)]

    model = nn.Sequential(*downsampling_layers, *feature_layers, *fc_layers).to(device)

    logger.info(model)
    logger.info('Number of parameters: {}'.format(count_parameters(model)))

    criterion = nn.CrossEntropyLoss().to(device)

    train_loader, test_loader, train_eval_loader = get_cifar_loaders(
        args.data_aug, args.batch_size, args.test_batch_size
    )

    data_gen = inf_generator(train_loader)
    batches_per_epoch = len(train_loader)

    lr_fn = learning_rate_with_decay(
        args.batch_size, batch_denom=128, batches_per_epoch=batches_per_epoch, boundary_epochs=[60, 100, 140],
        decay_rates=[1, 0.1, 0.01, 0.001]
    )

    optimizer = torch.optim.SGD(model.parameters(), lr=args.lr, momentum=0.9)

    best_acc = 0
    batch_time_meter = RunningAverageMeter()
    f_nfe_meter = RunningAverageMeter()
    b_nfe_meter = RunningAverageMeter()
    end = time.time()

    for itr in range(args.nepochs * batches_per_epoch):

        for param_group in optimizer.param_groups:
            param_group['lr'] = lr_fn(itr)

        optimizer.zero_grad()
        x, y = data_gen.__next__()
        x = x.to(device)
        y = y.to(device)
        logits = model(x)
        loss = criterion(logits, y)

        if is_odenet:
            nfe_forward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        loss.backward()
        optimizer.step()

        if is_odenet:
            nfe_backward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        batch_time_meter.update(time.time() - end)
        if is_odenet:
            f_nfe_meter.update(nfe_forward)
            b_nfe_meter.update(nfe_backward)
        end = time.time()

        if itr % batches_per_epoch == 0:
            with torch.no_grad():
                train_acc = accuracy(model, train_eval_loader)
                val_acc = accuracy(model, test_loader)
                if val_acc > best_acc:
                    torch.save({'state_dict': model.state_dict(), 'args': args}, os.path.join(args.save, 'model.pth'))
                    best_acc = val_acc
                if best_acc > 0.98 and train_acc > 0.98:
                    break
                logger.info(
                    "Epoch {:04d} | Time {:.3f} ({:.3f}) | NFE-F {:.1f} | NFE-B {:.1f} | "
                    "Train Acc {:.4f} | Test Acc {:.4f}".format(
                        itr // batches_per_epoch, batch_time_meter.val, batch_time_meter.avg, f_nfe_meter.avg,
                        b_nfe_meter.avg, train_acc, val_acc
                    )
                )
    names = []
    params = []
    for name,param in model.named_parameters():
        names.append(name)
        params.append(param.detach().numpy())
    nn1 = dict({'Wb':params,'names':names})
    for name,param in model.named_buffers():
        names.append(name)
        params.append(param.detach().numpy())
    savemat("odecnn_cifar_tiny.mat",nn1)
Namespace(adjoint=False, batch_size=128, data_aug=False, debug=False, downsampling_method='conv', gpu=0, lr=0.01, nepochs=200, network='odenet', save='../logs/cifartiny', test_batch_size=1000, tol=0.001)
Namespace(adjoint=False, batch_size=128, data_aug=False, debug=False, downsampling_method='conv', gpu=0, lr=0.01, nepochs=200, network='odenet', save='../logs/cifartiny', test_batch_size=1000, tol=0.001)
Namespace(adjoint=False, batch_size=128, data_aug=False, debug=False, downsampling_method='conv', gpu=0, lr=0.01, nepochs=200, network='odenet', save='../logs/cifartiny', test_batch_size=1000, tol=0.001)
Sequential(
  (0): Conv2d(3, 4, kernel_size=(3, 3), stride=(1, 1))
  (1): BatchNorm2d(4, eps=4, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(4, 4, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (4): BatchNorm2d(4, eps=4, momentum=0.1, affine=True, track_running_stats=True)
  (5): ReLU(inplace=True)
  (6): Conv2d(4, 4, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (7): BatchNorm2d(4, eps=4, momentum=0.1, affine=True, track_running_stats=True)
  (8): ReLU(inplace=True)
  (9): Flatten()
  (10): ODEBlock(
    (odefunc): ODEfunc(
      (fc1): Linear(in_features=196, out_features=16, bias=True)
      (fc2): Linear(in_features=16, out_features=196, bias=True)
    )
  )
  (11): Linear(in_features=196, out_features=10, bias=True)
)
Sequential(
  (0): Conv2d(3, 4, kernel_size=(3, 3), stride=(1, 1))
  (1): BatchNorm2d(4, eps=4, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(4, 4, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (4): BatchNorm2d(4, eps=4, momentum=0.1, affine=True, track_running_stats=True)
  (5): ReLU(inplace=True)
  (6): Conv2d(4, 4, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (7): BatchNorm2d(4, eps=4, momentum=0.1, affine=True, track_running_stats=True)
  (8): ReLU(inplace=True)
  (9): Flatten()
  (10): ODEBlock(
    (odefunc): ODEfunc(
      (fc1): Linear(in_features=196, out_features=16, bias=True)
      (fc2): Linear(in_features=16, out_features=196, bias=True)
    )
  )
  (11): Linear(in_features=196, out_features=10, bias=True)
)
Sequential(
  (0): Conv2d(3, 4, kernel_size=(3, 3), stride=(1, 1))
  (1): BatchNorm2d(4, eps=4, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(4, 4, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (4): BatchNorm2d(4, eps=4, momentum=0.1, affine=True, track_running_stats=True)
  (5): ReLU(inplace=True)
  (6): Conv2d(4, 4, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (7): BatchNorm2d(4, eps=4, momentum=0.1, affine=True, track_running_stats=True)
  (8): ReLU(inplace=True)
  (9): Flatten()
  (10): ODEBlock(
    (odefunc): ODEfunc(
      (fc1): Linear(in_features=196, out_features=16, bias=True)
      (fc2): Linear(in_features=16, out_features=196, bias=True)
    )
  )
  (11): Linear(in_features=196, out_features=10, bias=True)
)
Number of parameters: 9110
Number of parameters: 9110
Number of parameters: 9110
Epoch 0000 | Time 0.107 (0.107) | NFE-F 26.0 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0000 | Time 0.107 (0.107) | NFE-F 26.0 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0000 | Time 0.107 (0.107) | NFE-F 26.0 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0001 | Time 0.121 (0.039) | NFE-F 17.1 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0001 | Time 0.121 (0.039) | NFE-F 17.1 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0001 | Time 0.121 (0.039) | NFE-F 17.1 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0002 | Time 0.130 (0.035) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.2800 | Test Acc 0.2836
Epoch 0002 | Time 0.130 (0.035) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.2800 | Test Acc 0.2836
Epoch 0002 | Time 0.130 (0.035) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.2800 | Test Acc 0.2836
Epoch 0003 | Time 0.133 (0.034) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.3050 | Test Acc 0.3108
Epoch 0003 | Time 0.133 (0.034) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.3050 | Test Acc 0.3108
Epoch 0003 | Time 0.133 (0.034) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.3050 | Test Acc 0.3108
Epoch 0004 | Time 0.118 (0.035) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.3778 | Test Acc 0.3802
Epoch 0004 | Time 0.118 (0.035) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.3778 | Test Acc 0.3802
Epoch 0004 | Time 0.118 (0.035) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.3778 | Test Acc 0.3802
Epoch 0005 | Time 0.132 (0.035) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.3948 | Test Acc 0.3914
Epoch 0005 | Time 0.132 (0.035) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.3948 | Test Acc 0.3914
Epoch 0005 | Time 0.132 (0.035) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.3948 | Test Acc 0.3914
Epoch 0006 | Time 0.113 (0.035) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.4351 | Test Acc 0.4325
Epoch 0006 | Time 0.113 (0.035) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.4351 | Test Acc 0.4325
Epoch 0006 | Time 0.113 (0.035) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.4351 | Test Acc 0.4325
Epoch 0007 | Time 0.131 (0.034) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.4478 | Test Acc 0.4417
Epoch 0007 | Time 0.131 (0.034) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.4478 | Test Acc 0.4417
Epoch 0007 | Time 0.131 (0.034) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.4478 | Test Acc 0.4417
Epoch 0008 | Time 0.122 (0.034) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.4502 | Test Acc 0.4467
Epoch 0008 | Time 0.122 (0.034) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.4502 | Test Acc 0.4467
Epoch 0008 | Time 0.122 (0.034) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.4502 | Test Acc 0.4467
Epoch 0009 | Time 0.129 (0.034) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.4798 | Test Acc 0.4707
Epoch 0009 | Time 0.129 (0.034) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.4798 | Test Acc 0.4707
Epoch 0009 | Time 0.129 (0.034) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.4798 | Test Acc 0.4707
Epoch 0010 | Time 0.122 (0.034) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.4825 | Test Acc 0.4730
Epoch 0010 | Time 0.122 (0.034) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.4825 | Test Acc 0.4730
Epoch 0010 | Time 0.122 (0.034) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.4825 | Test Acc 0.4730
Epoch 0011 | Time 0.118 (0.034) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.4927 | Test Acc 0.4779
Epoch 0011 | Time 0.118 (0.034) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.4927 | Test Acc 0.4779
Epoch 0011 | Time 0.118 (0.034) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.4927 | Test Acc 0.4779
Epoch 0012 | Time 0.121 (0.035) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5020 | Test Acc 0.4856
Epoch 0012 | Time 0.121 (0.035) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5020 | Test Acc 0.4856
Epoch 0012 | Time 0.121 (0.035) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5020 | Test Acc 0.4856
Epoch 0013 | Time 0.139 (0.034) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5202 | Test Acc 0.5046
Epoch 0013 | Time 0.139 (0.034) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5202 | Test Acc 0.5046
Epoch 0013 | Time 0.139 (0.034) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5202 | Test Acc 0.5046
Epoch 0014 | Time 0.126 (0.034) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5222 | Test Acc 0.5028
Epoch 0014 | Time 0.126 (0.034) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5222 | Test Acc 0.5028
Epoch 0014 | Time 0.126 (0.034) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5222 | Test Acc 0.5028
Epoch 0015 | Time 0.119 (0.035) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5264 | Test Acc 0.5122
Epoch 0015 | Time 0.119 (0.035) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5264 | Test Acc 0.5122
Epoch 0015 | Time 0.119 (0.035) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5264 | Test Acc 0.5122
Epoch 0016 | Time 0.119 (0.035) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5239 | Test Acc 0.5086
Epoch 0016 | Time 0.119 (0.035) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5239 | Test Acc 0.5086
Epoch 0016 | Time 0.119 (0.035) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5239 | Test Acc 0.5086
Epoch 0017 | Time 0.134 (0.035) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5324 | Test Acc 0.5154
Epoch 0017 | Time 0.134 (0.035) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5324 | Test Acc 0.5154
Epoch 0017 | Time 0.134 (0.035) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5324 | Test Acc 0.5154
Epoch 0018 | Time 0.140 (0.039) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5311 | Test Acc 0.5221
Epoch 0018 | Time 0.140 (0.039) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5311 | Test Acc 0.5221
Epoch 0018 | Time 0.140 (0.039) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5311 | Test Acc 0.5221
/home/manzand/Documents/Python/neuralODE_examples/cifar/odenet_cifar_example_tiny.py
/home/manzand/Documents/Python/neuralODE_examples/cifar/odenet_cifar_example_tiny.py
/home/manzand/Documents/Python/neuralODE_examples/cifar/odenet_cifar_example_tiny.py
/home/manzand/Documents/Python/neuralODE_examples/cifar/odenet_cifar_example_tiny.py
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb  4 09:04:31 2021

@author: manzand
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 19 15:10:31 2021

@author: manzand
"""

import os
import argparse
import logging
import time
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms
from scipy.io import savemat

parser = argparse.ArgumentParser()
parser.add_argument('--network', type=str, choices=['resnet', 'odenet'], default='odenet')
parser.add_argument('--tol', type=float, default=1e-3)
parser.add_argument('--adjoint', type=eval, default=False, choices=[True, False])
parser.add_argument('--downsampling-method', type=str, default='conv', choices=['conv', 'res'])
parser.add_argument('--nepochs', type=int, default=200)
parser.add_argument('--data_aug', type=eval, default=False, choices=[True, False])
parser.add_argument('--lr', type=float, default=0.01)
parser.add_argument('--batch_size', type=int, default=128)
parser.add_argument('--test_batch_size', type=int, default=1000)

parser.add_argument('--save', type=str, default='../logs/cifartiny')
parser.add_argument('--debug', action='store_true')
parser.add_argument('--gpu', type=int, default=0)
args = parser.parse_args()

if args.adjoint:
    from torchdiffeq import odeint_adjoint as odeint
else:
    from torchdiffeq import odeint


def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


def norm(dim):
    return nn.BatchNorm2d(min(64, dim), dim)


class ConcatConv2d(nn.Module):

    def __init__(self, dim_in, dim_out, ksize=3, stride=1, padding=0, dilation=1, groups=1, bias=True, transpose=False):
        super(ConcatConv2d, self).__init__()
        module = nn.ConvTranspose2d if transpose else nn.Conv2d
        self._layer = module(
            dim_in + 1, dim_out, kernel_size=ksize, stride=stride, padding=padding, dilation=dilation, groups=groups,
            bias=bias
        )

    def forward(self, t, x):
        tt = torch.ones_like(x[:, :1, :, :]) * t
        ttx = torch.cat([tt, x], 1)
        return self._layer(ttx)


class ODEfunc(nn.Module):

    def __init__(self,dim):
        super(ODEfunc, self).__init__()
        self.fc1 = nn.Linear(dim,16)
        self.fc2 = nn.Linear(16, dim)
        self.nfe = 0

    def forward(self, t, x):
        self.nfe += 1
        # print('11111111111111111111')
        # print(x.size())
        out = self.fc1(x)
        # print('222222222222222222')
        # print(out.size())
        out = self.fc2(out)
        return out


class ODEBlock(nn.Module):

    def __init__(self, odefunc):
        super(ODEBlock, self).__init__()
        self.odefunc = odefunc
        self.integration_time = torch.tensor([0, 1]).float()

    def forward(self, x):
        self.integration_time = self.integration_time.type_as(x)
        out = odeint(self.odefunc, x, self.integration_time, rtol=args.tol, atol=args.tol)
        return out[1]

    @property
    def nfe(self):
        return self.odefunc.nfe

    @nfe.setter
    def nfe(self, value):
        self.odefunc.nfe = value


class Flatten(nn.Module):

    def __init__(self):
        super(Flatten, self).__init__()

    def forward(self, x):
        shape = torch.prod(torch.tensor(x.shape[1:])).item()
        xout = x.view(-1, shape)
        # print(xout.size())
        return xout


class RunningAverageMeter(object):
    """Computes and stores the average and current value"""

    def __init__(self, momentum=0.99):
        self.momentum = momentum
        self.reset()

    def reset(self):
        self.val = None
        self.avg = 0

    def update(self, val):
        if self.val is None:
            self.avg = val
        else:
            self.avg = self.avg * self.momentum + val * (1 - self.momentum)
        self.val = val


def get_cifar_loaders(data_aug=False, batch_size=32, test_batch_size=1000, perc=1.0):
    if data_aug:
        transform_train = transforms.Compose([
            transforms.RandomCrop(28, padding=4),
            transforms.ToTensor(),
        ])
    else:
        transform_train = transforms.Compose([
            transforms.ToTensor(),
        ])

    transform_test = transforms.Compose([
        transforms.ToTensor(),
    ])

    train_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_train), batch_size=batch_size,
        shuffle=True, num_workers=2, drop_last=True
    )

    train_eval_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    test_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=False, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    return train_loader, test_loader, train_eval_loader


def inf_generator(iterable):
    """Allows training with DataLoaders in a single infinite loop:
        for i, (x, y) in enumerate(inf_generator(train_loader)):
    """
    iterator = iterable.__iter__()
    while True:
        try:
            yield iterator.__next__()
        except StopIteration:
            iterator = iterable.__iter__()


def learning_rate_with_decay(batch_size, batch_denom, batches_per_epoch, boundary_epochs, decay_rates):
    initial_learning_rate = args.lr * batch_size / batch_denom

    boundaries = [int(batches_per_epoch * epoch) for epoch in boundary_epochs]
    vals = [initial_learning_rate * decay for decay in decay_rates]

    def learning_rate_fn(itr):
        lt = [itr < b for b in boundaries] + [True]
        i = np.argmax(lt)
        return vals[i]

    return learning_rate_fn


def one_hot(x, K):
    return np.array(x[:, None] == np.arange(K)[None, :], dtype=int)


def accuracy(model, dataset_loader):
    total_correct = 0
    for x, y in dataset_loader:
        x = x.to(device)
        y = one_hot(np.array(y.numpy()), 10)

        target_class = np.argmax(y, axis=1)
        predicted_class = np.argmax(model(x).cpu().detach().numpy(), axis=1)
        total_correct += np.sum(predicted_class == target_class)
    return total_correct / len(dataset_loader.dataset)


def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)


def makedirs(dirname):
    if not os.path.exists(dirname):
        os.makedirs(dirname)


def get_logger(logpath, filepath, package_files=[], displaying=True, saving=True, debug=False):
    logger = logging.getLogger()
    if debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logger.setLevel(level)
    if saving:
        info_file_handler = logging.FileHandler(logpath, mode="a")
        info_file_handler.setLevel(level)
        logger.addHandler(info_file_handler)
    if displaying:
        console_handler = logging.StreamHandler()
        console_handler.setLevel(level)
        logger.addHandler(console_handler)
    logger.info(filepath)
    with open(filepath, "r") as f:
        logger.info(f.read())

    for f in package_files:
        logger.info(f)
        with open(f, "r") as package_f:
            logger.info(package_f.read())

    return logger


if __name__ == '__main__':

    makedirs(args.save)
    logger = get_logger(logpath=os.path.join(args.save, 'logs'), filepath=os.path.abspath(__file__))
    logger.info(args)

    device = torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')

    is_odenet = args.network == 'odenet'

    downsampling_layers = [
        nn.Conv2d(3, 4, 3, 1),
        norm(4),
        nn.ReLU(inplace=True),
        nn.Conv2d(4, 4, 4, 2, 1),
        norm(4),
        nn.ReLU(inplace=True),
        nn.Conv2d(4, 4, 4, 2, 1),
        norm(4),
        nn.ReLU(inplace=True),
        Flatten(),
    ]

    feature_layers = [ODEBlock(ODEfunc(196))] 
    fc_layers = [nn.Linear(196, 10)]
    # feature_layers = [ODEBlock(ODEfunc(900))] 
    # fc_layers = [nn.Linear(900, 10)]

    model = nn.Sequential(*downsampling_layers, *feature_layers, *fc_layers).to(device)

    logger.info(model)
    logger.info('Number of parameters: {}'.format(count_parameters(model)))

    criterion = nn.CrossEntropyLoss().to(device)

    train_loader, test_loader, train_eval_loader = get_cifar_loaders(
        args.data_aug, args.batch_size, args.test_batch_size
    )

    data_gen = inf_generator(train_loader)
    batches_per_epoch = len(train_loader)

    lr_fn = learning_rate_with_decay(
        args.batch_size, batch_denom=128, batches_per_epoch=batches_per_epoch, boundary_epochs=[60, 100, 140],
        decay_rates=[1, 0.1, 0.01, 0.001]
    )

    optimizer = torch.optim.SGD(model.parameters(), lr=args.lr, momentum=0.9)

    best_acc = 0
    batch_time_meter = RunningAverageMeter()
    f_nfe_meter = RunningAverageMeter()
    b_nfe_meter = RunningAverageMeter()
    end = time.time()

    for itr in range(args.nepochs * batches_per_epoch):

        for param_group in optimizer.param_groups:
            param_group['lr'] = lr_fn(itr)

        optimizer.zero_grad()
        x, y = data_gen.__next__()
        x = x.to(device)
        y = y.to(device)
        logits = model(x)
        loss = criterion(logits, y)

        if is_odenet:
            nfe_forward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        loss.backward()
        optimizer.step()

        if is_odenet:
            nfe_backward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        batch_time_meter.update(time.time() - end)
        if is_odenet:
            f_nfe_meter.update(nfe_forward)
            b_nfe_meter.update(nfe_backward)
        end = time.time()

        if itr % batches_per_epoch == 0:
            with torch.no_grad():
                train_acc = accuracy(model, train_eval_loader)
                val_acc = accuracy(model, test_loader)
                if val_acc > best_acc:
                    torch.save({'state_dict': model.state_dict(), 'args': args}, os.path.join(args.save, 'model.pth'))
                    best_acc = val_acc
                if best_acc > 0.85 and train_acc > 0.85:
                    break
                logger.info(
                    "Epoch {:04d} | Time {:.3f} ({:.3f}) | NFE-F {:.1f} | NFE-B {:.1f} | "
                    "Train Acc {:.4f} | Test Acc {:.4f}".format(
                        itr // batches_per_epoch, batch_time_meter.val, batch_time_meter.avg, f_nfe_meter.avg,
                        b_nfe_meter.avg, train_acc, val_acc
                    )
                )
    names = []
    params = []
    for name,param in model.named_parameters():
        names.append(name)
        params.append(param.detach().numpy())
    nn1 = dict({'Wb':params,'names':names})
    for name,param in model.named_buffers():
        names.append(name)
        params.append(param.detach().numpy())
    savemat("odecnn_cifar_tiny.mat",nn1)
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb  4 09:04:31 2021

@author: manzand
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 19 15:10:31 2021

@author: manzand
"""

import os
import argparse
import logging
import time
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms
from scipy.io import savemat

parser = argparse.ArgumentParser()
parser.add_argument('--network', type=str, choices=['resnet', 'odenet'], default='odenet')
parser.add_argument('--tol', type=float, default=1e-3)
parser.add_argument('--adjoint', type=eval, default=False, choices=[True, False])
parser.add_argument('--downsampling-method', type=str, default='conv', choices=['conv', 'res'])
parser.add_argument('--nepochs', type=int, default=200)
parser.add_argument('--data_aug', type=eval, default=False, choices=[True, False])
parser.add_argument('--lr', type=float, default=0.01)
parser.add_argument('--batch_size', type=int, default=128)
parser.add_argument('--test_batch_size', type=int, default=1000)

parser.add_argument('--save', type=str, default='../logs/cifartiny')
parser.add_argument('--debug', action='store_true')
parser.add_argument('--gpu', type=int, default=0)
args = parser.parse_args()

if args.adjoint:
    from torchdiffeq import odeint_adjoint as odeint
else:
    from torchdiffeq import odeint


def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


def norm(dim):
    return nn.BatchNorm2d(min(64, dim), dim)


class ConcatConv2d(nn.Module):

    def __init__(self, dim_in, dim_out, ksize=3, stride=1, padding=0, dilation=1, groups=1, bias=True, transpose=False):
        super(ConcatConv2d, self).__init__()
        module = nn.ConvTranspose2d if transpose else nn.Conv2d
        self._layer = module(
            dim_in + 1, dim_out, kernel_size=ksize, stride=stride, padding=padding, dilation=dilation, groups=groups,
            bias=bias
        )

    def forward(self, t, x):
        tt = torch.ones_like(x[:, :1, :, :]) * t
        ttx = torch.cat([tt, x], 1)
        return self._layer(ttx)


class ODEfunc(nn.Module):

    def __init__(self,dim):
        super(ODEfunc, self).__init__()
        self.fc1 = nn.Linear(dim,16)
        self.fc2 = nn.Linear(16, dim)
        self.nfe = 0

    def forward(self, t, x):
        self.nfe += 1
        # print('11111111111111111111')
        # print(x.size())
        out = self.fc1(x)
        # print('222222222222222222')
        # print(out.size())
        out = self.fc2(out)
        return out


class ODEBlock(nn.Module):

    def __init__(self, odefunc):
        super(ODEBlock, self).__init__()
        self.odefunc = odefunc
        self.integration_time = torch.tensor([0, 1]).float()

    def forward(self, x):
        self.integration_time = self.integration_time.type_as(x)
        out = odeint(self.odefunc, x, self.integration_time, rtol=args.tol, atol=args.tol)
        return out[1]

    @property
    def nfe(self):
        return self.odefunc.nfe

    @nfe.setter
    def nfe(self, value):
        self.odefunc.nfe = value


class Flatten(nn.Module):

    def __init__(self):
        super(Flatten, self).__init__()

    def forward(self, x):
        shape = torch.prod(torch.tensor(x.shape[1:])).item()
        xout = x.view(-1, shape)
        # print(xout.size())
        return xout


class RunningAverageMeter(object):
    """Computes and stores the average and current value"""

    def __init__(self, momentum=0.99):
        self.momentum = momentum
        self.reset()

    def reset(self):
        self.val = None
        self.avg = 0

    def update(self, val):
        if self.val is None:
            self.avg = val
        else:
            self.avg = self.avg * self.momentum + val * (1 - self.momentum)
        self.val = val


def get_cifar_loaders(data_aug=False, batch_size=32, test_batch_size=1000, perc=1.0):
    if data_aug:
        transform_train = transforms.Compose([
            transforms.RandomCrop(28, padding=4),
            transforms.ToTensor(),
        ])
    else:
        transform_train = transforms.Compose([
            transforms.ToTensor(),
        ])

    transform_test = transforms.Compose([
        transforms.ToTensor(),
    ])

    train_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_train), batch_size=batch_size,
        shuffle=True, num_workers=2, drop_last=True
    )

    train_eval_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    test_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=False, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    return train_loader, test_loader, train_eval_loader


def inf_generator(iterable):
    """Allows training with DataLoaders in a single infinite loop:
        for i, (x, y) in enumerate(inf_generator(train_loader)):
    """
    iterator = iterable.__iter__()
    while True:
        try:
            yield iterator.__next__()
        except StopIteration:
            iterator = iterable.__iter__()


def learning_rate_with_decay(batch_size, batch_denom, batches_per_epoch, boundary_epochs, decay_rates):
    initial_learning_rate = args.lr * batch_size / batch_denom

    boundaries = [int(batches_per_epoch * epoch) for epoch in boundary_epochs]
    vals = [initial_learning_rate * decay for decay in decay_rates]

    def learning_rate_fn(itr):
        lt = [itr < b for b in boundaries] + [True]
        i = np.argmax(lt)
        return vals[i]

    return learning_rate_fn


def one_hot(x, K):
    return np.array(x[:, None] == np.arange(K)[None, :], dtype=int)


def accuracy(model, dataset_loader):
    total_correct = 0
    for x, y in dataset_loader:
        x = x.to(device)
        y = one_hot(np.array(y.numpy()), 10)

        target_class = np.argmax(y, axis=1)
        predicted_class = np.argmax(model(x).cpu().detach().numpy(), axis=1)
        total_correct += np.sum(predicted_class == target_class)
    return total_correct / len(dataset_loader.dataset)


def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)


def makedirs(dirname):
    if not os.path.exists(dirname):
        os.makedirs(dirname)


def get_logger(logpath, filepath, package_files=[], displaying=True, saving=True, debug=False):
    logger = logging.getLogger()
    if debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logger.setLevel(level)
    if saving:
        info_file_handler = logging.FileHandler(logpath, mode="a")
        info_file_handler.setLevel(level)
        logger.addHandler(info_file_handler)
    if displaying:
        console_handler = logging.StreamHandler()
        console_handler.setLevel(level)
        logger.addHandler(console_handler)
    logger.info(filepath)
    with open(filepath, "r") as f:
        logger.info(f.read())

    for f in package_files:
        logger.info(f)
        with open(f, "r") as package_f:
            logger.info(package_f.read())

    return logger


if __name__ == '__main__':

    makedirs(args.save)
    logger = get_logger(logpath=os.path.join(args.save, 'logs'), filepath=os.path.abspath(__file__))
    logger.info(args)

    device = torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')

    is_odenet = args.network == 'odenet'

    downsampling_layers = [
        nn.Conv2d(3, 4, 3, 1),
        norm(4),
        nn.ReLU(inplace=True),
        nn.Conv2d(4, 4, 4, 2, 1),
        norm(4),
        nn.ReLU(inplace=True),
        nn.Conv2d(4, 4, 4, 2, 1),
        norm(4),
        nn.ReLU(inplace=True),
        Flatten(),
    ]

    feature_layers = [ODEBlock(ODEfunc(196))] 
    fc_layers = [nn.Linear(196, 10)]
    # feature_layers = [ODEBlock(ODEfunc(900))] 
    # fc_layers = [nn.Linear(900, 10)]

    model = nn.Sequential(*downsampling_layers, *feature_layers, *fc_layers).to(device)

    logger.info(model)
    logger.info('Number of parameters: {}'.format(count_parameters(model)))

    criterion = nn.CrossEntropyLoss().to(device)

    train_loader, test_loader, train_eval_loader = get_cifar_loaders(
        args.data_aug, args.batch_size, args.test_batch_size
    )

    data_gen = inf_generator(train_loader)
    batches_per_epoch = len(train_loader)

    lr_fn = learning_rate_with_decay(
        args.batch_size, batch_denom=128, batches_per_epoch=batches_per_epoch, boundary_epochs=[60, 100, 140],
        decay_rates=[1, 0.1, 0.01, 0.001]
    )

    optimizer = torch.optim.SGD(model.parameters(), lr=args.lr, momentum=0.9)

    best_acc = 0
    batch_time_meter = RunningAverageMeter()
    f_nfe_meter = RunningAverageMeter()
    b_nfe_meter = RunningAverageMeter()
    end = time.time()

    for itr in range(args.nepochs * batches_per_epoch):

        for param_group in optimizer.param_groups:
            param_group['lr'] = lr_fn(itr)

        optimizer.zero_grad()
        x, y = data_gen.__next__()
        x = x.to(device)
        y = y.to(device)
        logits = model(x)
        loss = criterion(logits, y)

        if is_odenet:
            nfe_forward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        loss.backward()
        optimizer.step()

        if is_odenet:
            nfe_backward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        batch_time_meter.update(time.time() - end)
        if is_odenet:
            f_nfe_meter.update(nfe_forward)
            b_nfe_meter.update(nfe_backward)
        end = time.time()

        if itr % batches_per_epoch == 0:
            with torch.no_grad():
                train_acc = accuracy(model, train_eval_loader)
                val_acc = accuracy(model, test_loader)
                if val_acc > best_acc:
                    torch.save({'state_dict': model.state_dict(), 'args': args}, os.path.join(args.save, 'model.pth'))
                    best_acc = val_acc
                if best_acc > 0.85 and train_acc > 0.85:
                    break
                logger.info(
                    "Epoch {:04d} | Time {:.3f} ({:.3f}) | NFE-F {:.1f} | NFE-B {:.1f} | "
                    "Train Acc {:.4f} | Test Acc {:.4f}".format(
                        itr // batches_per_epoch, batch_time_meter.val, batch_time_meter.avg, f_nfe_meter.avg,
                        b_nfe_meter.avg, train_acc, val_acc
                    )
                )
    names = []
    params = []
    for name,param in model.named_parameters():
        names.append(name)
        params.append(param.detach().numpy())
    nn1 = dict({'Wb':params,'names':names})
    for name,param in model.named_buffers():
        names.append(name)
        params.append(param.detach().numpy())
    savemat("odecnn_cifar_tiny.mat",nn1)
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb  4 09:04:31 2021

@author: manzand
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 19 15:10:31 2021

@author: manzand
"""

import os
import argparse
import logging
import time
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms
from scipy.io import savemat

parser = argparse.ArgumentParser()
parser.add_argument('--network', type=str, choices=['resnet', 'odenet'], default='odenet')
parser.add_argument('--tol', type=float, default=1e-3)
parser.add_argument('--adjoint', type=eval, default=False, choices=[True, False])
parser.add_argument('--downsampling-method', type=str, default='conv', choices=['conv', 'res'])
parser.add_argument('--nepochs', type=int, default=200)
parser.add_argument('--data_aug', type=eval, default=False, choices=[True, False])
parser.add_argument('--lr', type=float, default=0.01)
parser.add_argument('--batch_size', type=int, default=128)
parser.add_argument('--test_batch_size', type=int, default=1000)

parser.add_argument('--save', type=str, default='../logs/cifartiny')
parser.add_argument('--debug', action='store_true')
parser.add_argument('--gpu', type=int, default=0)
args = parser.parse_args()

if args.adjoint:
    from torchdiffeq import odeint_adjoint as odeint
else:
    from torchdiffeq import odeint


def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


def norm(dim):
    return nn.BatchNorm2d(min(64, dim), dim)


class ConcatConv2d(nn.Module):

    def __init__(self, dim_in, dim_out, ksize=3, stride=1, padding=0, dilation=1, groups=1, bias=True, transpose=False):
        super(ConcatConv2d, self).__init__()
        module = nn.ConvTranspose2d if transpose else nn.Conv2d
        self._layer = module(
            dim_in + 1, dim_out, kernel_size=ksize, stride=stride, padding=padding, dilation=dilation, groups=groups,
            bias=bias
        )

    def forward(self, t, x):
        tt = torch.ones_like(x[:, :1, :, :]) * t
        ttx = torch.cat([tt, x], 1)
        return self._layer(ttx)


class ODEfunc(nn.Module):

    def __init__(self,dim):
        super(ODEfunc, self).__init__()
        self.fc1 = nn.Linear(dim,16)
        self.fc2 = nn.Linear(16, dim)
        self.nfe = 0

    def forward(self, t, x):
        self.nfe += 1
        # print('11111111111111111111')
        # print(x.size())
        out = self.fc1(x)
        # print('222222222222222222')
        # print(out.size())
        out = self.fc2(out)
        return out


class ODEBlock(nn.Module):

    def __init__(self, odefunc):
        super(ODEBlock, self).__init__()
        self.odefunc = odefunc
        self.integration_time = torch.tensor([0, 1]).float()

    def forward(self, x):
        self.integration_time = self.integration_time.type_as(x)
        out = odeint(self.odefunc, x, self.integration_time, rtol=args.tol, atol=args.tol)
        return out[1]

    @property
    def nfe(self):
        return self.odefunc.nfe

    @nfe.setter
    def nfe(self, value):
        self.odefunc.nfe = value


class Flatten(nn.Module):

    def __init__(self):
        super(Flatten, self).__init__()

    def forward(self, x):
        shape = torch.prod(torch.tensor(x.shape[1:])).item()
        xout = x.view(-1, shape)
        # print(xout.size())
        return xout


class RunningAverageMeter(object):
    """Computes and stores the average and current value"""

    def __init__(self, momentum=0.99):
        self.momentum = momentum
        self.reset()

    def reset(self):
        self.val = None
        self.avg = 0

    def update(self, val):
        if self.val is None:
            self.avg = val
        else:
            self.avg = self.avg * self.momentum + val * (1 - self.momentum)
        self.val = val


def get_cifar_loaders(data_aug=False, batch_size=32, test_batch_size=1000, perc=1.0):
    if data_aug:
        transform_train = transforms.Compose([
            transforms.RandomCrop(28, padding=4),
            transforms.ToTensor(),
        ])
    else:
        transform_train = transforms.Compose([
            transforms.ToTensor(),
        ])

    transform_test = transforms.Compose([
        transforms.ToTensor(),
    ])

    train_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_train), batch_size=batch_size,
        shuffle=True, num_workers=2, drop_last=True
    )

    train_eval_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    test_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=False, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    return train_loader, test_loader, train_eval_loader


def inf_generator(iterable):
    """Allows training with DataLoaders in a single infinite loop:
        for i, (x, y) in enumerate(inf_generator(train_loader)):
    """
    iterator = iterable.__iter__()
    while True:
        try:
            yield iterator.__next__()
        except StopIteration:
            iterator = iterable.__iter__()


def learning_rate_with_decay(batch_size, batch_denom, batches_per_epoch, boundary_epochs, decay_rates):
    initial_learning_rate = args.lr * batch_size / batch_denom

    boundaries = [int(batches_per_epoch * epoch) for epoch in boundary_epochs]
    vals = [initial_learning_rate * decay for decay in decay_rates]

    def learning_rate_fn(itr):
        lt = [itr < b for b in boundaries] + [True]
        i = np.argmax(lt)
        return vals[i]

    return learning_rate_fn


def one_hot(x, K):
    return np.array(x[:, None] == np.arange(K)[None, :], dtype=int)


def accuracy(model, dataset_loader):
    total_correct = 0
    for x, y in dataset_loader:
        x = x.to(device)
        y = one_hot(np.array(y.numpy()), 10)

        target_class = np.argmax(y, axis=1)
        predicted_class = np.argmax(model(x).cpu().detach().numpy(), axis=1)
        total_correct += np.sum(predicted_class == target_class)
    return total_correct / len(dataset_loader.dataset)


def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)


def makedirs(dirname):
    if not os.path.exists(dirname):
        os.makedirs(dirname)


def get_logger(logpath, filepath, package_files=[], displaying=True, saving=True, debug=False):
    logger = logging.getLogger()
    if debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logger.setLevel(level)
    if saving:
        info_file_handler = logging.FileHandler(logpath, mode="a")
        info_file_handler.setLevel(level)
        logger.addHandler(info_file_handler)
    if displaying:
        console_handler = logging.StreamHandler()
        console_handler.setLevel(level)
        logger.addHandler(console_handler)
    logger.info(filepath)
    with open(filepath, "r") as f:
        logger.info(f.read())

    for f in package_files:
        logger.info(f)
        with open(f, "r") as package_f:
            logger.info(package_f.read())

    return logger


if __name__ == '__main__':

    makedirs(args.save)
    logger = get_logger(logpath=os.path.join(args.save, 'logs'), filepath=os.path.abspath(__file__))
    logger.info(args)

    device = torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')

    is_odenet = args.network == 'odenet'

    downsampling_layers = [
        nn.Conv2d(3, 4, 3, 1),
        norm(4),
        nn.ReLU(inplace=True),
        nn.Conv2d(4, 4, 4, 2, 1),
        norm(4),
        nn.ReLU(inplace=True),
        nn.Conv2d(4, 4, 4, 2, 1),
        norm(4),
        nn.ReLU(inplace=True),
        Flatten(),
    ]

    feature_layers = [ODEBlock(ODEfunc(196))] 
    fc_layers = [nn.Linear(196, 10)]
    # feature_layers = [ODEBlock(ODEfunc(900))] 
    # fc_layers = [nn.Linear(900, 10)]

    model = nn.Sequential(*downsampling_layers, *feature_layers, *fc_layers).to(device)

    logger.info(model)
    logger.info('Number of parameters: {}'.format(count_parameters(model)))

    criterion = nn.CrossEntropyLoss().to(device)

    train_loader, test_loader, train_eval_loader = get_cifar_loaders(
        args.data_aug, args.batch_size, args.test_batch_size
    )

    data_gen = inf_generator(train_loader)
    batches_per_epoch = len(train_loader)

    lr_fn = learning_rate_with_decay(
        args.batch_size, batch_denom=128, batches_per_epoch=batches_per_epoch, boundary_epochs=[60, 100, 140],
        decay_rates=[1, 0.1, 0.01, 0.001]
    )

    optimizer = torch.optim.SGD(model.parameters(), lr=args.lr, momentum=0.9)

    best_acc = 0
    batch_time_meter = RunningAverageMeter()
    f_nfe_meter = RunningAverageMeter()
    b_nfe_meter = RunningAverageMeter()
    end = time.time()

    for itr in range(args.nepochs * batches_per_epoch):

        for param_group in optimizer.param_groups:
            param_group['lr'] = lr_fn(itr)

        optimizer.zero_grad()
        x, y = data_gen.__next__()
        x = x.to(device)
        y = y.to(device)
        logits = model(x)
        loss = criterion(logits, y)

        if is_odenet:
            nfe_forward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        loss.backward()
        optimizer.step()

        if is_odenet:
            nfe_backward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        batch_time_meter.update(time.time() - end)
        if is_odenet:
            f_nfe_meter.update(nfe_forward)
            b_nfe_meter.update(nfe_backward)
        end = time.time()

        if itr % batches_per_epoch == 0:
            with torch.no_grad():
                train_acc = accuracy(model, train_eval_loader)
                val_acc = accuracy(model, test_loader)
                if val_acc > best_acc:
                    torch.save({'state_dict': model.state_dict(), 'args': args}, os.path.join(args.save, 'model.pth'))
                    best_acc = val_acc
                if best_acc > 0.85 and train_acc > 0.85:
                    break
                logger.info(
                    "Epoch {:04d} | Time {:.3f} ({:.3f}) | NFE-F {:.1f} | NFE-B {:.1f} | "
                    "Train Acc {:.4f} | Test Acc {:.4f}".format(
                        itr // batches_per_epoch, batch_time_meter.val, batch_time_meter.avg, f_nfe_meter.avg,
                        b_nfe_meter.avg, train_acc, val_acc
                    )
                )
    names = []
    params = []
    for name,param in model.named_parameters():
        names.append(name)
        params.append(param.detach().numpy())
    nn1 = dict({'Wb':params,'names':names})
    for name,param in model.named_buffers():
        names.append(name)
        params.append(param.detach().numpy())
    savemat("odecnn_cifar_tiny.mat",nn1)
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb  4 09:04:31 2021

@author: manzand
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 19 15:10:31 2021

@author: manzand
"""

import os
import argparse
import logging
import time
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms
from scipy.io import savemat

parser = argparse.ArgumentParser()
parser.add_argument('--network', type=str, choices=['resnet', 'odenet'], default='odenet')
parser.add_argument('--tol', type=float, default=1e-3)
parser.add_argument('--adjoint', type=eval, default=False, choices=[True, False])
parser.add_argument('--downsampling-method', type=str, default='conv', choices=['conv', 'res'])
parser.add_argument('--nepochs', type=int, default=200)
parser.add_argument('--data_aug', type=eval, default=False, choices=[True, False])
parser.add_argument('--lr', type=float, default=0.01)
parser.add_argument('--batch_size', type=int, default=128)
parser.add_argument('--test_batch_size', type=int, default=1000)

parser.add_argument('--save', type=str, default='../logs/cifartiny')
parser.add_argument('--debug', action='store_true')
parser.add_argument('--gpu', type=int, default=0)
args = parser.parse_args()

if args.adjoint:
    from torchdiffeq import odeint_adjoint as odeint
else:
    from torchdiffeq import odeint


def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


def norm(dim):
    return nn.BatchNorm2d(min(64, dim), dim)


class ConcatConv2d(nn.Module):

    def __init__(self, dim_in, dim_out, ksize=3, stride=1, padding=0, dilation=1, groups=1, bias=True, transpose=False):
        super(ConcatConv2d, self).__init__()
        module = nn.ConvTranspose2d if transpose else nn.Conv2d
        self._layer = module(
            dim_in + 1, dim_out, kernel_size=ksize, stride=stride, padding=padding, dilation=dilation, groups=groups,
            bias=bias
        )

    def forward(self, t, x):
        tt = torch.ones_like(x[:, :1, :, :]) * t
        ttx = torch.cat([tt, x], 1)
        return self._layer(ttx)


class ODEfunc(nn.Module):

    def __init__(self,dim):
        super(ODEfunc, self).__init__()
        self.fc1 = nn.Linear(dim,16)
        self.fc2 = nn.Linear(16, dim)
        self.nfe = 0

    def forward(self, t, x):
        self.nfe += 1
        # print('11111111111111111111')
        # print(x.size())
        out = self.fc1(x)
        # print('222222222222222222')
        # print(out.size())
        out = self.fc2(out)
        return out


class ODEBlock(nn.Module):

    def __init__(self, odefunc):
        super(ODEBlock, self).__init__()
        self.odefunc = odefunc
        self.integration_time = torch.tensor([0, 1]).float()

    def forward(self, x):
        self.integration_time = self.integration_time.type_as(x)
        out = odeint(self.odefunc, x, self.integration_time, rtol=args.tol, atol=args.tol)
        return out[1]

    @property
    def nfe(self):
        return self.odefunc.nfe

    @nfe.setter
    def nfe(self, value):
        self.odefunc.nfe = value


class Flatten(nn.Module):

    def __init__(self):
        super(Flatten, self).__init__()

    def forward(self, x):
        shape = torch.prod(torch.tensor(x.shape[1:])).item()
        xout = x.view(-1, shape)
        # print(xout.size())
        return xout


class RunningAverageMeter(object):
    """Computes and stores the average and current value"""

    def __init__(self, momentum=0.99):
        self.momentum = momentum
        self.reset()

    def reset(self):
        self.val = None
        self.avg = 0

    def update(self, val):
        if self.val is None:
            self.avg = val
        else:
            self.avg = self.avg * self.momentum + val * (1 - self.momentum)
        self.val = val


def get_cifar_loaders(data_aug=False, batch_size=32, test_batch_size=1000, perc=1.0):
    if data_aug:
        transform_train = transforms.Compose([
            transforms.RandomCrop(28, padding=4),
            transforms.ToTensor(),
        ])
    else:
        transform_train = transforms.Compose([
            transforms.ToTensor(),
        ])

    transform_test = transforms.Compose([
        transforms.ToTensor(),
    ])

    train_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_train), batch_size=batch_size,
        shuffle=True, num_workers=2, drop_last=True
    )

    train_eval_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    test_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=False, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    return train_loader, test_loader, train_eval_loader


def inf_generator(iterable):
    """Allows training with DataLoaders in a single infinite loop:
        for i, (x, y) in enumerate(inf_generator(train_loader)):
    """
    iterator = iterable.__iter__()
    while True:
        try:
            yield iterator.__next__()
        except StopIteration:
            iterator = iterable.__iter__()


def learning_rate_with_decay(batch_size, batch_denom, batches_per_epoch, boundary_epochs, decay_rates):
    initial_learning_rate = args.lr * batch_size / batch_denom

    boundaries = [int(batches_per_epoch * epoch) for epoch in boundary_epochs]
    vals = [initial_learning_rate * decay for decay in decay_rates]

    def learning_rate_fn(itr):
        lt = [itr < b for b in boundaries] + [True]
        i = np.argmax(lt)
        return vals[i]

    return learning_rate_fn


def one_hot(x, K):
    return np.array(x[:, None] == np.arange(K)[None, :], dtype=int)


def accuracy(model, dataset_loader):
    total_correct = 0
    for x, y in dataset_loader:
        x = x.to(device)
        y = one_hot(np.array(y.numpy()), 10)

        target_class = np.argmax(y, axis=1)
        predicted_class = np.argmax(model(x).cpu().detach().numpy(), axis=1)
        total_correct += np.sum(predicted_class == target_class)
    return total_correct / len(dataset_loader.dataset)


def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)


def makedirs(dirname):
    if not os.path.exists(dirname):
        os.makedirs(dirname)


def get_logger(logpath, filepath, package_files=[], displaying=True, saving=True, debug=False):
    logger = logging.getLogger()
    if debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logger.setLevel(level)
    if saving:
        info_file_handler = logging.FileHandler(logpath, mode="a")
        info_file_handler.setLevel(level)
        logger.addHandler(info_file_handler)
    if displaying:
        console_handler = logging.StreamHandler()
        console_handler.setLevel(level)
        logger.addHandler(console_handler)
    logger.info(filepath)
    with open(filepath, "r") as f:
        logger.info(f.read())

    for f in package_files:
        logger.info(f)
        with open(f, "r") as package_f:
            logger.info(package_f.read())

    return logger


if __name__ == '__main__':

    makedirs(args.save)
    logger = get_logger(logpath=os.path.join(args.save, 'logs'), filepath=os.path.abspath(__file__))
    logger.info(args)

    device = torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')

    is_odenet = args.network == 'odenet'

    downsampling_layers = [
        nn.Conv2d(3, 4, 3, 1),
        norm(4),
        nn.ReLU(inplace=True),
        nn.Conv2d(4, 4, 4, 2, 1),
        norm(4),
        nn.ReLU(inplace=True),
        nn.Conv2d(4, 4, 4, 2, 1),
        norm(4),
        nn.ReLU(inplace=True),
        Flatten(),
    ]

    feature_layers = [ODEBlock(ODEfunc(196))] 
    fc_layers = [nn.Linear(196, 10)]
    # feature_layers = [ODEBlock(ODEfunc(900))] 
    # fc_layers = [nn.Linear(900, 10)]

    model = nn.Sequential(*downsampling_layers, *feature_layers, *fc_layers).to(device)

    logger.info(model)
    logger.info('Number of parameters: {}'.format(count_parameters(model)))

    criterion = nn.CrossEntropyLoss().to(device)

    train_loader, test_loader, train_eval_loader = get_cifar_loaders(
        args.data_aug, args.batch_size, args.test_batch_size
    )

    data_gen = inf_generator(train_loader)
    batches_per_epoch = len(train_loader)

    lr_fn = learning_rate_with_decay(
        args.batch_size, batch_denom=128, batches_per_epoch=batches_per_epoch, boundary_epochs=[60, 100, 140],
        decay_rates=[1, 0.1, 0.01, 0.001]
    )

    optimizer = torch.optim.SGD(model.parameters(), lr=args.lr, momentum=0.9)

    best_acc = 0
    batch_time_meter = RunningAverageMeter()
    f_nfe_meter = RunningAverageMeter()
    b_nfe_meter = RunningAverageMeter()
    end = time.time()

    for itr in range(args.nepochs * batches_per_epoch):

        for param_group in optimizer.param_groups:
            param_group['lr'] = lr_fn(itr)

        optimizer.zero_grad()
        x, y = data_gen.__next__()
        x = x.to(device)
        y = y.to(device)
        logits = model(x)
        loss = criterion(logits, y)

        if is_odenet:
            nfe_forward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        loss.backward()
        optimizer.step()

        if is_odenet:
            nfe_backward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        batch_time_meter.update(time.time() - end)
        if is_odenet:
            f_nfe_meter.update(nfe_forward)
            b_nfe_meter.update(nfe_backward)
        end = time.time()

        if itr % batches_per_epoch == 0:
            with torch.no_grad():
                train_acc = accuracy(model, train_eval_loader)
                val_acc = accuracy(model, test_loader)
                if val_acc > best_acc:
                    torch.save({'state_dict': model.state_dict(), 'args': args}, os.path.join(args.save, 'model.pth'))
                    best_acc = val_acc
                if best_acc > 0.85 and train_acc > 0.85:
                    break
                logger.info(
                    "Epoch {:04d} | Time {:.3f} ({:.3f}) | NFE-F {:.1f} | NFE-B {:.1f} | "
                    "Train Acc {:.4f} | Test Acc {:.4f}".format(
                        itr // batches_per_epoch, batch_time_meter.val, batch_time_meter.avg, f_nfe_meter.avg,
                        b_nfe_meter.avg, train_acc, val_acc
                    )
                )
    names = []
    params = []
    for name,param in model.named_parameters():
        names.append(name)
        params.append(param.detach().numpy())
    nn1 = dict({'Wb':params,'names':names})
    for name,param in model.named_buffers():
        names.append(name)
        params.append(param.detach().numpy())
    savemat("odecnn_cifar_tiny.mat",nn1)
Namespace(adjoint=False, batch_size=128, data_aug=False, debug=False, downsampling_method='conv', gpu=0, lr=0.01, nepochs=200, network='odenet', save='../logs/cifartiny', test_batch_size=1000, tol=0.001)
Namespace(adjoint=False, batch_size=128, data_aug=False, debug=False, downsampling_method='conv', gpu=0, lr=0.01, nepochs=200, network='odenet', save='../logs/cifartiny', test_batch_size=1000, tol=0.001)
Namespace(adjoint=False, batch_size=128, data_aug=False, debug=False, downsampling_method='conv', gpu=0, lr=0.01, nepochs=200, network='odenet', save='../logs/cifartiny', test_batch_size=1000, tol=0.001)
Namespace(adjoint=False, batch_size=128, data_aug=False, debug=False, downsampling_method='conv', gpu=0, lr=0.01, nepochs=200, network='odenet', save='../logs/cifartiny', test_batch_size=1000, tol=0.001)
Sequential(
  (0): Conv2d(3, 4, kernel_size=(3, 3), stride=(1, 1))
  (1): BatchNorm2d(4, eps=4, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(4, 4, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (4): BatchNorm2d(4, eps=4, momentum=0.1, affine=True, track_running_stats=True)
  (5): ReLU(inplace=True)
  (6): Conv2d(4, 4, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (7): BatchNorm2d(4, eps=4, momentum=0.1, affine=True, track_running_stats=True)
  (8): ReLU(inplace=True)
  (9): Flatten()
  (10): ODEBlock(
    (odefunc): ODEfunc(
      (fc1): Linear(in_features=196, out_features=16, bias=True)
      (fc2): Linear(in_features=16, out_features=196, bias=True)
    )
  )
  (11): Linear(in_features=196, out_features=10, bias=True)
)
Sequential(
  (0): Conv2d(3, 4, kernel_size=(3, 3), stride=(1, 1))
  (1): BatchNorm2d(4, eps=4, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(4, 4, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (4): BatchNorm2d(4, eps=4, momentum=0.1, affine=True, track_running_stats=True)
  (5): ReLU(inplace=True)
  (6): Conv2d(4, 4, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (7): BatchNorm2d(4, eps=4, momentum=0.1, affine=True, track_running_stats=True)
  (8): ReLU(inplace=True)
  (9): Flatten()
  (10): ODEBlock(
    (odefunc): ODEfunc(
      (fc1): Linear(in_features=196, out_features=16, bias=True)
      (fc2): Linear(in_features=16, out_features=196, bias=True)
    )
  )
  (11): Linear(in_features=196, out_features=10, bias=True)
)
Sequential(
  (0): Conv2d(3, 4, kernel_size=(3, 3), stride=(1, 1))
  (1): BatchNorm2d(4, eps=4, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(4, 4, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (4): BatchNorm2d(4, eps=4, momentum=0.1, affine=True, track_running_stats=True)
  (5): ReLU(inplace=True)
  (6): Conv2d(4, 4, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (7): BatchNorm2d(4, eps=4, momentum=0.1, affine=True, track_running_stats=True)
  (8): ReLU(inplace=True)
  (9): Flatten()
  (10): ODEBlock(
    (odefunc): ODEfunc(
      (fc1): Linear(in_features=196, out_features=16, bias=True)
      (fc2): Linear(in_features=16, out_features=196, bias=True)
    )
  )
  (11): Linear(in_features=196, out_features=10, bias=True)
)
Sequential(
  (0): Conv2d(3, 4, kernel_size=(3, 3), stride=(1, 1))
  (1): BatchNorm2d(4, eps=4, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(4, 4, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (4): BatchNorm2d(4, eps=4, momentum=0.1, affine=True, track_running_stats=True)
  (5): ReLU(inplace=True)
  (6): Conv2d(4, 4, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (7): BatchNorm2d(4, eps=4, momentum=0.1, affine=True, track_running_stats=True)
  (8): ReLU(inplace=True)
  (9): Flatten()
  (10): ODEBlock(
    (odefunc): ODEfunc(
      (fc1): Linear(in_features=196, out_features=16, bias=True)
      (fc2): Linear(in_features=16, out_features=196, bias=True)
    )
  )
  (11): Linear(in_features=196, out_features=10, bias=True)
)
Number of parameters: 9110
Number of parameters: 9110
Number of parameters: 9110
Number of parameters: 9110
Epoch 0000 | Time 0.149 (0.149) | NFE-F 26.0 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0000 | Time 0.149 (0.149) | NFE-F 26.0 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0000 | Time 0.149 (0.149) | NFE-F 26.0 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0000 | Time 0.149 (0.149) | NFE-F 26.0 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0001 | Time 0.134 (0.047) | NFE-F 17.5 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0001 | Time 0.134 (0.047) | NFE-F 17.5 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0001 | Time 0.134 (0.047) | NFE-F 17.5 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0001 | Time 0.134 (0.047) | NFE-F 17.5 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0002 | Time 0.124 (0.038) | NFE-F 14.5 | NFE-B 0.0 | Train Acc 0.2569 | Test Acc 0.2648
Epoch 0002 | Time 0.124 (0.038) | NFE-F 14.5 | NFE-B 0.0 | Train Acc 0.2569 | Test Acc 0.2648
Epoch 0002 | Time 0.124 (0.038) | NFE-F 14.5 | NFE-B 0.0 | Train Acc 0.2569 | Test Acc 0.2648
Epoch 0002 | Time 0.124 (0.038) | NFE-F 14.5 | NFE-B 0.0 | Train Acc 0.2569 | Test Acc 0.2648
Epoch 0003 | Time 0.128 (0.037) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.2818 | Test Acc 0.2831
Epoch 0003 | Time 0.128 (0.037) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.2818 | Test Acc 0.2831
Epoch 0003 | Time 0.128 (0.037) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.2818 | Test Acc 0.2831
Epoch 0003 | Time 0.128 (0.037) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.2818 | Test Acc 0.2831
Epoch 0004 | Time 0.128 (0.038) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.3614 | Test Acc 0.3602
Epoch 0004 | Time 0.128 (0.038) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.3614 | Test Acc 0.3602
Epoch 0004 | Time 0.128 (0.038) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.3614 | Test Acc 0.3602
Epoch 0004 | Time 0.128 (0.038) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.3614 | Test Acc 0.3602
Epoch 0005 | Time 0.142 (0.038) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.3644 | Test Acc 0.3718
Epoch 0005 | Time 0.142 (0.038) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.3644 | Test Acc 0.3718
Epoch 0005 | Time 0.142 (0.038) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.3644 | Test Acc 0.3718
Epoch 0005 | Time 0.142 (0.038) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.3644 | Test Acc 0.3718
Epoch 0006 | Time 0.319 (0.114) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.4209 | Test Acc 0.4196
Epoch 0006 | Time 0.319 (0.114) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.4209 | Test Acc 0.4196
Epoch 0006 | Time 0.319 (0.114) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.4209 | Test Acc 0.4196
Epoch 0006 | Time 0.319 (0.114) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.4209 | Test Acc 0.4196
Epoch 0007 | Time 0.240 (0.094) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.4549 | Test Acc 0.4476
Epoch 0007 | Time 0.240 (0.094) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.4549 | Test Acc 0.4476
Epoch 0007 | Time 0.240 (0.094) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.4549 | Test Acc 0.4476
Epoch 0007 | Time 0.240 (0.094) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.4549 | Test Acc 0.4476
Epoch 0008 | Time 0.244 (0.077) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.4686 | Test Acc 0.4620
Epoch 0008 | Time 0.244 (0.077) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.4686 | Test Acc 0.4620
Epoch 0008 | Time 0.244 (0.077) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.4686 | Test Acc 0.4620
Epoch 0008 | Time 0.244 (0.077) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.4686 | Test Acc 0.4620
Epoch 0009 | Time 0.237 (0.083) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.4597 | Test Acc 0.4507
Epoch 0009 | Time 0.237 (0.083) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.4597 | Test Acc 0.4507
Epoch 0009 | Time 0.237 (0.083) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.4597 | Test Acc 0.4507
Epoch 0009 | Time 0.237 (0.083) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.4597 | Test Acc 0.4507
Epoch 0010 | Time 0.214 (0.075) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.4892 | Test Acc 0.4831
Epoch 0010 | Time 0.214 (0.075) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.4892 | Test Acc 0.4831
Epoch 0010 | Time 0.214 (0.075) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.4892 | Test Acc 0.4831
Epoch 0010 | Time 0.214 (0.075) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.4892 | Test Acc 0.4831
Epoch 0011 | Time 0.223 (0.059) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.4922 | Test Acc 0.4786
Epoch 0011 | Time 0.223 (0.059) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.4922 | Test Acc 0.4786
Epoch 0011 | Time 0.223 (0.059) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.4922 | Test Acc 0.4786
Epoch 0011 | Time 0.223 (0.059) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.4922 | Test Acc 0.4786
Epoch 0012 | Time 0.255 (0.070) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5009 | Test Acc 0.4917
Epoch 0012 | Time 0.255 (0.070) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5009 | Test Acc 0.4917
Epoch 0012 | Time 0.255 (0.070) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5009 | Test Acc 0.4917
Epoch 0012 | Time 0.255 (0.070) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5009 | Test Acc 0.4917
Epoch 0013 | Time 0.247 (0.077) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.4981 | Test Acc 0.4856
Epoch 0013 | Time 0.247 (0.077) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.4981 | Test Acc 0.4856
Epoch 0013 | Time 0.247 (0.077) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.4981 | Test Acc 0.4856
Epoch 0013 | Time 0.247 (0.077) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.4981 | Test Acc 0.4856
Epoch 0014 | Time 0.243 (0.064) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5016 | Test Acc 0.4921
Epoch 0014 | Time 0.243 (0.064) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5016 | Test Acc 0.4921
Epoch 0014 | Time 0.243 (0.064) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5016 | Test Acc 0.4921
Epoch 0014 | Time 0.243 (0.064) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5016 | Test Acc 0.4921
Epoch 0015 | Time 0.218 (0.070) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5122 | Test Acc 0.5019
Epoch 0015 | Time 0.218 (0.070) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5122 | Test Acc 0.5019
Epoch 0015 | Time 0.218 (0.070) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5122 | Test Acc 0.5019
Epoch 0015 | Time 0.218 (0.070) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5122 | Test Acc 0.5019
Epoch 0016 | Time 0.219 (0.083) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5139 | Test Acc 0.5018
Epoch 0016 | Time 0.219 (0.083) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5139 | Test Acc 0.5018
Epoch 0016 | Time 0.219 (0.083) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5139 | Test Acc 0.5018
Epoch 0016 | Time 0.219 (0.083) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5139 | Test Acc 0.5018
Epoch 0017 | Time 0.226 (0.075) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5181 | Test Acc 0.5082
Epoch 0017 | Time 0.226 (0.075) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5181 | Test Acc 0.5082
Epoch 0017 | Time 0.226 (0.075) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5181 | Test Acc 0.5082
Epoch 0017 | Time 0.226 (0.075) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5181 | Test Acc 0.5082
Epoch 0018 | Time 0.259 (0.066) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5212 | Test Acc 0.5094
Epoch 0018 | Time 0.259 (0.066) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5212 | Test Acc 0.5094
Epoch 0018 | Time 0.259 (0.066) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5212 | Test Acc 0.5094
Epoch 0018 | Time 0.259 (0.066) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5212 | Test Acc 0.5094
Epoch 0019 | Time 0.315 (0.073) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5243 | Test Acc 0.5088
Epoch 0019 | Time 0.315 (0.073) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5243 | Test Acc 0.5088
Epoch 0019 | Time 0.315 (0.073) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5243 | Test Acc 0.5088
Epoch 0019 | Time 0.315 (0.073) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5243 | Test Acc 0.5088
Epoch 0020 | Time 0.183 (0.082) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5153 | Test Acc 0.5052
Epoch 0020 | Time 0.183 (0.082) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5153 | Test Acc 0.5052
Epoch 0020 | Time 0.183 (0.082) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5153 | Test Acc 0.5052
Epoch 0020 | Time 0.183 (0.082) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5153 | Test Acc 0.5052
Epoch 0021 | Time 0.253 (0.058) | NFE-F 14.3 | NFE-B 0.0 | Train Acc 0.5179 | Test Acc 0.5046
Epoch 0021 | Time 0.253 (0.058) | NFE-F 14.3 | NFE-B 0.0 | Train Acc 0.5179 | Test Acc 0.5046
Epoch 0021 | Time 0.253 (0.058) | NFE-F 14.3 | NFE-B 0.0 | Train Acc 0.5179 | Test Acc 0.5046
Epoch 0021 | Time 0.253 (0.058) | NFE-F 14.3 | NFE-B 0.0 | Train Acc 0.5179 | Test Acc 0.5046
Epoch 0022 | Time 0.265 (0.081) | NFE-F 19.2 | NFE-B 0.0 | Train Acc 0.5252 | Test Acc 0.5089
Epoch 0022 | Time 0.265 (0.081) | NFE-F 19.2 | NFE-B 0.0 | Train Acc 0.5252 | Test Acc 0.5089
Epoch 0022 | Time 0.265 (0.081) | NFE-F 19.2 | NFE-B 0.0 | Train Acc 0.5252 | Test Acc 0.5089
Epoch 0022 | Time 0.265 (0.081) | NFE-F 19.2 | NFE-B 0.0 | Train Acc 0.5252 | Test Acc 0.5089
Epoch 0023 | Time 0.279 (0.082) | NFE-F 20.1 | NFE-B 0.0 | Train Acc 0.5345 | Test Acc 0.5198
Epoch 0023 | Time 0.279 (0.082) | NFE-F 20.1 | NFE-B 0.0 | Train Acc 0.5345 | Test Acc 0.5198
Epoch 0023 | Time 0.279 (0.082) | NFE-F 20.1 | NFE-B 0.0 | Train Acc 0.5345 | Test Acc 0.5198
Epoch 0023 | Time 0.279 (0.082) | NFE-F 20.1 | NFE-B 0.0 | Train Acc 0.5345 | Test Acc 0.5198
Epoch 0024 | Time 0.305 (0.106) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5351 | Test Acc 0.5161
Epoch 0024 | Time 0.305 (0.106) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5351 | Test Acc 0.5161
Epoch 0024 | Time 0.305 (0.106) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5351 | Test Acc 0.5161
Epoch 0024 | Time 0.305 (0.106) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5351 | Test Acc 0.5161
Epoch 0025 | Time 0.269 (0.120) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5340 | Test Acc 0.5201
Epoch 0025 | Time 0.269 (0.120) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5340 | Test Acc 0.5201
Epoch 0025 | Time 0.269 (0.120) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5340 | Test Acc 0.5201
Epoch 0025 | Time 0.269 (0.120) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5340 | Test Acc 0.5201
Epoch 0026 | Time 0.359 (0.133) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5361 | Test Acc 0.5217
Epoch 0026 | Time 0.359 (0.133) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5361 | Test Acc 0.5217
Epoch 0026 | Time 0.359 (0.133) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5361 | Test Acc 0.5217
Epoch 0026 | Time 0.359 (0.133) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5361 | Test Acc 0.5217
Epoch 0027 | Time 0.333 (0.106) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5411 | Test Acc 0.5265
Epoch 0027 | Time 0.333 (0.106) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5411 | Test Acc 0.5265
Epoch 0027 | Time 0.333 (0.106) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5411 | Test Acc 0.5265
Epoch 0027 | Time 0.333 (0.106) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5411 | Test Acc 0.5265
Epoch 0028 | Time 0.380 (0.129) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5397 | Test Acc 0.5242
Epoch 0028 | Time 0.380 (0.129) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5397 | Test Acc 0.5242
Epoch 0028 | Time 0.380 (0.129) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5397 | Test Acc 0.5242
Epoch 0028 | Time 0.380 (0.129) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5397 | Test Acc 0.5242
Epoch 0029 | Time 0.290 (0.081) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5382 | Test Acc 0.5250
Epoch 0029 | Time 0.290 (0.081) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5382 | Test Acc 0.5250
Epoch 0029 | Time 0.290 (0.081) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5382 | Test Acc 0.5250
Epoch 0029 | Time 0.290 (0.081) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5382 | Test Acc 0.5250
Epoch 0030 | Time 0.233 (0.100) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5383 | Test Acc 0.5218
Epoch 0030 | Time 0.233 (0.100) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5383 | Test Acc 0.5218
Epoch 0030 | Time 0.233 (0.100) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5383 | Test Acc 0.5218
Epoch 0030 | Time 0.233 (0.100) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5383 | Test Acc 0.5218
Epoch 0031 | Time 0.250 (0.065) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5435 | Test Acc 0.5259
Epoch 0031 | Time 0.250 (0.065) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5435 | Test Acc 0.5259
Epoch 0031 | Time 0.250 (0.065) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5435 | Test Acc 0.5259
Epoch 0031 | Time 0.250 (0.065) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5435 | Test Acc 0.5259
Epoch 0032 | Time 0.258 (0.082) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5404 | Test Acc 0.5296
Epoch 0032 | Time 0.258 (0.082) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5404 | Test Acc 0.5296
Epoch 0032 | Time 0.258 (0.082) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5404 | Test Acc 0.5296
Epoch 0032 | Time 0.258 (0.082) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5404 | Test Acc 0.5296
Epoch 0033 | Time 0.332 (0.077) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5490 | Test Acc 0.5330
Epoch 0033 | Time 0.332 (0.077) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5490 | Test Acc 0.5330
Epoch 0033 | Time 0.332 (0.077) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5490 | Test Acc 0.5330
Epoch 0033 | Time 0.332 (0.077) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5490 | Test Acc 0.5330
Epoch 0034 | Time 0.257 (0.078) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5560 | Test Acc 0.5419
Epoch 0034 | Time 0.257 (0.078) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5560 | Test Acc 0.5419
Epoch 0034 | Time 0.257 (0.078) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5560 | Test Acc 0.5419
Epoch 0034 | Time 0.257 (0.078) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5560 | Test Acc 0.5419
Epoch 0035 | Time 0.233 (0.081) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5559 | Test Acc 0.5356
Epoch 0035 | Time 0.233 (0.081) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5559 | Test Acc 0.5356
Epoch 0035 | Time 0.233 (0.081) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5559 | Test Acc 0.5356
Epoch 0035 | Time 0.233 (0.081) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5559 | Test Acc 0.5356
Epoch 0036 | Time 0.218 (0.073) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5554 | Test Acc 0.5385
Epoch 0036 | Time 0.218 (0.073) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5554 | Test Acc 0.5385
Epoch 0036 | Time 0.218 (0.073) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5554 | Test Acc 0.5385
Epoch 0036 | Time 0.218 (0.073) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5554 | Test Acc 0.5385
Epoch 0037 | Time 0.347 (0.118) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5588 | Test Acc 0.5445
Epoch 0037 | Time 0.347 (0.118) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5588 | Test Acc 0.5445
Epoch 0037 | Time 0.347 (0.118) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5588 | Test Acc 0.5445
Epoch 0037 | Time 0.347 (0.118) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5588 | Test Acc 0.5445
Epoch 0038 | Time 0.336 (0.121) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5610 | Test Acc 0.5461
Epoch 0038 | Time 0.336 (0.121) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5610 | Test Acc 0.5461
Epoch 0038 | Time 0.336 (0.121) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5610 | Test Acc 0.5461
Epoch 0038 | Time 0.336 (0.121) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5610 | Test Acc 0.5461
Epoch 0039 | Time 0.370 (0.118) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5624 | Test Acc 0.5436
Epoch 0039 | Time 0.370 (0.118) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5624 | Test Acc 0.5436
Epoch 0039 | Time 0.370 (0.118) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5624 | Test Acc 0.5436
Epoch 0039 | Time 0.370 (0.118) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5624 | Test Acc 0.5436
Epoch 0040 | Time 0.316 (0.126) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5609 | Test Acc 0.5456
Epoch 0040 | Time 0.316 (0.126) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5609 | Test Acc 0.5456
Epoch 0040 | Time 0.316 (0.126) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5609 | Test Acc 0.5456
Epoch 0040 | Time 0.316 (0.126) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5609 | Test Acc 0.5456
Epoch 0041 | Time 0.250 (0.083) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5696 | Test Acc 0.5541
Epoch 0041 | Time 0.250 (0.083) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5696 | Test Acc 0.5541
Epoch 0041 | Time 0.250 (0.083) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5696 | Test Acc 0.5541
Epoch 0041 | Time 0.250 (0.083) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5696 | Test Acc 0.5541
Epoch 0042 | Time 0.274 (0.087) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5791 | Test Acc 0.5601
Epoch 0042 | Time 0.274 (0.087) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5791 | Test Acc 0.5601
Epoch 0042 | Time 0.274 (0.087) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5791 | Test Acc 0.5601
Epoch 0042 | Time 0.274 (0.087) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5791 | Test Acc 0.5601
Epoch 0043 | Time 0.313 (0.101) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5615 | Test Acc 0.5451
Epoch 0043 | Time 0.313 (0.101) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5615 | Test Acc 0.5451
Epoch 0043 | Time 0.313 (0.101) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5615 | Test Acc 0.5451
Epoch 0043 | Time 0.313 (0.101) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5615 | Test Acc 0.5451
Epoch 0044 | Time 0.239 (0.100) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5788 | Test Acc 0.5638
Epoch 0044 | Time 0.239 (0.100) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5788 | Test Acc 0.5638
Epoch 0044 | Time 0.239 (0.100) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5788 | Test Acc 0.5638
Epoch 0044 | Time 0.239 (0.100) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5788 | Test Acc 0.5638
Epoch 0045 | Time 0.299 (0.091) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5761 | Test Acc 0.5645
Epoch 0045 | Time 0.299 (0.091) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5761 | Test Acc 0.5645
Epoch 0045 | Time 0.299 (0.091) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5761 | Test Acc 0.5645
Epoch 0045 | Time 0.299 (0.091) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5761 | Test Acc 0.5645
Epoch 0046 | Time 0.432 (0.117) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5829 | Test Acc 0.5692
Epoch 0046 | Time 0.432 (0.117) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5829 | Test Acc 0.5692
Epoch 0046 | Time 0.432 (0.117) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5829 | Test Acc 0.5692
Epoch 0046 | Time 0.432 (0.117) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5829 | Test Acc 0.5692
Epoch 0047 | Time 0.375 (0.129) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5842 | Test Acc 0.5650
Epoch 0047 | Time 0.375 (0.129) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5842 | Test Acc 0.5650
Epoch 0047 | Time 0.375 (0.129) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5842 | Test Acc 0.5650
Epoch 0047 | Time 0.375 (0.129) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5842 | Test Acc 0.5650
Epoch 0048 | Time 0.227 (0.089) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5777 | Test Acc 0.5631
Epoch 0048 | Time 0.227 (0.089) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5777 | Test Acc 0.5631
Epoch 0048 | Time 0.227 (0.089) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5777 | Test Acc 0.5631
Epoch 0048 | Time 0.227 (0.089) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5777 | Test Acc 0.5631
Epoch 0049 | Time 0.219 (0.081) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5884 | Test Acc 0.5700
Epoch 0049 | Time 0.219 (0.081) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5884 | Test Acc 0.5700
Epoch 0049 | Time 0.219 (0.081) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5884 | Test Acc 0.5700
Epoch 0049 | Time 0.219 (0.081) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5884 | Test Acc 0.5700
Epoch 0050 | Time 0.292 (0.085) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5828 | Test Acc 0.5673
Epoch 0050 | Time 0.292 (0.085) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5828 | Test Acc 0.5673
Epoch 0050 | Time 0.292 (0.085) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5828 | Test Acc 0.5673
Epoch 0050 | Time 0.292 (0.085) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5828 | Test Acc 0.5673
Epoch 0051 | Time 0.239 (0.069) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5907 | Test Acc 0.5720
Epoch 0051 | Time 0.239 (0.069) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5907 | Test Acc 0.5720
Epoch 0051 | Time 0.239 (0.069) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5907 | Test Acc 0.5720
Epoch 0051 | Time 0.239 (0.069) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5907 | Test Acc 0.5720
Epoch 0052 | Time 0.339 (0.080) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5818 | Test Acc 0.5609
Epoch 0052 | Time 0.339 (0.080) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5818 | Test Acc 0.5609
Epoch 0052 | Time 0.339 (0.080) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5818 | Test Acc 0.5609
Epoch 0052 | Time 0.339 (0.080) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5818 | Test Acc 0.5609
Epoch 0053 | Time 0.233 (0.092) | NFE-F 20.3 | NFE-B 0.0 | Train Acc 0.5783 | Test Acc 0.5590
Epoch 0053 | Time 0.233 (0.092) | NFE-F 20.3 | NFE-B 0.0 | Train Acc 0.5783 | Test Acc 0.5590
Epoch 0053 | Time 0.233 (0.092) | NFE-F 20.3 | NFE-B 0.0 | Train Acc 0.5783 | Test Acc 0.5590
Epoch 0053 | Time 0.233 (0.092) | NFE-F 20.3 | NFE-B 0.0 | Train Acc 0.5783 | Test Acc 0.5590
Epoch 0054 | Time 0.253 (0.074) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5906 | Test Acc 0.5682
Epoch 0054 | Time 0.253 (0.074) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5906 | Test Acc 0.5682
Epoch 0054 | Time 0.253 (0.074) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5906 | Test Acc 0.5682
Epoch 0054 | Time 0.253 (0.074) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5906 | Test Acc 0.5682
Epoch 0055 | Time 0.248 (0.095) | NFE-F 20.4 | NFE-B 0.0 | Train Acc 0.5940 | Test Acc 0.5726
Epoch 0055 | Time 0.248 (0.095) | NFE-F 20.4 | NFE-B 0.0 | Train Acc 0.5940 | Test Acc 0.5726
Epoch 0055 | Time 0.248 (0.095) | NFE-F 20.4 | NFE-B 0.0 | Train Acc 0.5940 | Test Acc 0.5726
Epoch 0055 | Time 0.248 (0.095) | NFE-F 20.4 | NFE-B 0.0 | Train Acc 0.5940 | Test Acc 0.5726
Epoch 0056 | Time 0.210 (0.064) | NFE-F 21.7 | NFE-B 0.0 | Train Acc 0.5878 | Test Acc 0.5690
Epoch 0056 | Time 0.210 (0.064) | NFE-F 21.7 | NFE-B 0.0 | Train Acc 0.5878 | Test Acc 0.5690
Epoch 0056 | Time 0.210 (0.064) | NFE-F 21.7 | NFE-B 0.0 | Train Acc 0.5878 | Test Acc 0.5690
Epoch 0056 | Time 0.210 (0.064) | NFE-F 21.7 | NFE-B 0.0 | Train Acc 0.5878 | Test Acc 0.5690
Epoch 0057 | Time 0.441 (0.103) | NFE-F 24.8 | NFE-B 0.0 | Train Acc 0.5895 | Test Acc 0.5755
Epoch 0057 | Time 0.441 (0.103) | NFE-F 24.8 | NFE-B 0.0 | Train Acc 0.5895 | Test Acc 0.5755
Epoch 0057 | Time 0.441 (0.103) | NFE-F 24.8 | NFE-B 0.0 | Train Acc 0.5895 | Test Acc 0.5755
Epoch 0057 | Time 0.441 (0.103) | NFE-F 24.8 | NFE-B 0.0 | Train Acc 0.5895 | Test Acc 0.5755
Epoch 0058 | Time 0.226 (0.090) | NFE-F 25.4 | NFE-B 0.0 | Train Acc 0.5919 | Test Acc 0.5728
Epoch 0058 | Time 0.226 (0.090) | NFE-F 25.4 | NFE-B 0.0 | Train Acc 0.5919 | Test Acc 0.5728
Epoch 0058 | Time 0.226 (0.090) | NFE-F 25.4 | NFE-B 0.0 | Train Acc 0.5919 | Test Acc 0.5728
Epoch 0058 | Time 0.226 (0.090) | NFE-F 25.4 | NFE-B 0.0 | Train Acc 0.5919 | Test Acc 0.5728
Epoch 0059 | Time 0.369 (0.112) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.5919 | Test Acc 0.5688
Epoch 0059 | Time 0.369 (0.112) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.5919 | Test Acc 0.5688
Epoch 0059 | Time 0.369 (0.112) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.5919 | Test Acc 0.5688
Epoch 0059 | Time 0.369 (0.112) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.5919 | Test Acc 0.5688
Epoch 0060 | Time 0.235 (0.100) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.5931 | Test Acc 0.5697
Epoch 0060 | Time 0.235 (0.100) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.5931 | Test Acc 0.5697
Epoch 0060 | Time 0.235 (0.100) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.5931 | Test Acc 0.5697
Epoch 0060 | Time 0.235 (0.100) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.5931 | Test Acc 0.5697
Epoch 0061 | Time 0.284 (0.098) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.5990 | Test Acc 0.5775
Epoch 0061 | Time 0.284 (0.098) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.5990 | Test Acc 0.5775
Epoch 0061 | Time 0.284 (0.098) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.5990 | Test Acc 0.5775
Epoch 0061 | Time 0.284 (0.098) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.5990 | Test Acc 0.5775
Epoch 0062 | Time 0.272 (0.078) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.5998 | Test Acc 0.5785
Epoch 0062 | Time 0.272 (0.078) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.5998 | Test Acc 0.5785
Epoch 0062 | Time 0.272 (0.078) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.5998 | Test Acc 0.5785
Epoch 0062 | Time 0.272 (0.078) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.5998 | Test Acc 0.5785
Epoch 0063 | Time 0.295 (0.100) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6001 | Test Acc 0.5763
Epoch 0063 | Time 0.295 (0.100) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6001 | Test Acc 0.5763
Epoch 0063 | Time 0.295 (0.100) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6001 | Test Acc 0.5763
Epoch 0063 | Time 0.295 (0.100) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6001 | Test Acc 0.5763
Epoch 0064 | Time 0.195 (0.068) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6005 | Test Acc 0.5799
Epoch 0064 | Time 0.195 (0.068) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6005 | Test Acc 0.5799
Epoch 0064 | Time 0.195 (0.068) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6005 | Test Acc 0.5799
Epoch 0064 | Time 0.195 (0.068) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6005 | Test Acc 0.5799
Epoch 0065 | Time 0.377 (0.103) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6010 | Test Acc 0.5802
Epoch 0065 | Time 0.377 (0.103) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6010 | Test Acc 0.5802
Epoch 0065 | Time 0.377 (0.103) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6010 | Test Acc 0.5802
Epoch 0065 | Time 0.377 (0.103) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6010 | Test Acc 0.5802
Epoch 0066 | Time 0.233 (0.092) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6010 | Test Acc 0.5797
Epoch 0066 | Time 0.233 (0.092) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6010 | Test Acc 0.5797
Epoch 0066 | Time 0.233 (0.092) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6010 | Test Acc 0.5797
Epoch 0066 | Time 0.233 (0.092) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6010 | Test Acc 0.5797
Epoch 0067 | Time 0.245 (0.091) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6006 | Test Acc 0.5784
Epoch 0067 | Time 0.245 (0.091) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6006 | Test Acc 0.5784
Epoch 0067 | Time 0.245 (0.091) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6006 | Test Acc 0.5784
Epoch 0067 | Time 0.245 (0.091) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6006 | Test Acc 0.5784
Epoch 0068 | Time 0.406 (0.097) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6003 | Test Acc 0.5822
Epoch 0068 | Time 0.406 (0.097) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6003 | Test Acc 0.5822
Epoch 0068 | Time 0.406 (0.097) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6003 | Test Acc 0.5822
Epoch 0068 | Time 0.406 (0.097) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6003 | Test Acc 0.5822
Epoch 0069 | Time 0.357 (0.097) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.5990 | Test Acc 0.5802
Epoch 0069 | Time 0.357 (0.097) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.5990 | Test Acc 0.5802
Epoch 0069 | Time 0.357 (0.097) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.5990 | Test Acc 0.5802
Epoch 0069 | Time 0.357 (0.097) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.5990 | Test Acc 0.5802
Epoch 0070 | Time 0.216 (0.093) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6029 | Test Acc 0.5794
Epoch 0070 | Time 0.216 (0.093) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6029 | Test Acc 0.5794
Epoch 0070 | Time 0.216 (0.093) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6029 | Test Acc 0.5794
Epoch 0070 | Time 0.216 (0.093) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6029 | Test Acc 0.5794
Epoch 0071 | Time 0.282 (0.134) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6016 | Test Acc 0.5816
Epoch 0071 | Time 0.282 (0.134) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6016 | Test Acc 0.5816
Epoch 0071 | Time 0.282 (0.134) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6016 | Test Acc 0.5816
Epoch 0071 | Time 0.282 (0.134) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6016 | Test Acc 0.5816
Epoch 0072 | Time 0.252 (0.121) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6007 | Test Acc 0.5807
Epoch 0072 | Time 0.252 (0.121) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6007 | Test Acc 0.5807
Epoch 0072 | Time 0.252 (0.121) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6007 | Test Acc 0.5807
Epoch 0072 | Time 0.252 (0.121) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6007 | Test Acc 0.5807
Epoch 0073 | Time 0.396 (0.147) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6007 | Test Acc 0.5804
Epoch 0073 | Time 0.396 (0.147) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6007 | Test Acc 0.5804
Epoch 0073 | Time 0.396 (0.147) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6007 | Test Acc 0.5804
Epoch 0073 | Time 0.396 (0.147) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6007 | Test Acc 0.5804
Epoch 0074 | Time 0.244 (0.098) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6003 | Test Acc 0.5797
Epoch 0074 | Time 0.244 (0.098) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6003 | Test Acc 0.5797
Epoch 0074 | Time 0.244 (0.098) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6003 | Test Acc 0.5797
Epoch 0074 | Time 0.244 (0.098) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6003 | Test Acc 0.5797
Epoch 0075 | Time 0.270 (0.094) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6013 | Test Acc 0.5806
Epoch 0075 | Time 0.270 (0.094) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6013 | Test Acc 0.5806
Epoch 0075 | Time 0.270 (0.094) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6013 | Test Acc 0.5806
Epoch 0075 | Time 0.270 (0.094) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6013 | Test Acc 0.5806
Epoch 0076 | Time 0.277 (0.084) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6014 | Test Acc 0.5795
Epoch 0076 | Time 0.277 (0.084) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6014 | Test Acc 0.5795
Epoch 0076 | Time 0.277 (0.084) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6014 | Test Acc 0.5795
Epoch 0076 | Time 0.277 (0.084) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6014 | Test Acc 0.5795
Epoch 0077 | Time 0.307 (0.105) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6022 | Test Acc 0.5811
Epoch 0077 | Time 0.307 (0.105) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6022 | Test Acc 0.5811
Epoch 0077 | Time 0.307 (0.105) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6022 | Test Acc 0.5811
Epoch 0077 | Time 0.307 (0.105) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6022 | Test Acc 0.5811
Epoch 0078 | Time 0.286 (0.090) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6018 | Test Acc 0.5784
Epoch 0078 | Time 0.286 (0.090) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6018 | Test Acc 0.5784
Epoch 0078 | Time 0.286 (0.090) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6018 | Test Acc 0.5784
Epoch 0078 | Time 0.286 (0.090) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6018 | Test Acc 0.5784
Epoch 0079 | Time 0.277 (0.092) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6011 | Test Acc 0.5794
Epoch 0079 | Time 0.277 (0.092) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6011 | Test Acc 0.5794
Epoch 0079 | Time 0.277 (0.092) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6011 | Test Acc 0.5794
Epoch 0079 | Time 0.277 (0.092) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6011 | Test Acc 0.5794
Epoch 0080 | Time 0.231 (0.090) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6008 | Test Acc 0.5777
Epoch 0080 | Time 0.231 (0.090) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6008 | Test Acc 0.5777
Epoch 0080 | Time 0.231 (0.090) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6008 | Test Acc 0.5777
Epoch 0080 | Time 0.231 (0.090) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6008 | Test Acc 0.5777
Epoch 0081 | Time 0.279 (0.115) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6011 | Test Acc 0.5794
Epoch 0081 | Time 0.279 (0.115) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6011 | Test Acc 0.5794
Epoch 0081 | Time 0.279 (0.115) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6011 | Test Acc 0.5794
Epoch 0081 | Time 0.279 (0.115) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6011 | Test Acc 0.5794
Epoch 0082 | Time 0.205 (0.100) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6014 | Test Acc 0.5807
Epoch 0082 | Time 0.205 (0.100) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6014 | Test Acc 0.5807
Epoch 0082 | Time 0.205 (0.100) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6014 | Test Acc 0.5807
Epoch 0082 | Time 0.205 (0.100) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6014 | Test Acc 0.5807
Epoch 0083 | Time 0.253 (0.087) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6025 | Test Acc 0.5802
Epoch 0083 | Time 0.253 (0.087) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6025 | Test Acc 0.5802
Epoch 0083 | Time 0.253 (0.087) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6025 | Test Acc 0.5802
Epoch 0083 | Time 0.253 (0.087) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6025 | Test Acc 0.5802
Epoch 0084 | Time 0.566 (0.125) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6026 | Test Acc 0.5799
Epoch 0084 | Time 0.566 (0.125) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6026 | Test Acc 0.5799
Epoch 0084 | Time 0.566 (0.125) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6026 | Test Acc 0.5799
Epoch 0084 | Time 0.566 (0.125) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6026 | Test Acc 0.5799
Epoch 0085 | Time 0.347 (0.102) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6020 | Test Acc 0.5810
Epoch 0085 | Time 0.347 (0.102) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6020 | Test Acc 0.5810
Epoch 0085 | Time 0.347 (0.102) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6020 | Test Acc 0.5810
Epoch 0085 | Time 0.347 (0.102) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6020 | Test Acc 0.5810
Epoch 0086 | Time 0.280 (0.104) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6004 | Test Acc 0.5801
Epoch 0086 | Time 0.280 (0.104) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6004 | Test Acc 0.5801
Epoch 0086 | Time 0.280 (0.104) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6004 | Test Acc 0.5801
Epoch 0086 | Time 0.280 (0.104) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6004 | Test Acc 0.5801
Epoch 0087 | Time 0.227 (0.083) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.5996 | Test Acc 0.5797
Epoch 0087 | Time 0.227 (0.083) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.5996 | Test Acc 0.5797
Epoch 0087 | Time 0.227 (0.083) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.5996 | Test Acc 0.5797
Epoch 0087 | Time 0.227 (0.083) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.5996 | Test Acc 0.5797
Epoch 0088 | Time 0.286 (0.115) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6013 | Test Acc 0.5823
Epoch 0088 | Time 0.286 (0.115) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6013 | Test Acc 0.5823
Epoch 0088 | Time 0.286 (0.115) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6013 | Test Acc 0.5823
Epoch 0088 | Time 0.286 (0.115) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6013 | Test Acc 0.5823
Epoch 0089 | Time 0.306 (0.118) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6008 | Test Acc 0.5798
Epoch 0089 | Time 0.306 (0.118) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6008 | Test Acc 0.5798
Epoch 0089 | Time 0.306 (0.118) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6008 | Test Acc 0.5798
Epoch 0089 | Time 0.306 (0.118) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6008 | Test Acc 0.5798
Epoch 0090 | Time 0.248 (0.104) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6013 | Test Acc 0.5812
Epoch 0090 | Time 0.248 (0.104) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6013 | Test Acc 0.5812
Epoch 0090 | Time 0.248 (0.104) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6013 | Test Acc 0.5812
Epoch 0090 | Time 0.248 (0.104) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6013 | Test Acc 0.5812
Epoch 0091 | Time 0.271 (0.130) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6024 | Test Acc 0.5799
Epoch 0091 | Time 0.271 (0.130) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6024 | Test Acc 0.5799
Epoch 0091 | Time 0.271 (0.130) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6024 | Test Acc 0.5799
Epoch 0091 | Time 0.271 (0.130) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6024 | Test Acc 0.5799
Epoch 0092 | Time 0.267 (0.089) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6023 | Test Acc 0.5816
Epoch 0092 | Time 0.267 (0.089) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6023 | Test Acc 0.5816
Epoch 0092 | Time 0.267 (0.089) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6023 | Test Acc 0.5816
Epoch 0092 | Time 0.267 (0.089) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6023 | Test Acc 0.5816
Epoch 0093 | Time 0.274 (0.088) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6003 | Test Acc 0.5786
Epoch 0093 | Time 0.274 (0.088) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6003 | Test Acc 0.5786
Epoch 0093 | Time 0.274 (0.088) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6003 | Test Acc 0.5786
Epoch 0093 | Time 0.274 (0.088) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6003 | Test Acc 0.5786
Epoch 0094 | Time 0.398 (0.158) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6015 | Test Acc 0.5826
Epoch 0094 | Time 0.398 (0.158) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6015 | Test Acc 0.5826
Epoch 0094 | Time 0.398 (0.158) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6015 | Test Acc 0.5826
Epoch 0094 | Time 0.398 (0.158) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6015 | Test Acc 0.5826
Epoch 0095 | Time 0.267 (0.123) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6021 | Test Acc 0.5806
Epoch 0095 | Time 0.267 (0.123) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6021 | Test Acc 0.5806
Epoch 0095 | Time 0.267 (0.123) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6021 | Test Acc 0.5806
Epoch 0095 | Time 0.267 (0.123) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6021 | Test Acc 0.5806
Epoch 0096 | Time 0.395 (0.110) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6018 | Test Acc 0.5791
Epoch 0096 | Time 0.395 (0.110) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6018 | Test Acc 0.5791
Epoch 0096 | Time 0.395 (0.110) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6018 | Test Acc 0.5791
Epoch 0096 | Time 0.395 (0.110) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6018 | Test Acc 0.5791
Epoch 0097 | Time 0.284 (0.099) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6024 | Test Acc 0.5822
Epoch 0097 | Time 0.284 (0.099) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6024 | Test Acc 0.5822
Epoch 0097 | Time 0.284 (0.099) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6024 | Test Acc 0.5822
Epoch 0097 | Time 0.284 (0.099) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6024 | Test Acc 0.5822
Epoch 0098 | Time 0.325 (0.112) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6013 | Test Acc 0.5820
Epoch 0098 | Time 0.325 (0.112) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6013 | Test Acc 0.5820
Epoch 0098 | Time 0.325 (0.112) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6013 | Test Acc 0.5820
Epoch 0098 | Time 0.325 (0.112) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6013 | Test Acc 0.5820
Epoch 0099 | Time 0.302 (0.092) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6018 | Test Acc 0.5783
Epoch 0099 | Time 0.302 (0.092) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6018 | Test Acc 0.5783
Epoch 0099 | Time 0.302 (0.092) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6018 | Test Acc 0.5783
Epoch 0099 | Time 0.302 (0.092) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6018 | Test Acc 0.5783
Epoch 0100 | Time 0.333 (0.109) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6021 | Test Acc 0.5815
Epoch 0100 | Time 0.333 (0.109) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6021 | Test Acc 0.5815
Epoch 0100 | Time 0.333 (0.109) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6021 | Test Acc 0.5815
Epoch 0100 | Time 0.333 (0.109) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6021 | Test Acc 0.5815
Epoch 0101 | Time 0.242 (0.094) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6031 | Test Acc 0.5826
Epoch 0101 | Time 0.242 (0.094) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6031 | Test Acc 0.5826
Epoch 0101 | Time 0.242 (0.094) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6031 | Test Acc 0.5826
Epoch 0101 | Time 0.242 (0.094) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6031 | Test Acc 0.5826
Epoch 0102 | Time 0.224 (0.086) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6029 | Test Acc 0.5817
Epoch 0102 | Time 0.224 (0.086) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6029 | Test Acc 0.5817
Epoch 0102 | Time 0.224 (0.086) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6029 | Test Acc 0.5817
Epoch 0102 | Time 0.224 (0.086) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6029 | Test Acc 0.5817
Epoch 0103 | Time 0.263 (0.107) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6027 | Test Acc 0.5807
Epoch 0103 | Time 0.263 (0.107) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6027 | Test Acc 0.5807
Epoch 0103 | Time 0.263 (0.107) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6027 | Test Acc 0.5807
Epoch 0103 | Time 0.263 (0.107) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6027 | Test Acc 0.5807
Epoch 0104 | Time 0.314 (0.111) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6028 | Test Acc 0.5805
Epoch 0104 | Time 0.314 (0.111) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6028 | Test Acc 0.5805
Epoch 0104 | Time 0.314 (0.111) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6028 | Test Acc 0.5805
Epoch 0104 | Time 0.314 (0.111) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6028 | Test Acc 0.5805
Epoch 0105 | Time 0.332 (0.115) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6029 | Test Acc 0.5813
Epoch 0105 | Time 0.332 (0.115) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6029 | Test Acc 0.5813
Epoch 0105 | Time 0.332 (0.115) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6029 | Test Acc 0.5813
Epoch 0105 | Time 0.332 (0.115) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6029 | Test Acc 0.5813
Epoch 0106 | Time 0.297 (0.091) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6036 | Test Acc 0.5807
Epoch 0106 | Time 0.297 (0.091) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6036 | Test Acc 0.5807
Epoch 0106 | Time 0.297 (0.091) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6036 | Test Acc 0.5807
Epoch 0106 | Time 0.297 (0.091) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6036 | Test Acc 0.5807
Epoch 0107 | Time 0.340 (0.093) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6033 | Test Acc 0.5813
Epoch 0107 | Time 0.340 (0.093) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6033 | Test Acc 0.5813
Epoch 0107 | Time 0.340 (0.093) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6033 | Test Acc 0.5813
Epoch 0107 | Time 0.340 (0.093) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6033 | Test Acc 0.5813
Epoch 0108 | Time 0.241 (0.089) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6032 | Test Acc 0.5812
Epoch 0108 | Time 0.241 (0.089) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6032 | Test Acc 0.5812
Epoch 0108 | Time 0.241 (0.089) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6032 | Test Acc 0.5812
Epoch 0108 | Time 0.241 (0.089) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6032 | Test Acc 0.5812
Epoch 0109 | Time 0.230 (0.082) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6029 | Test Acc 0.5816
Epoch 0109 | Time 0.230 (0.082) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6029 | Test Acc 0.5816
Epoch 0109 | Time 0.230 (0.082) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6029 | Test Acc 0.5816
Epoch 0109 | Time 0.230 (0.082) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6029 | Test Acc 0.5816
Epoch 0110 | Time 0.379 (0.133) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6029 | Test Acc 0.5814
Epoch 0110 | Time 0.379 (0.133) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6029 | Test Acc 0.5814
Epoch 0110 | Time 0.379 (0.133) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6029 | Test Acc 0.5814
Epoch 0110 | Time 0.379 (0.133) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6029 | Test Acc 0.5814
Epoch 0111 | Time 0.351 (0.110) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6035 | Test Acc 0.5812
Epoch 0111 | Time 0.351 (0.110) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6035 | Test Acc 0.5812
Epoch 0111 | Time 0.351 (0.110) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6035 | Test Acc 0.5812
Epoch 0111 | Time 0.351 (0.110) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6035 | Test Acc 0.5812
Epoch 0112 | Time 0.266 (0.113) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6033 | Test Acc 0.5810
Epoch 0112 | Time 0.266 (0.113) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6033 | Test Acc 0.5810
Epoch 0112 | Time 0.266 (0.113) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6033 | Test Acc 0.5810
Epoch 0112 | Time 0.266 (0.113) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6033 | Test Acc 0.5810
Epoch 0113 | Time 0.305 (0.099) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6029 | Test Acc 0.5808
Epoch 0113 | Time 0.305 (0.099) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6029 | Test Acc 0.5808
Epoch 0113 | Time 0.305 (0.099) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6029 | Test Acc 0.5808
Epoch 0113 | Time 0.305 (0.099) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6029 | Test Acc 0.5808
Epoch 0114 | Time 0.368 (0.108) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6032 | Test Acc 0.5809
Epoch 0114 | Time 0.368 (0.108) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6032 | Test Acc 0.5809
Epoch 0114 | Time 0.368 (0.108) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6032 | Test Acc 0.5809
Epoch 0114 | Time 0.368 (0.108) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6032 | Test Acc 0.5809
Epoch 0115 | Time 0.265 (0.090) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6031 | Test Acc 0.5819
Epoch 0115 | Time 0.265 (0.090) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6031 | Test Acc 0.5819
Epoch 0115 | Time 0.265 (0.090) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6031 | Test Acc 0.5819
Epoch 0115 | Time 0.265 (0.090) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6031 | Test Acc 0.5819
Epoch 0116 | Time 0.272 (0.098) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6034 | Test Acc 0.5822
Epoch 0116 | Time 0.272 (0.098) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6034 | Test Acc 0.5822
Epoch 0116 | Time 0.272 (0.098) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6034 | Test Acc 0.5822
Epoch 0116 | Time 0.272 (0.098) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6034 | Test Acc 0.5822
Epoch 0117 | Time 0.345 (0.089) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6025 | Test Acc 0.5812
Epoch 0117 | Time 0.345 (0.089) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6025 | Test Acc 0.5812
Epoch 0117 | Time 0.345 (0.089) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6025 | Test Acc 0.5812
Epoch 0117 | Time 0.345 (0.089) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6025 | Test Acc 0.5812
Epoch 0118 | Time 0.374 (0.086) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6031 | Test Acc 0.5805
Epoch 0118 | Time 0.374 (0.086) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6031 | Test Acc 0.5805
Epoch 0118 | Time 0.374 (0.086) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6031 | Test Acc 0.5805
Epoch 0118 | Time 0.374 (0.086) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6031 | Test Acc 0.5805
Epoch 0119 | Time 0.430 (0.153) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6028 | Test Acc 0.5804
Epoch 0119 | Time 0.430 (0.153) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6028 | Test Acc 0.5804
Epoch 0119 | Time 0.430 (0.153) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6028 | Test Acc 0.5804
Epoch 0119 | Time 0.430 (0.153) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6028 | Test Acc 0.5804
Epoch 0120 | Time 0.285 (0.112) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6035 | Test Acc 0.5820
Epoch 0120 | Time 0.285 (0.112) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6035 | Test Acc 0.5820
Epoch 0120 | Time 0.285 (0.112) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6035 | Test Acc 0.5820
Epoch 0120 | Time 0.285 (0.112) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6035 | Test Acc 0.5820
Epoch 0121 | Time 0.229 (0.097) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6027 | Test Acc 0.5817
Epoch 0121 | Time 0.229 (0.097) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6027 | Test Acc 0.5817
Epoch 0121 | Time 0.229 (0.097) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6027 | Test Acc 0.5817
Epoch 0121 | Time 0.229 (0.097) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6027 | Test Acc 0.5817
Epoch 0122 | Time 0.258 (0.084) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6030 | Test Acc 0.5813
Epoch 0122 | Time 0.258 (0.084) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6030 | Test Acc 0.5813
Epoch 0122 | Time 0.258 (0.084) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6030 | Test Acc 0.5813
Epoch 0122 | Time 0.258 (0.084) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6030 | Test Acc 0.5813
Epoch 0123 | Time 0.282 (0.091) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6032 | Test Acc 0.5819
Epoch 0123 | Time 0.282 (0.091) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6032 | Test Acc 0.5819
Epoch 0123 | Time 0.282 (0.091) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6032 | Test Acc 0.5819
Epoch 0123 | Time 0.282 (0.091) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6032 | Test Acc 0.5819
Epoch 0124 | Time 0.274 (0.093) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6033 | Test Acc 0.5812
Epoch 0124 | Time 0.274 (0.093) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6033 | Test Acc 0.5812
Epoch 0124 | Time 0.274 (0.093) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6033 | Test Acc 0.5812
Epoch 0124 | Time 0.274 (0.093) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6033 | Test Acc 0.5812
Epoch 0125 | Time 0.373 (0.095) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6032 | Test Acc 0.5818
Epoch 0125 | Time 0.373 (0.095) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6032 | Test Acc 0.5818
Epoch 0125 | Time 0.373 (0.095) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6032 | Test Acc 0.5818
Epoch 0125 | Time 0.373 (0.095) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6032 | Test Acc 0.5818
Epoch 0126 | Time 0.277 (0.077) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6030 | Test Acc 0.5814
Epoch 0126 | Time 0.277 (0.077) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6030 | Test Acc 0.5814
Epoch 0126 | Time 0.277 (0.077) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6030 | Test Acc 0.5814
Epoch 0126 | Time 0.277 (0.077) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6030 | Test Acc 0.5814
Epoch 0127 | Time 0.283 (0.103) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6032 | Test Acc 0.5821
Epoch 0127 | Time 0.283 (0.103) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6032 | Test Acc 0.5821
Epoch 0127 | Time 0.283 (0.103) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6032 | Test Acc 0.5821
Epoch 0127 | Time 0.283 (0.103) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6032 | Test Acc 0.5821
Epoch 0128 | Time 0.262 (0.161) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6035 | Test Acc 0.5803
Epoch 0128 | Time 0.262 (0.161) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6035 | Test Acc 0.5803
Epoch 0128 | Time 0.262 (0.161) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6035 | Test Acc 0.5803
Epoch 0128 | Time 0.262 (0.161) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6035 | Test Acc 0.5803
Epoch 0129 | Time 0.295 (0.095) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6031 | Test Acc 0.5809
Epoch 0129 | Time 0.295 (0.095) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6031 | Test Acc 0.5809
Epoch 0129 | Time 0.295 (0.095) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6031 | Test Acc 0.5809
Epoch 0129 | Time 0.295 (0.095) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6031 | Test Acc 0.5809
Epoch 0130 | Time 0.287 (0.086) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6032 | Test Acc 0.5808
Epoch 0130 | Time 0.287 (0.086) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6032 | Test Acc 0.5808
Epoch 0130 | Time 0.287 (0.086) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6032 | Test Acc 0.5808
Epoch 0130 | Time 0.287 (0.086) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6032 | Test Acc 0.5808
Epoch 0131 | Time 0.283 (0.086) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6032 | Test Acc 0.5814
Epoch 0131 | Time 0.283 (0.086) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6032 | Test Acc 0.5814
Epoch 0131 | Time 0.283 (0.086) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6032 | Test Acc 0.5814
Epoch 0131 | Time 0.283 (0.086) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6032 | Test Acc 0.5814
Epoch 0132 | Time 0.316 (0.101) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6028 | Test Acc 0.5813
Epoch 0132 | Time 0.316 (0.101) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6028 | Test Acc 0.5813
Epoch 0132 | Time 0.316 (0.101) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6028 | Test Acc 0.5813
Epoch 0132 | Time 0.316 (0.101) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6028 | Test Acc 0.5813
Epoch 0133 | Time 0.353 (0.099) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6033 | Test Acc 0.5815
Epoch 0133 | Time 0.353 (0.099) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6033 | Test Acc 0.5815
Epoch 0133 | Time 0.353 (0.099) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6033 | Test Acc 0.5815
Epoch 0133 | Time 0.353 (0.099) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6033 | Test Acc 0.5815
Epoch 0134 | Time 0.290 (0.138) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6030 | Test Acc 0.5815
Epoch 0134 | Time 0.290 (0.138) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6030 | Test Acc 0.5815
Epoch 0134 | Time 0.290 (0.138) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6030 | Test Acc 0.5815
Epoch 0134 | Time 0.290 (0.138) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6030 | Test Acc 0.5815
Epoch 0135 | Time 0.246 (0.088) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6032 | Test Acc 0.5815
Epoch 0135 | Time 0.246 (0.088) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6032 | Test Acc 0.5815
Epoch 0135 | Time 0.246 (0.088) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6032 | Test Acc 0.5815
Epoch 0135 | Time 0.246 (0.088) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6032 | Test Acc 0.5815
Epoch 0136 | Time 0.305 (0.088) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6035 | Test Acc 0.5812
Epoch 0136 | Time 0.305 (0.088) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6035 | Test Acc 0.5812
Epoch 0136 | Time 0.305 (0.088) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6035 | Test Acc 0.5812
Epoch 0136 | Time 0.305 (0.088) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6035 | Test Acc 0.5812
Epoch 0137 | Time 0.287 (0.097) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6030 | Test Acc 0.5817
Epoch 0137 | Time 0.287 (0.097) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6030 | Test Acc 0.5817
Epoch 0137 | Time 0.287 (0.097) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6030 | Test Acc 0.5817
Epoch 0137 | Time 0.287 (0.097) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6030 | Test Acc 0.5817
Epoch 0138 | Time 0.288 (0.096) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6033 | Test Acc 0.5812
Epoch 0138 | Time 0.288 (0.096) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6033 | Test Acc 0.5812
Epoch 0138 | Time 0.288 (0.096) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6033 | Test Acc 0.5812
Epoch 0138 | Time 0.288 (0.096) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6033 | Test Acc 0.5812
Epoch 0139 | Time 0.242 (0.102) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6032 | Test Acc 0.5813
Epoch 0139 | Time 0.242 (0.102) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6032 | Test Acc 0.5813
Epoch 0139 | Time 0.242 (0.102) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6032 | Test Acc 0.5813
Epoch 0139 | Time 0.242 (0.102) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6032 | Test Acc 0.5813
Epoch 0140 | Time 0.251 (0.097) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6032 | Test Acc 0.5815
Epoch 0140 | Time 0.251 (0.097) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6032 | Test Acc 0.5815
Epoch 0140 | Time 0.251 (0.097) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6032 | Test Acc 0.5815
Epoch 0140 | Time 0.251 (0.097) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6032 | Test Acc 0.5815
Epoch 0141 | Time 0.384 (0.107) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6032 | Test Acc 0.5816
Epoch 0141 | Time 0.384 (0.107) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6032 | Test Acc 0.5816
Epoch 0141 | Time 0.384 (0.107) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6032 | Test Acc 0.5816
Epoch 0141 | Time 0.384 (0.107) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6032 | Test Acc 0.5816
Epoch 0142 | Time 0.316 (0.108) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6032 | Test Acc 0.5815
Epoch 0142 | Time 0.316 (0.108) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6032 | Test Acc 0.5815
Epoch 0142 | Time 0.316 (0.108) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6032 | Test Acc 0.5815
Epoch 0142 | Time 0.316 (0.108) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6032 | Test Acc 0.5815
Epoch 0143 | Time 0.260 (0.084) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6031 | Test Acc 0.5815
Epoch 0143 | Time 0.260 (0.084) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6031 | Test Acc 0.5815
Epoch 0143 | Time 0.260 (0.084) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6031 | Test Acc 0.5815
Epoch 0143 | Time 0.260 (0.084) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6031 | Test Acc 0.5815
Epoch 0144 | Time 0.242 (0.073) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6031 | Test Acc 0.5813
Epoch 0144 | Time 0.242 (0.073) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6031 | Test Acc 0.5813
Epoch 0144 | Time 0.242 (0.073) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6031 | Test Acc 0.5813
Epoch 0144 | Time 0.242 (0.073) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6031 | Test Acc 0.5813
Epoch 0145 | Time 0.264 (0.103) | NFE-F 26.1 | NFE-B 0.0 | Train Acc 0.6031 | Test Acc 0.5815
Epoch 0145 | Time 0.264 (0.103) | NFE-F 26.1 | NFE-B 0.0 | Train Acc 0.6031 | Test Acc 0.5815
Epoch 0145 | Time 0.264 (0.103) | NFE-F 26.1 | NFE-B 0.0 | Train Acc 0.6031 | Test Acc 0.5815
Epoch 0145 | Time 0.264 (0.103) | NFE-F 26.1 | NFE-B 0.0 | Train Acc 0.6031 | Test Acc 0.5815
Epoch 0146 | Time 0.276 (0.080) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6033 | Test Acc 0.5817
Epoch 0146 | Time 0.276 (0.080) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6033 | Test Acc 0.5817
Epoch 0146 | Time 0.276 (0.080) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6033 | Test Acc 0.5817
Epoch 0146 | Time 0.276 (0.080) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6033 | Test Acc 0.5817
Epoch 0147 | Time 0.257 (0.092) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6031 | Test Acc 0.5815
Epoch 0147 | Time 0.257 (0.092) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6031 | Test Acc 0.5815
Epoch 0147 | Time 0.257 (0.092) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6031 | Test Acc 0.5815
Epoch 0147 | Time 0.257 (0.092) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6031 | Test Acc 0.5815
Epoch 0148 | Time 0.295 (0.095) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6033 | Test Acc 0.5818
Epoch 0148 | Time 0.295 (0.095) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6033 | Test Acc 0.5818
Epoch 0148 | Time 0.295 (0.095) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6033 | Test Acc 0.5818
Epoch 0148 | Time 0.295 (0.095) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6033 | Test Acc 0.5818
Epoch 0149 | Time 0.227 (0.097) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6032 | Test Acc 0.5814
Epoch 0149 | Time 0.227 (0.097) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6032 | Test Acc 0.5814
Epoch 0149 | Time 0.227 (0.097) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6032 | Test Acc 0.5814
Epoch 0149 | Time 0.227 (0.097) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6032 | Test Acc 0.5814
Epoch 0150 | Time 0.333 (0.084) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6033 | Test Acc 0.5815
Epoch 0150 | Time 0.333 (0.084) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6033 | Test Acc 0.5815
Epoch 0150 | Time 0.333 (0.084) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6033 | Test Acc 0.5815
Epoch 0150 | Time 0.333 (0.084) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6033 | Test Acc 0.5815
Epoch 0151 | Time 0.259 (0.104) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6031 | Test Acc 0.5814
Epoch 0151 | Time 0.259 (0.104) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6031 | Test Acc 0.5814
Epoch 0151 | Time 0.259 (0.104) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6031 | Test Acc 0.5814
Epoch 0151 | Time 0.259 (0.104) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6031 | Test Acc 0.5814
Epoch 0152 | Time 0.262 (0.094) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6031 | Test Acc 0.5817
Epoch 0152 | Time 0.262 (0.094) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6031 | Test Acc 0.5817
Epoch 0152 | Time 0.262 (0.094) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6031 | Test Acc 0.5817
Epoch 0152 | Time 0.262 (0.094) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6031 | Test Acc 0.5817
Epoch 0153 | Time 0.219 (0.089) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6031 | Test Acc 0.5814
Epoch 0153 | Time 0.219 (0.089) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6031 | Test Acc 0.5814
Epoch 0153 | Time 0.219 (0.089) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6031 | Test Acc 0.5814
Epoch 0153 | Time 0.219 (0.089) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6031 | Test Acc 0.5814
Epoch 0154 | Time 0.285 (0.103) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6030 | Test Acc 0.5815
Epoch 0154 | Time 0.285 (0.103) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6030 | Test Acc 0.5815
Epoch 0154 | Time 0.285 (0.103) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6030 | Test Acc 0.5815
Epoch 0154 | Time 0.285 (0.103) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6030 | Test Acc 0.5815
Epoch 0155 | Time 0.316 (0.094) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6030 | Test Acc 0.5815
Epoch 0155 | Time 0.316 (0.094) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6030 | Test Acc 0.5815
Epoch 0155 | Time 0.316 (0.094) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6030 | Test Acc 0.5815
Epoch 0155 | Time 0.316 (0.094) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6030 | Test Acc 0.5815
Epoch 0156 | Time 0.577 (0.123) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6030 | Test Acc 0.5816
Epoch 0156 | Time 0.577 (0.123) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6030 | Test Acc 0.5816
Epoch 0156 | Time 0.577 (0.123) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6030 | Test Acc 0.5816
Epoch 0156 | Time 0.577 (0.123) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.6030 | Test Acc 0.5816
Epoch 0157 | Time 0.444 (0.128) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6031 | Test Acc 0.5818
Epoch 0157 | Time 0.444 (0.128) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6031 | Test Acc 0.5818
Epoch 0157 | Time 0.444 (0.128) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6031 | Test Acc 0.5818
Epoch 0157 | Time 0.444 (0.128) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6031 | Test Acc 0.5818
/home/manzand/Documents/Python/neuralODE_examples/cifar/odenet_cifar_example_tiny.py
/home/manzand/Documents/Python/neuralODE_examples/cifar/odenet_cifar_example_tiny.py
/home/manzand/Documents/Python/neuralODE_examples/cifar/odenet_cifar_example_tiny.py
/home/manzand/Documents/Python/neuralODE_examples/cifar/odenet_cifar_example_tiny.py
/home/manzand/Documents/Python/neuralODE_examples/cifar/odenet_cifar_example_tiny.py
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb  4 09:04:31 2021

@author: manzand
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 19 15:10:31 2021

@author: manzand
"""

import os
import argparse
import logging
import time
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms
from scipy.io import savemat

parser = argparse.ArgumentParser()
parser.add_argument('--network', type=str, choices=['resnet', 'odenet'], default='odenet')
parser.add_argument('--tol', type=float, default=1e-3)
parser.add_argument('--adjoint', type=eval, default=False, choices=[True, False])
parser.add_argument('--downsampling-method', type=str, default='conv', choices=['conv', 'res'])
parser.add_argument('--nepochs', type=int, default=200)
parser.add_argument('--data_aug', type=eval, default=False, choices=[True, False])
parser.add_argument('--lr', type=float, default=0.01)
parser.add_argument('--batch_size', type=int, default=128)
parser.add_argument('--test_batch_size', type=int, default=1000)

parser.add_argument('--save', type=str, default='../logs/cifartiny')
parser.add_argument('--debug', action='store_true')
parser.add_argument('--gpu', type=int, default=0)
args = parser.parse_args()

if args.adjoint:
    from torchdiffeq import odeint_adjoint as odeint
else:
    from torchdiffeq import odeint


def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


def norm(dim):
    return nn.BatchNorm2d(min(64, dim), dim)


class ConcatConv2d(nn.Module):

    def __init__(self, dim_in, dim_out, ksize=3, stride=1, padding=0, dilation=1, groups=1, bias=True, transpose=False):
        super(ConcatConv2d, self).__init__()
        module = nn.ConvTranspose2d if transpose else nn.Conv2d
        self._layer = module(
            dim_in + 1, dim_out, kernel_size=ksize, stride=stride, padding=padding, dilation=dilation, groups=groups,
            bias=bias
        )

    def forward(self, t, x):
        tt = torch.ones_like(x[:, :1, :, :]) * t
        ttx = torch.cat([tt, x], 1)
        return self._layer(ttx)


class ODEfunc(nn.Module):

    def __init__(self,dim):
        super(ODEfunc, self).__init__()
        self.fc1 = nn.Linear(dim,16)
        self.fc2 = nn.Linear(16, dim)
        self.nfe = 0

    def forward(self, t, x):
        self.nfe += 1
        # print('11111111111111111111')
        # print(x.size())
        out = self.fc1(x)
        # print('222222222222222222')
        # print(out.size())
        out = self.fc2(out)
        return out


class ODEBlock(nn.Module):

    def __init__(self, odefunc):
        super(ODEBlock, self).__init__()
        self.odefunc = odefunc
        self.integration_time = torch.tensor([0, 1]).float()

    def forward(self, x):
        self.integration_time = self.integration_time.type_as(x)
        out = odeint(self.odefunc, x, self.integration_time, rtol=args.tol, atol=args.tol)
        return out[1]

    @property
    def nfe(self):
        return self.odefunc.nfe

    @nfe.setter
    def nfe(self, value):
        self.odefunc.nfe = value


class Flatten(nn.Module):

    def __init__(self):
        super(Flatten, self).__init__()

    def forward(self, x):
        shape = torch.prod(torch.tensor(x.shape[1:])).item()
        xout = x.view(-1, shape)
        # print(xout.size())
        return xout


class RunningAverageMeter(object):
    """Computes and stores the average and current value"""

    def __init__(self, momentum=0.99):
        self.momentum = momentum
        self.reset()

    def reset(self):
        self.val = None
        self.avg = 0

    def update(self, val):
        if self.val is None:
            self.avg = val
        else:
            self.avg = self.avg * self.momentum + val * (1 - self.momentum)
        self.val = val


def get_cifar_loaders(data_aug=False, batch_size=32, test_batch_size=1000, perc=1.0):
    if data_aug:
        transform_train = transforms.Compose([
            transforms.RandomCrop(28, padding=4),
            transforms.ToTensor(),
        ])
    else:
        transform_train = transforms.Compose([
            transforms.ToTensor(),
        ])

    transform_test = transforms.Compose([
        transforms.ToTensor(),
    ])

    train_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_train), batch_size=batch_size,
        shuffle=True, num_workers=2, drop_last=True
    )

    train_eval_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    test_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=False, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    return train_loader, test_loader, train_eval_loader


def inf_generator(iterable):
    """Allows training with DataLoaders in a single infinite loop:
        for i, (x, y) in enumerate(inf_generator(train_loader)):
    """
    iterator = iterable.__iter__()
    while True:
        try:
            yield iterator.__next__()
        except StopIteration:
            iterator = iterable.__iter__()


def learning_rate_with_decay(batch_size, batch_denom, batches_per_epoch, boundary_epochs, decay_rates):
    initial_learning_rate = args.lr * batch_size / batch_denom

    boundaries = [int(batches_per_epoch * epoch) for epoch in boundary_epochs]
    vals = [initial_learning_rate * decay for decay in decay_rates]

    def learning_rate_fn(itr):
        lt = [itr < b for b in boundaries] + [True]
        i = np.argmax(lt)
        return vals[i]

    return learning_rate_fn


def one_hot(x, K):
    return np.array(x[:, None] == np.arange(K)[None, :], dtype=int)


def accuracy(model, dataset_loader):
    total_correct = 0
    for x, y in dataset_loader:
        x = x.to(device)
        y = one_hot(np.array(y.numpy()), 10)

        target_class = np.argmax(y, axis=1)
        predicted_class = np.argmax(model(x).cpu().detach().numpy(), axis=1)
        total_correct += np.sum(predicted_class == target_class)
    return total_correct / len(dataset_loader.dataset)


def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)


def makedirs(dirname):
    if not os.path.exists(dirname):
        os.makedirs(dirname)


def get_logger(logpath, filepath, package_files=[], displaying=True, saving=True, debug=False):
    logger = logging.getLogger()
    if debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logger.setLevel(level)
    if saving:
        info_file_handler = logging.FileHandler(logpath, mode="a")
        info_file_handler.setLevel(level)
        logger.addHandler(info_file_handler)
    if displaying:
        console_handler = logging.StreamHandler()
        console_handler.setLevel(level)
        logger.addHandler(console_handler)
    logger.info(filepath)
    with open(filepath, "r") as f:
        logger.info(f.read())

    for f in package_files:
        logger.info(f)
        with open(f, "r") as package_f:
            logger.info(package_f.read())

    return logger


if __name__ == '__main__':

    makedirs(args.save)
    logger = get_logger(logpath=os.path.join(args.save, 'logs'), filepath=os.path.abspath(__file__))
    logger.info(args)

    device = torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')

    is_odenet = args.network == 'odenet'

    downsampling_layers = [
        nn.Conv2d(3, 20, 3, 1),
        norm(20),
        nn.ReLU(inplace=True),
        nn.Conv2d(20, 20, 4, 2, 1),
        norm(20),
        nn.ReLU(inplace=True),
        nn.Conv2d(20, 20, 4, 2, 1),
        norm(20),
        nn.ReLU(inplace=True),
        Flatten(),
    ]

    feature_layers = [ODEBlock(ODEfunc(196))] 
    fc_layers = [nn.Linear(196, 10)]
    # feature_layers = [ODEBlock(ODEfunc(900))] 
    # fc_layers = [nn.Linear(900, 10)]

    model = nn.Sequential(*downsampling_layers, *feature_layers, *fc_layers).to(device)

    logger.info(model)
    logger.info('Number of parameters: {}'.format(count_parameters(model)))

    criterion = nn.CrossEntropyLoss().to(device)

    train_loader, test_loader, train_eval_loader = get_cifar_loaders(
        args.data_aug, args.batch_size, args.test_batch_size
    )

    data_gen = inf_generator(train_loader)
    batches_per_epoch = len(train_loader)

    lr_fn = learning_rate_with_decay(
        args.batch_size, batch_denom=128, batches_per_epoch=batches_per_epoch, boundary_epochs=[60, 100, 140],
        decay_rates=[1, 0.1, 0.01, 0.001]
    )

    optimizer = torch.optim.SGD(model.parameters(), lr=args.lr, momentum=0.9)

    best_acc = 0
    batch_time_meter = RunningAverageMeter()
    f_nfe_meter = RunningAverageMeter()
    b_nfe_meter = RunningAverageMeter()
    end = time.time()

    for itr in range(args.nepochs * batches_per_epoch):

        for param_group in optimizer.param_groups:
            param_group['lr'] = lr_fn(itr)

        optimizer.zero_grad()
        x, y = data_gen.__next__()
        x = x.to(device)
        y = y.to(device)
        logits = model(x)
        loss = criterion(logits, y)

        if is_odenet:
            nfe_forward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        loss.backward()
        optimizer.step()

        if is_odenet:
            nfe_backward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        batch_time_meter.update(time.time() - end)
        if is_odenet:
            f_nfe_meter.update(nfe_forward)
            b_nfe_meter.update(nfe_backward)
        end = time.time()

        if itr % batches_per_epoch == 0:
            with torch.no_grad():
                train_acc = accuracy(model, train_eval_loader)
                val_acc = accuracy(model, test_loader)
                if val_acc > best_acc:
                    torch.save({'state_dict': model.state_dict(), 'args': args}, os.path.join(args.save, 'model.pth'))
                    best_acc = val_acc
                if best_acc > 0.85 and train_acc > 0.85:
                    break
                logger.info(
                    "Epoch {:04d} | Time {:.3f} ({:.3f}) | NFE-F {:.1f} | NFE-B {:.1f} | "
                    "Train Acc {:.4f} | Test Acc {:.4f}".format(
                        itr // batches_per_epoch, batch_time_meter.val, batch_time_meter.avg, f_nfe_meter.avg,
                        b_nfe_meter.avg, train_acc, val_acc
                    )
                )
    names = []
    params = []
    for name,param in model.named_parameters():
        names.append(name)
        params.append(param.detach().numpy())
    nn1 = dict({'Wb':params,'names':names})
    for name,param in model.named_buffers():
        names.append(name)
        params.append(param.detach().numpy())
    savemat("odecnn_cifar_tiny.mat",nn1)
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb  4 09:04:31 2021

@author: manzand
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 19 15:10:31 2021

@author: manzand
"""

import os
import argparse
import logging
import time
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms
from scipy.io import savemat

parser = argparse.ArgumentParser()
parser.add_argument('--network', type=str, choices=['resnet', 'odenet'], default='odenet')
parser.add_argument('--tol', type=float, default=1e-3)
parser.add_argument('--adjoint', type=eval, default=False, choices=[True, False])
parser.add_argument('--downsampling-method', type=str, default='conv', choices=['conv', 'res'])
parser.add_argument('--nepochs', type=int, default=200)
parser.add_argument('--data_aug', type=eval, default=False, choices=[True, False])
parser.add_argument('--lr', type=float, default=0.01)
parser.add_argument('--batch_size', type=int, default=128)
parser.add_argument('--test_batch_size', type=int, default=1000)

parser.add_argument('--save', type=str, default='../logs/cifartiny')
parser.add_argument('--debug', action='store_true')
parser.add_argument('--gpu', type=int, default=0)
args = parser.parse_args()

if args.adjoint:
    from torchdiffeq import odeint_adjoint as odeint
else:
    from torchdiffeq import odeint


def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


def norm(dim):
    return nn.BatchNorm2d(min(64, dim), dim)


class ConcatConv2d(nn.Module):

    def __init__(self, dim_in, dim_out, ksize=3, stride=1, padding=0, dilation=1, groups=1, bias=True, transpose=False):
        super(ConcatConv2d, self).__init__()
        module = nn.ConvTranspose2d if transpose else nn.Conv2d
        self._layer = module(
            dim_in + 1, dim_out, kernel_size=ksize, stride=stride, padding=padding, dilation=dilation, groups=groups,
            bias=bias
        )

    def forward(self, t, x):
        tt = torch.ones_like(x[:, :1, :, :]) * t
        ttx = torch.cat([tt, x], 1)
        return self._layer(ttx)


class ODEfunc(nn.Module):

    def __init__(self,dim):
        super(ODEfunc, self).__init__()
        self.fc1 = nn.Linear(dim,16)
        self.fc2 = nn.Linear(16, dim)
        self.nfe = 0

    def forward(self, t, x):
        self.nfe += 1
        # print('11111111111111111111')
        # print(x.size())
        out = self.fc1(x)
        # print('222222222222222222')
        # print(out.size())
        out = self.fc2(out)
        return out


class ODEBlock(nn.Module):

    def __init__(self, odefunc):
        super(ODEBlock, self).__init__()
        self.odefunc = odefunc
        self.integration_time = torch.tensor([0, 1]).float()

    def forward(self, x):
        self.integration_time = self.integration_time.type_as(x)
        out = odeint(self.odefunc, x, self.integration_time, rtol=args.tol, atol=args.tol)
        return out[1]

    @property
    def nfe(self):
        return self.odefunc.nfe

    @nfe.setter
    def nfe(self, value):
        self.odefunc.nfe = value


class Flatten(nn.Module):

    def __init__(self):
        super(Flatten, self).__init__()

    def forward(self, x):
        shape = torch.prod(torch.tensor(x.shape[1:])).item()
        xout = x.view(-1, shape)
        # print(xout.size())
        return xout


class RunningAverageMeter(object):
    """Computes and stores the average and current value"""

    def __init__(self, momentum=0.99):
        self.momentum = momentum
        self.reset()

    def reset(self):
        self.val = None
        self.avg = 0

    def update(self, val):
        if self.val is None:
            self.avg = val
        else:
            self.avg = self.avg * self.momentum + val * (1 - self.momentum)
        self.val = val


def get_cifar_loaders(data_aug=False, batch_size=32, test_batch_size=1000, perc=1.0):
    if data_aug:
        transform_train = transforms.Compose([
            transforms.RandomCrop(28, padding=4),
            transforms.ToTensor(),
        ])
    else:
        transform_train = transforms.Compose([
            transforms.ToTensor(),
        ])

    transform_test = transforms.Compose([
        transforms.ToTensor(),
    ])

    train_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_train), batch_size=batch_size,
        shuffle=True, num_workers=2, drop_last=True
    )

    train_eval_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    test_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=False, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    return train_loader, test_loader, train_eval_loader


def inf_generator(iterable):
    """Allows training with DataLoaders in a single infinite loop:
        for i, (x, y) in enumerate(inf_generator(train_loader)):
    """
    iterator = iterable.__iter__()
    while True:
        try:
            yield iterator.__next__()
        except StopIteration:
            iterator = iterable.__iter__()


def learning_rate_with_decay(batch_size, batch_denom, batches_per_epoch, boundary_epochs, decay_rates):
    initial_learning_rate = args.lr * batch_size / batch_denom

    boundaries = [int(batches_per_epoch * epoch) for epoch in boundary_epochs]
    vals = [initial_learning_rate * decay for decay in decay_rates]

    def learning_rate_fn(itr):
        lt = [itr < b for b in boundaries] + [True]
        i = np.argmax(lt)
        return vals[i]

    return learning_rate_fn


def one_hot(x, K):
    return np.array(x[:, None] == np.arange(K)[None, :], dtype=int)


def accuracy(model, dataset_loader):
    total_correct = 0
    for x, y in dataset_loader:
        x = x.to(device)
        y = one_hot(np.array(y.numpy()), 10)

        target_class = np.argmax(y, axis=1)
        predicted_class = np.argmax(model(x).cpu().detach().numpy(), axis=1)
        total_correct += np.sum(predicted_class == target_class)
    return total_correct / len(dataset_loader.dataset)


def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)


def makedirs(dirname):
    if not os.path.exists(dirname):
        os.makedirs(dirname)


def get_logger(logpath, filepath, package_files=[], displaying=True, saving=True, debug=False):
    logger = logging.getLogger()
    if debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logger.setLevel(level)
    if saving:
        info_file_handler = logging.FileHandler(logpath, mode="a")
        info_file_handler.setLevel(level)
        logger.addHandler(info_file_handler)
    if displaying:
        console_handler = logging.StreamHandler()
        console_handler.setLevel(level)
        logger.addHandler(console_handler)
    logger.info(filepath)
    with open(filepath, "r") as f:
        logger.info(f.read())

    for f in package_files:
        logger.info(f)
        with open(f, "r") as package_f:
            logger.info(package_f.read())

    return logger


if __name__ == '__main__':

    makedirs(args.save)
    logger = get_logger(logpath=os.path.join(args.save, 'logs'), filepath=os.path.abspath(__file__))
    logger.info(args)

    device = torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')

    is_odenet = args.network == 'odenet'

    downsampling_layers = [
        nn.Conv2d(3, 20, 3, 1),
        norm(20),
        nn.ReLU(inplace=True),
        nn.Conv2d(20, 20, 4, 2, 1),
        norm(20),
        nn.ReLU(inplace=True),
        nn.Conv2d(20, 20, 4, 2, 1),
        norm(20),
        nn.ReLU(inplace=True),
        Flatten(),
    ]

    feature_layers = [ODEBlock(ODEfunc(196))] 
    fc_layers = [nn.Linear(196, 10)]
    # feature_layers = [ODEBlock(ODEfunc(900))] 
    # fc_layers = [nn.Linear(900, 10)]

    model = nn.Sequential(*downsampling_layers, *feature_layers, *fc_layers).to(device)

    logger.info(model)
    logger.info('Number of parameters: {}'.format(count_parameters(model)))

    criterion = nn.CrossEntropyLoss().to(device)

    train_loader, test_loader, train_eval_loader = get_cifar_loaders(
        args.data_aug, args.batch_size, args.test_batch_size
    )

    data_gen = inf_generator(train_loader)
    batches_per_epoch = len(train_loader)

    lr_fn = learning_rate_with_decay(
        args.batch_size, batch_denom=128, batches_per_epoch=batches_per_epoch, boundary_epochs=[60, 100, 140],
        decay_rates=[1, 0.1, 0.01, 0.001]
    )

    optimizer = torch.optim.SGD(model.parameters(), lr=args.lr, momentum=0.9)

    best_acc = 0
    batch_time_meter = RunningAverageMeter()
    f_nfe_meter = RunningAverageMeter()
    b_nfe_meter = RunningAverageMeter()
    end = time.time()

    for itr in range(args.nepochs * batches_per_epoch):

        for param_group in optimizer.param_groups:
            param_group['lr'] = lr_fn(itr)

        optimizer.zero_grad()
        x, y = data_gen.__next__()
        x = x.to(device)
        y = y.to(device)
        logits = model(x)
        loss = criterion(logits, y)

        if is_odenet:
            nfe_forward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        loss.backward()
        optimizer.step()

        if is_odenet:
            nfe_backward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        batch_time_meter.update(time.time() - end)
        if is_odenet:
            f_nfe_meter.update(nfe_forward)
            b_nfe_meter.update(nfe_backward)
        end = time.time()

        if itr % batches_per_epoch == 0:
            with torch.no_grad():
                train_acc = accuracy(model, train_eval_loader)
                val_acc = accuracy(model, test_loader)
                if val_acc > best_acc:
                    torch.save({'state_dict': model.state_dict(), 'args': args}, os.path.join(args.save, 'model.pth'))
                    best_acc = val_acc
                if best_acc > 0.85 and train_acc > 0.85:
                    break
                logger.info(
                    "Epoch {:04d} | Time {:.3f} ({:.3f}) | NFE-F {:.1f} | NFE-B {:.1f} | "
                    "Train Acc {:.4f} | Test Acc {:.4f}".format(
                        itr // batches_per_epoch, batch_time_meter.val, batch_time_meter.avg, f_nfe_meter.avg,
                        b_nfe_meter.avg, train_acc, val_acc
                    )
                )
    names = []
    params = []
    for name,param in model.named_parameters():
        names.append(name)
        params.append(param.detach().numpy())
    nn1 = dict({'Wb':params,'names':names})
    for name,param in model.named_buffers():
        names.append(name)
        params.append(param.detach().numpy())
    savemat("odecnn_cifar_tiny.mat",nn1)
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb  4 09:04:31 2021

@author: manzand
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 19 15:10:31 2021

@author: manzand
"""

import os
import argparse
import logging
import time
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms
from scipy.io import savemat

parser = argparse.ArgumentParser()
parser.add_argument('--network', type=str, choices=['resnet', 'odenet'], default='odenet')
parser.add_argument('--tol', type=float, default=1e-3)
parser.add_argument('--adjoint', type=eval, default=False, choices=[True, False])
parser.add_argument('--downsampling-method', type=str, default='conv', choices=['conv', 'res'])
parser.add_argument('--nepochs', type=int, default=200)
parser.add_argument('--data_aug', type=eval, default=False, choices=[True, False])
parser.add_argument('--lr', type=float, default=0.01)
parser.add_argument('--batch_size', type=int, default=128)
parser.add_argument('--test_batch_size', type=int, default=1000)

parser.add_argument('--save', type=str, default='../logs/cifartiny')
parser.add_argument('--debug', action='store_true')
parser.add_argument('--gpu', type=int, default=0)
args = parser.parse_args()

if args.adjoint:
    from torchdiffeq import odeint_adjoint as odeint
else:
    from torchdiffeq import odeint


def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


def norm(dim):
    return nn.BatchNorm2d(min(64, dim), dim)


class ConcatConv2d(nn.Module):

    def __init__(self, dim_in, dim_out, ksize=3, stride=1, padding=0, dilation=1, groups=1, bias=True, transpose=False):
        super(ConcatConv2d, self).__init__()
        module = nn.ConvTranspose2d if transpose else nn.Conv2d
        self._layer = module(
            dim_in + 1, dim_out, kernel_size=ksize, stride=stride, padding=padding, dilation=dilation, groups=groups,
            bias=bias
        )

    def forward(self, t, x):
        tt = torch.ones_like(x[:, :1, :, :]) * t
        ttx = torch.cat([tt, x], 1)
        return self._layer(ttx)


class ODEfunc(nn.Module):

    def __init__(self,dim):
        super(ODEfunc, self).__init__()
        self.fc1 = nn.Linear(dim,16)
        self.fc2 = nn.Linear(16, dim)
        self.nfe = 0

    def forward(self, t, x):
        self.nfe += 1
        # print('11111111111111111111')
        # print(x.size())
        out = self.fc1(x)
        # print('222222222222222222')
        # print(out.size())
        out = self.fc2(out)
        return out


class ODEBlock(nn.Module):

    def __init__(self, odefunc):
        super(ODEBlock, self).__init__()
        self.odefunc = odefunc
        self.integration_time = torch.tensor([0, 1]).float()

    def forward(self, x):
        self.integration_time = self.integration_time.type_as(x)
        out = odeint(self.odefunc, x, self.integration_time, rtol=args.tol, atol=args.tol)
        return out[1]

    @property
    def nfe(self):
        return self.odefunc.nfe

    @nfe.setter
    def nfe(self, value):
        self.odefunc.nfe = value


class Flatten(nn.Module):

    def __init__(self):
        super(Flatten, self).__init__()

    def forward(self, x):
        shape = torch.prod(torch.tensor(x.shape[1:])).item()
        xout = x.view(-1, shape)
        # print(xout.size())
        return xout


class RunningAverageMeter(object):
    """Computes and stores the average and current value"""

    def __init__(self, momentum=0.99):
        self.momentum = momentum
        self.reset()

    def reset(self):
        self.val = None
        self.avg = 0

    def update(self, val):
        if self.val is None:
            self.avg = val
        else:
            self.avg = self.avg * self.momentum + val * (1 - self.momentum)
        self.val = val


def get_cifar_loaders(data_aug=False, batch_size=32, test_batch_size=1000, perc=1.0):
    if data_aug:
        transform_train = transforms.Compose([
            transforms.RandomCrop(28, padding=4),
            transforms.ToTensor(),
        ])
    else:
        transform_train = transforms.Compose([
            transforms.ToTensor(),
        ])

    transform_test = transforms.Compose([
        transforms.ToTensor(),
    ])

    train_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_train), batch_size=batch_size,
        shuffle=True, num_workers=2, drop_last=True
    )

    train_eval_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    test_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=False, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    return train_loader, test_loader, train_eval_loader


def inf_generator(iterable):
    """Allows training with DataLoaders in a single infinite loop:
        for i, (x, y) in enumerate(inf_generator(train_loader)):
    """
    iterator = iterable.__iter__()
    while True:
        try:
            yield iterator.__next__()
        except StopIteration:
            iterator = iterable.__iter__()


def learning_rate_with_decay(batch_size, batch_denom, batches_per_epoch, boundary_epochs, decay_rates):
    initial_learning_rate = args.lr * batch_size / batch_denom

    boundaries = [int(batches_per_epoch * epoch) for epoch in boundary_epochs]
    vals = [initial_learning_rate * decay for decay in decay_rates]

    def learning_rate_fn(itr):
        lt = [itr < b for b in boundaries] + [True]
        i = np.argmax(lt)
        return vals[i]

    return learning_rate_fn


def one_hot(x, K):
    return np.array(x[:, None] == np.arange(K)[None, :], dtype=int)


def accuracy(model, dataset_loader):
    total_correct = 0
    for x, y in dataset_loader:
        x = x.to(device)
        y = one_hot(np.array(y.numpy()), 10)

        target_class = np.argmax(y, axis=1)
        predicted_class = np.argmax(model(x).cpu().detach().numpy(), axis=1)
        total_correct += np.sum(predicted_class == target_class)
    return total_correct / len(dataset_loader.dataset)


def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)


def makedirs(dirname):
    if not os.path.exists(dirname):
        os.makedirs(dirname)


def get_logger(logpath, filepath, package_files=[], displaying=True, saving=True, debug=False):
    logger = logging.getLogger()
    if debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logger.setLevel(level)
    if saving:
        info_file_handler = logging.FileHandler(logpath, mode="a")
        info_file_handler.setLevel(level)
        logger.addHandler(info_file_handler)
    if displaying:
        console_handler = logging.StreamHandler()
        console_handler.setLevel(level)
        logger.addHandler(console_handler)
    logger.info(filepath)
    with open(filepath, "r") as f:
        logger.info(f.read())

    for f in package_files:
        logger.info(f)
        with open(f, "r") as package_f:
            logger.info(package_f.read())

    return logger


if __name__ == '__main__':

    makedirs(args.save)
    logger = get_logger(logpath=os.path.join(args.save, 'logs'), filepath=os.path.abspath(__file__))
    logger.info(args)

    device = torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')

    is_odenet = args.network == 'odenet'

    downsampling_layers = [
        nn.Conv2d(3, 20, 3, 1),
        norm(20),
        nn.ReLU(inplace=True),
        nn.Conv2d(20, 20, 4, 2, 1),
        norm(20),
        nn.ReLU(inplace=True),
        nn.Conv2d(20, 20, 4, 2, 1),
        norm(20),
        nn.ReLU(inplace=True),
        Flatten(),
    ]

    feature_layers = [ODEBlock(ODEfunc(196))] 
    fc_layers = [nn.Linear(196, 10)]
    # feature_layers = [ODEBlock(ODEfunc(900))] 
    # fc_layers = [nn.Linear(900, 10)]

    model = nn.Sequential(*downsampling_layers, *feature_layers, *fc_layers).to(device)

    logger.info(model)
    logger.info('Number of parameters: {}'.format(count_parameters(model)))

    criterion = nn.CrossEntropyLoss().to(device)

    train_loader, test_loader, train_eval_loader = get_cifar_loaders(
        args.data_aug, args.batch_size, args.test_batch_size
    )

    data_gen = inf_generator(train_loader)
    batches_per_epoch = len(train_loader)

    lr_fn = learning_rate_with_decay(
        args.batch_size, batch_denom=128, batches_per_epoch=batches_per_epoch, boundary_epochs=[60, 100, 140],
        decay_rates=[1, 0.1, 0.01, 0.001]
    )

    optimizer = torch.optim.SGD(model.parameters(), lr=args.lr, momentum=0.9)

    best_acc = 0
    batch_time_meter = RunningAverageMeter()
    f_nfe_meter = RunningAverageMeter()
    b_nfe_meter = RunningAverageMeter()
    end = time.time()

    for itr in range(args.nepochs * batches_per_epoch):

        for param_group in optimizer.param_groups:
            param_group['lr'] = lr_fn(itr)

        optimizer.zero_grad()
        x, y = data_gen.__next__()
        x = x.to(device)
        y = y.to(device)
        logits = model(x)
        loss = criterion(logits, y)

        if is_odenet:
            nfe_forward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        loss.backward()
        optimizer.step()

        if is_odenet:
            nfe_backward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        batch_time_meter.update(time.time() - end)
        if is_odenet:
            f_nfe_meter.update(nfe_forward)
            b_nfe_meter.update(nfe_backward)
        end = time.time()

        if itr % batches_per_epoch == 0:
            with torch.no_grad():
                train_acc = accuracy(model, train_eval_loader)
                val_acc = accuracy(model, test_loader)
                if val_acc > best_acc:
                    torch.save({'state_dict': model.state_dict(), 'args': args}, os.path.join(args.save, 'model.pth'))
                    best_acc = val_acc
                if best_acc > 0.85 and train_acc > 0.85:
                    break
                logger.info(
                    "Epoch {:04d} | Time {:.3f} ({:.3f}) | NFE-F {:.1f} | NFE-B {:.1f} | "
                    "Train Acc {:.4f} | Test Acc {:.4f}".format(
                        itr // batches_per_epoch, batch_time_meter.val, batch_time_meter.avg, f_nfe_meter.avg,
                        b_nfe_meter.avg, train_acc, val_acc
                    )
                )
    names = []
    params = []
    for name,param in model.named_parameters():
        names.append(name)
        params.append(param.detach().numpy())
    nn1 = dict({'Wb':params,'names':names})
    for name,param in model.named_buffers():
        names.append(name)
        params.append(param.detach().numpy())
    savemat("odecnn_cifar_tiny.mat",nn1)
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb  4 09:04:31 2021

@author: manzand
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 19 15:10:31 2021

@author: manzand
"""

import os
import argparse
import logging
import time
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms
from scipy.io import savemat

parser = argparse.ArgumentParser()
parser.add_argument('--network', type=str, choices=['resnet', 'odenet'], default='odenet')
parser.add_argument('--tol', type=float, default=1e-3)
parser.add_argument('--adjoint', type=eval, default=False, choices=[True, False])
parser.add_argument('--downsampling-method', type=str, default='conv', choices=['conv', 'res'])
parser.add_argument('--nepochs', type=int, default=200)
parser.add_argument('--data_aug', type=eval, default=False, choices=[True, False])
parser.add_argument('--lr', type=float, default=0.01)
parser.add_argument('--batch_size', type=int, default=128)
parser.add_argument('--test_batch_size', type=int, default=1000)

parser.add_argument('--save', type=str, default='../logs/cifartiny')
parser.add_argument('--debug', action='store_true')
parser.add_argument('--gpu', type=int, default=0)
args = parser.parse_args()

if args.adjoint:
    from torchdiffeq import odeint_adjoint as odeint
else:
    from torchdiffeq import odeint


def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


def norm(dim):
    return nn.BatchNorm2d(min(64, dim), dim)


class ConcatConv2d(nn.Module):

    def __init__(self, dim_in, dim_out, ksize=3, stride=1, padding=0, dilation=1, groups=1, bias=True, transpose=False):
        super(ConcatConv2d, self).__init__()
        module = nn.ConvTranspose2d if transpose else nn.Conv2d
        self._layer = module(
            dim_in + 1, dim_out, kernel_size=ksize, stride=stride, padding=padding, dilation=dilation, groups=groups,
            bias=bias
        )

    def forward(self, t, x):
        tt = torch.ones_like(x[:, :1, :, :]) * t
        ttx = torch.cat([tt, x], 1)
        return self._layer(ttx)


class ODEfunc(nn.Module):

    def __init__(self,dim):
        super(ODEfunc, self).__init__()
        self.fc1 = nn.Linear(dim,16)
        self.fc2 = nn.Linear(16, dim)
        self.nfe = 0

    def forward(self, t, x):
        self.nfe += 1
        # print('11111111111111111111')
        # print(x.size())
        out = self.fc1(x)
        # print('222222222222222222')
        # print(out.size())
        out = self.fc2(out)
        return out


class ODEBlock(nn.Module):

    def __init__(self, odefunc):
        super(ODEBlock, self).__init__()
        self.odefunc = odefunc
        self.integration_time = torch.tensor([0, 1]).float()

    def forward(self, x):
        self.integration_time = self.integration_time.type_as(x)
        out = odeint(self.odefunc, x, self.integration_time, rtol=args.tol, atol=args.tol)
        return out[1]

    @property
    def nfe(self):
        return self.odefunc.nfe

    @nfe.setter
    def nfe(self, value):
        self.odefunc.nfe = value


class Flatten(nn.Module):

    def __init__(self):
        super(Flatten, self).__init__()

    def forward(self, x):
        shape = torch.prod(torch.tensor(x.shape[1:])).item()
        xout = x.view(-1, shape)
        # print(xout.size())
        return xout


class RunningAverageMeter(object):
    """Computes and stores the average and current value"""

    def __init__(self, momentum=0.99):
        self.momentum = momentum
        self.reset()

    def reset(self):
        self.val = None
        self.avg = 0

    def update(self, val):
        if self.val is None:
            self.avg = val
        else:
            self.avg = self.avg * self.momentum + val * (1 - self.momentum)
        self.val = val


def get_cifar_loaders(data_aug=False, batch_size=32, test_batch_size=1000, perc=1.0):
    if data_aug:
        transform_train = transforms.Compose([
            transforms.RandomCrop(28, padding=4),
            transforms.ToTensor(),
        ])
    else:
        transform_train = transforms.Compose([
            transforms.ToTensor(),
        ])

    transform_test = transforms.Compose([
        transforms.ToTensor(),
    ])

    train_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_train), batch_size=batch_size,
        shuffle=True, num_workers=2, drop_last=True
    )

    train_eval_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    test_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=False, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    return train_loader, test_loader, train_eval_loader


def inf_generator(iterable):
    """Allows training with DataLoaders in a single infinite loop:
        for i, (x, y) in enumerate(inf_generator(train_loader)):
    """
    iterator = iterable.__iter__()
    while True:
        try:
            yield iterator.__next__()
        except StopIteration:
            iterator = iterable.__iter__()


def learning_rate_with_decay(batch_size, batch_denom, batches_per_epoch, boundary_epochs, decay_rates):
    initial_learning_rate = args.lr * batch_size / batch_denom

    boundaries = [int(batches_per_epoch * epoch) for epoch in boundary_epochs]
    vals = [initial_learning_rate * decay for decay in decay_rates]

    def learning_rate_fn(itr):
        lt = [itr < b for b in boundaries] + [True]
        i = np.argmax(lt)
        return vals[i]

    return learning_rate_fn


def one_hot(x, K):
    return np.array(x[:, None] == np.arange(K)[None, :], dtype=int)


def accuracy(model, dataset_loader):
    total_correct = 0
    for x, y in dataset_loader:
        x = x.to(device)
        y = one_hot(np.array(y.numpy()), 10)

        target_class = np.argmax(y, axis=1)
        predicted_class = np.argmax(model(x).cpu().detach().numpy(), axis=1)
        total_correct += np.sum(predicted_class == target_class)
    return total_correct / len(dataset_loader.dataset)


def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)


def makedirs(dirname):
    if not os.path.exists(dirname):
        os.makedirs(dirname)


def get_logger(logpath, filepath, package_files=[], displaying=True, saving=True, debug=False):
    logger = logging.getLogger()
    if debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logger.setLevel(level)
    if saving:
        info_file_handler = logging.FileHandler(logpath, mode="a")
        info_file_handler.setLevel(level)
        logger.addHandler(info_file_handler)
    if displaying:
        console_handler = logging.StreamHandler()
        console_handler.setLevel(level)
        logger.addHandler(console_handler)
    logger.info(filepath)
    with open(filepath, "r") as f:
        logger.info(f.read())

    for f in package_files:
        logger.info(f)
        with open(f, "r") as package_f:
            logger.info(package_f.read())

    return logger


if __name__ == '__main__':

    makedirs(args.save)
    logger = get_logger(logpath=os.path.join(args.save, 'logs'), filepath=os.path.abspath(__file__))
    logger.info(args)

    device = torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')

    is_odenet = args.network == 'odenet'

    downsampling_layers = [
        nn.Conv2d(3, 20, 3, 1),
        norm(20),
        nn.ReLU(inplace=True),
        nn.Conv2d(20, 20, 4, 2, 1),
        norm(20),
        nn.ReLU(inplace=True),
        nn.Conv2d(20, 20, 4, 2, 1),
        norm(20),
        nn.ReLU(inplace=True),
        Flatten(),
    ]

    feature_layers = [ODEBlock(ODEfunc(196))] 
    fc_layers = [nn.Linear(196, 10)]
    # feature_layers = [ODEBlock(ODEfunc(900))] 
    # fc_layers = [nn.Linear(900, 10)]

    model = nn.Sequential(*downsampling_layers, *feature_layers, *fc_layers).to(device)

    logger.info(model)
    logger.info('Number of parameters: {}'.format(count_parameters(model)))

    criterion = nn.CrossEntropyLoss().to(device)

    train_loader, test_loader, train_eval_loader = get_cifar_loaders(
        args.data_aug, args.batch_size, args.test_batch_size
    )

    data_gen = inf_generator(train_loader)
    batches_per_epoch = len(train_loader)

    lr_fn = learning_rate_with_decay(
        args.batch_size, batch_denom=128, batches_per_epoch=batches_per_epoch, boundary_epochs=[60, 100, 140],
        decay_rates=[1, 0.1, 0.01, 0.001]
    )

    optimizer = torch.optim.SGD(model.parameters(), lr=args.lr, momentum=0.9)

    best_acc = 0
    batch_time_meter = RunningAverageMeter()
    f_nfe_meter = RunningAverageMeter()
    b_nfe_meter = RunningAverageMeter()
    end = time.time()

    for itr in range(args.nepochs * batches_per_epoch):

        for param_group in optimizer.param_groups:
            param_group['lr'] = lr_fn(itr)

        optimizer.zero_grad()
        x, y = data_gen.__next__()
        x = x.to(device)
        y = y.to(device)
        logits = model(x)
        loss = criterion(logits, y)

        if is_odenet:
            nfe_forward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        loss.backward()
        optimizer.step()

        if is_odenet:
            nfe_backward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        batch_time_meter.update(time.time() - end)
        if is_odenet:
            f_nfe_meter.update(nfe_forward)
            b_nfe_meter.update(nfe_backward)
        end = time.time()

        if itr % batches_per_epoch == 0:
            with torch.no_grad():
                train_acc = accuracy(model, train_eval_loader)
                val_acc = accuracy(model, test_loader)
                if val_acc > best_acc:
                    torch.save({'state_dict': model.state_dict(), 'args': args}, os.path.join(args.save, 'model.pth'))
                    best_acc = val_acc
                if best_acc > 0.85 and train_acc > 0.85:
                    break
                logger.info(
                    "Epoch {:04d} | Time {:.3f} ({:.3f}) | NFE-F {:.1f} | NFE-B {:.1f} | "
                    "Train Acc {:.4f} | Test Acc {:.4f}".format(
                        itr // batches_per_epoch, batch_time_meter.val, batch_time_meter.avg, f_nfe_meter.avg,
                        b_nfe_meter.avg, train_acc, val_acc
                    )
                )
    names = []
    params = []
    for name,param in model.named_parameters():
        names.append(name)
        params.append(param.detach().numpy())
    nn1 = dict({'Wb':params,'names':names})
    for name,param in model.named_buffers():
        names.append(name)
        params.append(param.detach().numpy())
    savemat("odecnn_cifar_tiny.mat",nn1)
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb  4 09:04:31 2021

@author: manzand
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 19 15:10:31 2021

@author: manzand
"""

import os
import argparse
import logging
import time
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms
from scipy.io import savemat

parser = argparse.ArgumentParser()
parser.add_argument('--network', type=str, choices=['resnet', 'odenet'], default='odenet')
parser.add_argument('--tol', type=float, default=1e-3)
parser.add_argument('--adjoint', type=eval, default=False, choices=[True, False])
parser.add_argument('--downsampling-method', type=str, default='conv', choices=['conv', 'res'])
parser.add_argument('--nepochs', type=int, default=200)
parser.add_argument('--data_aug', type=eval, default=False, choices=[True, False])
parser.add_argument('--lr', type=float, default=0.01)
parser.add_argument('--batch_size', type=int, default=128)
parser.add_argument('--test_batch_size', type=int, default=1000)

parser.add_argument('--save', type=str, default='../logs/cifartiny')
parser.add_argument('--debug', action='store_true')
parser.add_argument('--gpu', type=int, default=0)
args = parser.parse_args()

if args.adjoint:
    from torchdiffeq import odeint_adjoint as odeint
else:
    from torchdiffeq import odeint


def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


def norm(dim):
    return nn.BatchNorm2d(min(64, dim), dim)


class ConcatConv2d(nn.Module):

    def __init__(self, dim_in, dim_out, ksize=3, stride=1, padding=0, dilation=1, groups=1, bias=True, transpose=False):
        super(ConcatConv2d, self).__init__()
        module = nn.ConvTranspose2d if transpose else nn.Conv2d
        self._layer = module(
            dim_in + 1, dim_out, kernel_size=ksize, stride=stride, padding=padding, dilation=dilation, groups=groups,
            bias=bias
        )

    def forward(self, t, x):
        tt = torch.ones_like(x[:, :1, :, :]) * t
        ttx = torch.cat([tt, x], 1)
        return self._layer(ttx)


class ODEfunc(nn.Module):

    def __init__(self,dim):
        super(ODEfunc, self).__init__()
        self.fc1 = nn.Linear(dim,16)
        self.fc2 = nn.Linear(16, dim)
        self.nfe = 0

    def forward(self, t, x):
        self.nfe += 1
        # print('11111111111111111111')
        # print(x.size())
        out = self.fc1(x)
        # print('222222222222222222')
        # print(out.size())
        out = self.fc2(out)
        return out


class ODEBlock(nn.Module):

    def __init__(self, odefunc):
        super(ODEBlock, self).__init__()
        self.odefunc = odefunc
        self.integration_time = torch.tensor([0, 1]).float()

    def forward(self, x):
        self.integration_time = self.integration_time.type_as(x)
        out = odeint(self.odefunc, x, self.integration_time, rtol=args.tol, atol=args.tol)
        return out[1]

    @property
    def nfe(self):
        return self.odefunc.nfe

    @nfe.setter
    def nfe(self, value):
        self.odefunc.nfe = value


class Flatten(nn.Module):

    def __init__(self):
        super(Flatten, self).__init__()

    def forward(self, x):
        shape = torch.prod(torch.tensor(x.shape[1:])).item()
        xout = x.view(-1, shape)
        # print(xout.size())
        return xout


class RunningAverageMeter(object):
    """Computes and stores the average and current value"""

    def __init__(self, momentum=0.99):
        self.momentum = momentum
        self.reset()

    def reset(self):
        self.val = None
        self.avg = 0

    def update(self, val):
        if self.val is None:
            self.avg = val
        else:
            self.avg = self.avg * self.momentum + val * (1 - self.momentum)
        self.val = val


def get_cifar_loaders(data_aug=False, batch_size=32, test_batch_size=1000, perc=1.0):
    if data_aug:
        transform_train = transforms.Compose([
            transforms.RandomCrop(28, padding=4),
            transforms.ToTensor(),
        ])
    else:
        transform_train = transforms.Compose([
            transforms.ToTensor(),
        ])

    transform_test = transforms.Compose([
        transforms.ToTensor(),
    ])

    train_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_train), batch_size=batch_size,
        shuffle=True, num_workers=2, drop_last=True
    )

    train_eval_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    test_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=False, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    return train_loader, test_loader, train_eval_loader


def inf_generator(iterable):
    """Allows training with DataLoaders in a single infinite loop:
        for i, (x, y) in enumerate(inf_generator(train_loader)):
    """
    iterator = iterable.__iter__()
    while True:
        try:
            yield iterator.__next__()
        except StopIteration:
            iterator = iterable.__iter__()


def learning_rate_with_decay(batch_size, batch_denom, batches_per_epoch, boundary_epochs, decay_rates):
    initial_learning_rate = args.lr * batch_size / batch_denom

    boundaries = [int(batches_per_epoch * epoch) for epoch in boundary_epochs]
    vals = [initial_learning_rate * decay for decay in decay_rates]

    def learning_rate_fn(itr):
        lt = [itr < b for b in boundaries] + [True]
        i = np.argmax(lt)
        return vals[i]

    return learning_rate_fn


def one_hot(x, K):
    return np.array(x[:, None] == np.arange(K)[None, :], dtype=int)


def accuracy(model, dataset_loader):
    total_correct = 0
    for x, y in dataset_loader:
        x = x.to(device)
        y = one_hot(np.array(y.numpy()), 10)

        target_class = np.argmax(y, axis=1)
        predicted_class = np.argmax(model(x).cpu().detach().numpy(), axis=1)
        total_correct += np.sum(predicted_class == target_class)
    return total_correct / len(dataset_loader.dataset)


def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)


def makedirs(dirname):
    if not os.path.exists(dirname):
        os.makedirs(dirname)


def get_logger(logpath, filepath, package_files=[], displaying=True, saving=True, debug=False):
    logger = logging.getLogger()
    if debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logger.setLevel(level)
    if saving:
        info_file_handler = logging.FileHandler(logpath, mode="a")
        info_file_handler.setLevel(level)
        logger.addHandler(info_file_handler)
    if displaying:
        console_handler = logging.StreamHandler()
        console_handler.setLevel(level)
        logger.addHandler(console_handler)
    logger.info(filepath)
    with open(filepath, "r") as f:
        logger.info(f.read())

    for f in package_files:
        logger.info(f)
        with open(f, "r") as package_f:
            logger.info(package_f.read())

    return logger


if __name__ == '__main__':

    makedirs(args.save)
    logger = get_logger(logpath=os.path.join(args.save, 'logs'), filepath=os.path.abspath(__file__))
    logger.info(args)

    device = torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')

    is_odenet = args.network == 'odenet'

    downsampling_layers = [
        nn.Conv2d(3, 20, 3, 1),
        norm(20),
        nn.ReLU(inplace=True),
        nn.Conv2d(20, 20, 4, 2, 1),
        norm(20),
        nn.ReLU(inplace=True),
        nn.Conv2d(20, 20, 4, 2, 1),
        norm(20),
        nn.ReLU(inplace=True),
        Flatten(),
    ]

    feature_layers = [ODEBlock(ODEfunc(196))] 
    fc_layers = [nn.Linear(196, 10)]
    # feature_layers = [ODEBlock(ODEfunc(900))] 
    # fc_layers = [nn.Linear(900, 10)]

    model = nn.Sequential(*downsampling_layers, *feature_layers, *fc_layers).to(device)

    logger.info(model)
    logger.info('Number of parameters: {}'.format(count_parameters(model)))

    criterion = nn.CrossEntropyLoss().to(device)

    train_loader, test_loader, train_eval_loader = get_cifar_loaders(
        args.data_aug, args.batch_size, args.test_batch_size
    )

    data_gen = inf_generator(train_loader)
    batches_per_epoch = len(train_loader)

    lr_fn = learning_rate_with_decay(
        args.batch_size, batch_denom=128, batches_per_epoch=batches_per_epoch, boundary_epochs=[60, 100, 140],
        decay_rates=[1, 0.1, 0.01, 0.001]
    )

    optimizer = torch.optim.SGD(model.parameters(), lr=args.lr, momentum=0.9)

    best_acc = 0
    batch_time_meter = RunningAverageMeter()
    f_nfe_meter = RunningAverageMeter()
    b_nfe_meter = RunningAverageMeter()
    end = time.time()

    for itr in range(args.nepochs * batches_per_epoch):

        for param_group in optimizer.param_groups:
            param_group['lr'] = lr_fn(itr)

        optimizer.zero_grad()
        x, y = data_gen.__next__()
        x = x.to(device)
        y = y.to(device)
        logits = model(x)
        loss = criterion(logits, y)

        if is_odenet:
            nfe_forward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        loss.backward()
        optimizer.step()

        if is_odenet:
            nfe_backward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        batch_time_meter.update(time.time() - end)
        if is_odenet:
            f_nfe_meter.update(nfe_forward)
            b_nfe_meter.update(nfe_backward)
        end = time.time()

        if itr % batches_per_epoch == 0:
            with torch.no_grad():
                train_acc = accuracy(model, train_eval_loader)
                val_acc = accuracy(model, test_loader)
                if val_acc > best_acc:
                    torch.save({'state_dict': model.state_dict(), 'args': args}, os.path.join(args.save, 'model.pth'))
                    best_acc = val_acc
                if best_acc > 0.85 and train_acc > 0.85:
                    break
                logger.info(
                    "Epoch {:04d} | Time {:.3f} ({:.3f}) | NFE-F {:.1f} | NFE-B {:.1f} | "
                    "Train Acc {:.4f} | Test Acc {:.4f}".format(
                        itr // batches_per_epoch, batch_time_meter.val, batch_time_meter.avg, f_nfe_meter.avg,
                        b_nfe_meter.avg, train_acc, val_acc
                    )
                )
    names = []
    params = []
    for name,param in model.named_parameters():
        names.append(name)
        params.append(param.detach().numpy())
    nn1 = dict({'Wb':params,'names':names})
    for name,param in model.named_buffers():
        names.append(name)
        params.append(param.detach().numpy())
    savemat("odecnn_cifar_tiny.mat",nn1)
Namespace(adjoint=False, batch_size=128, data_aug=False, debug=False, downsampling_method='conv', gpu=0, lr=0.01, nepochs=200, network='odenet', save='../logs/cifartiny', test_batch_size=1000, tol=0.001)
Namespace(adjoint=False, batch_size=128, data_aug=False, debug=False, downsampling_method='conv', gpu=0, lr=0.01, nepochs=200, network='odenet', save='../logs/cifartiny', test_batch_size=1000, tol=0.001)
Namespace(adjoint=False, batch_size=128, data_aug=False, debug=False, downsampling_method='conv', gpu=0, lr=0.01, nepochs=200, network='odenet', save='../logs/cifartiny', test_batch_size=1000, tol=0.001)
Namespace(adjoint=False, batch_size=128, data_aug=False, debug=False, downsampling_method='conv', gpu=0, lr=0.01, nepochs=200, network='odenet', save='../logs/cifartiny', test_batch_size=1000, tol=0.001)
Namespace(adjoint=False, batch_size=128, data_aug=False, debug=False, downsampling_method='conv', gpu=0, lr=0.01, nepochs=200, network='odenet', save='../logs/cifartiny', test_batch_size=1000, tol=0.001)
Sequential(
  (0): Conv2d(3, 20, kernel_size=(3, 3), stride=(1, 1))
  (1): BatchNorm2d(20, eps=20, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(20, 20, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (4): BatchNorm2d(20, eps=20, momentum=0.1, affine=True, track_running_stats=True)
  (5): ReLU(inplace=True)
  (6): Conv2d(20, 20, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (7): BatchNorm2d(20, eps=20, momentum=0.1, affine=True, track_running_stats=True)
  (8): ReLU(inplace=True)
  (9): Flatten()
  (10): ODEBlock(
    (odefunc): ODEfunc(
      (fc1): Linear(in_features=196, out_features=16, bias=True)
      (fc2): Linear(in_features=16, out_features=196, bias=True)
    )
  )
  (11): Linear(in_features=196, out_features=10, bias=True)
)
Sequential(
  (0): Conv2d(3, 20, kernel_size=(3, 3), stride=(1, 1))
  (1): BatchNorm2d(20, eps=20, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(20, 20, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (4): BatchNorm2d(20, eps=20, momentum=0.1, affine=True, track_running_stats=True)
  (5): ReLU(inplace=True)
  (6): Conv2d(20, 20, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (7): BatchNorm2d(20, eps=20, momentum=0.1, affine=True, track_running_stats=True)
  (8): ReLU(inplace=True)
  (9): Flatten()
  (10): ODEBlock(
    (odefunc): ODEfunc(
      (fc1): Linear(in_features=196, out_features=16, bias=True)
      (fc2): Linear(in_features=16, out_features=196, bias=True)
    )
  )
  (11): Linear(in_features=196, out_features=10, bias=True)
)
Sequential(
  (0): Conv2d(3, 20, kernel_size=(3, 3), stride=(1, 1))
  (1): BatchNorm2d(20, eps=20, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(20, 20, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (4): BatchNorm2d(20, eps=20, momentum=0.1, affine=True, track_running_stats=True)
  (5): ReLU(inplace=True)
  (6): Conv2d(20, 20, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (7): BatchNorm2d(20, eps=20, momentum=0.1, affine=True, track_running_stats=True)
  (8): ReLU(inplace=True)
  (9): Flatten()
  (10): ODEBlock(
    (odefunc): ODEfunc(
      (fc1): Linear(in_features=196, out_features=16, bias=True)
      (fc2): Linear(in_features=16, out_features=196, bias=True)
    )
  )
  (11): Linear(in_features=196, out_features=10, bias=True)
)
Sequential(
  (0): Conv2d(3, 20, kernel_size=(3, 3), stride=(1, 1))
  (1): BatchNorm2d(20, eps=20, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(20, 20, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (4): BatchNorm2d(20, eps=20, momentum=0.1, affine=True, track_running_stats=True)
  (5): ReLU(inplace=True)
  (6): Conv2d(20, 20, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (7): BatchNorm2d(20, eps=20, momentum=0.1, affine=True, track_running_stats=True)
  (8): ReLU(inplace=True)
  (9): Flatten()
  (10): ODEBlock(
    (odefunc): ODEfunc(
      (fc1): Linear(in_features=196, out_features=16, bias=True)
      (fc2): Linear(in_features=16, out_features=196, bias=True)
    )
  )
  (11): Linear(in_features=196, out_features=10, bias=True)
)
Sequential(
  (0): Conv2d(3, 20, kernel_size=(3, 3), stride=(1, 1))
  (1): BatchNorm2d(20, eps=20, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(20, 20, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (4): BatchNorm2d(20, eps=20, momentum=0.1, affine=True, track_running_stats=True)
  (5): ReLU(inplace=True)
  (6): Conv2d(20, 20, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (7): BatchNorm2d(20, eps=20, momentum=0.1, affine=True, track_running_stats=True)
  (8): ReLU(inplace=True)
  (9): Flatten()
  (10): ODEBlock(
    (odefunc): ODEfunc(
      (fc1): Linear(in_features=196, out_features=16, bias=True)
      (fc2): Linear(in_features=16, out_features=196, bias=True)
    )
  )
  (11): Linear(in_features=196, out_features=10, bias=True)
)
Number of parameters: 21974
Number of parameters: 21974
Number of parameters: 21974
Number of parameters: 21974
Number of parameters: 21974
/home/manzand/Documents/Python/neuralODE_examples/cifar/odenet_cifar_example_tiny.py
/home/manzand/Documents/Python/neuralODE_examples/cifar/odenet_cifar_example_tiny.py
/home/manzand/Documents/Python/neuralODE_examples/cifar/odenet_cifar_example_tiny.py
/home/manzand/Documents/Python/neuralODE_examples/cifar/odenet_cifar_example_tiny.py
/home/manzand/Documents/Python/neuralODE_examples/cifar/odenet_cifar_example_tiny.py
/home/manzand/Documents/Python/neuralODE_examples/cifar/odenet_cifar_example_tiny.py
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb  4 09:04:31 2021

@author: manzand
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 19 15:10:31 2021

@author: manzand
"""

import os
import argparse
import logging
import time
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms
from scipy.io import savemat

parser = argparse.ArgumentParser()
parser.add_argument('--network', type=str, choices=['resnet', 'odenet'], default='odenet')
parser.add_argument('--tol', type=float, default=1e-3)
parser.add_argument('--adjoint', type=eval, default=False, choices=[True, False])
parser.add_argument('--downsampling-method', type=str, default='conv', choices=['conv', 'res'])
parser.add_argument('--nepochs', type=int, default=200)
parser.add_argument('--data_aug', type=eval, default=False, choices=[True, False])
parser.add_argument('--lr', type=float, default=0.01)
parser.add_argument('--batch_size', type=int, default=128)
parser.add_argument('--test_batch_size', type=int, default=1000)

parser.add_argument('--save', type=str, default='../logs/cifartiny')
parser.add_argument('--debug', action='store_true')
parser.add_argument('--gpu', type=int, default=0)
args = parser.parse_args()

if args.adjoint:
    from torchdiffeq import odeint_adjoint as odeint
else:
    from torchdiffeq import odeint


def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


def norm(dim):
    return nn.BatchNorm2d(min(64, dim), dim)


class ConcatConv2d(nn.Module):

    def __init__(self, dim_in, dim_out, ksize=3, stride=1, padding=0, dilation=1, groups=1, bias=True, transpose=False):
        super(ConcatConv2d, self).__init__()
        module = nn.ConvTranspose2d if transpose else nn.Conv2d
        self._layer = module(
            dim_in + 1, dim_out, kernel_size=ksize, stride=stride, padding=padding, dilation=dilation, groups=groups,
            bias=bias
        )

    def forward(self, t, x):
        tt = torch.ones_like(x[:, :1, :, :]) * t
        ttx = torch.cat([tt, x], 1)
        return self._layer(ttx)


class ODEfunc(nn.Module):

    def __init__(self,dim):
        super(ODEfunc, self).__init__()
        self.fc1 = nn.Linear(dim,16)
        self.fc2 = nn.Linear(16, dim)
        self.nfe = 0

    def forward(self, t, x):
        self.nfe += 1
        # print('11111111111111111111')
        # print(x.size())
        out = self.fc1(x)
        # print('222222222222222222')
        # print(out.size())
        out = self.fc2(out)
        return out


class ODEBlock(nn.Module):

    def __init__(self, odefunc):
        super(ODEBlock, self).__init__()
        self.odefunc = odefunc
        self.integration_time = torch.tensor([0, 1]).float()

    def forward(self, x):
        self.integration_time = self.integration_time.type_as(x)
        out = odeint(self.odefunc, x, self.integration_time, rtol=args.tol, atol=args.tol)
        return out[1]

    @property
    def nfe(self):
        return self.odefunc.nfe

    @nfe.setter
    def nfe(self, value):
        self.odefunc.nfe = value


class Flatten(nn.Module):

    def __init__(self):
        super(Flatten, self).__init__()

    def forward(self, x):
        shape = torch.prod(torch.tensor(x.shape[1:])).item()
        xout = x.view(-1, shape)
        # print(xout.size())
        return xout


class RunningAverageMeter(object):
    """Computes and stores the average and current value"""

    def __init__(self, momentum=0.99):
        self.momentum = momentum
        self.reset()

    def reset(self):
        self.val = None
        self.avg = 0

    def update(self, val):
        if self.val is None:
            self.avg = val
        else:
            self.avg = self.avg * self.momentum + val * (1 - self.momentum)
        self.val = val


def get_cifar_loaders(data_aug=False, batch_size=32, test_batch_size=1000, perc=1.0):
    if data_aug:
        transform_train = transforms.Compose([
            transforms.RandomCrop(28, padding=4),
            transforms.ToTensor(),
        ])
    else:
        transform_train = transforms.Compose([
            transforms.ToTensor(),
        ])

    transform_test = transforms.Compose([
        transforms.ToTensor(),
    ])

    train_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_train), batch_size=batch_size,
        shuffle=True, num_workers=2, drop_last=True
    )

    train_eval_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    test_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=False, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    return train_loader, test_loader, train_eval_loader


def inf_generator(iterable):
    """Allows training with DataLoaders in a single infinite loop:
        for i, (x, y) in enumerate(inf_generator(train_loader)):
    """
    iterator = iterable.__iter__()
    while True:
        try:
            yield iterator.__next__()
        except StopIteration:
            iterator = iterable.__iter__()


def learning_rate_with_decay(batch_size, batch_denom, batches_per_epoch, boundary_epochs, decay_rates):
    initial_learning_rate = args.lr * batch_size / batch_denom

    boundaries = [int(batches_per_epoch * epoch) for epoch in boundary_epochs]
    vals = [initial_learning_rate * decay for decay in decay_rates]

    def learning_rate_fn(itr):
        lt = [itr < b for b in boundaries] + [True]
        i = np.argmax(lt)
        return vals[i]

    return learning_rate_fn


def one_hot(x, K):
    return np.array(x[:, None] == np.arange(K)[None, :], dtype=int)


def accuracy(model, dataset_loader):
    total_correct = 0
    for x, y in dataset_loader:
        x = x.to(device)
        y = one_hot(np.array(y.numpy()), 10)

        target_class = np.argmax(y, axis=1)
        predicted_class = np.argmax(model(x).cpu().detach().numpy(), axis=1)
        total_correct += np.sum(predicted_class == target_class)
    return total_correct / len(dataset_loader.dataset)


def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)


def makedirs(dirname):
    if not os.path.exists(dirname):
        os.makedirs(dirname)


def get_logger(logpath, filepath, package_files=[], displaying=True, saving=True, debug=False):
    logger = logging.getLogger()
    if debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logger.setLevel(level)
    if saving:
        info_file_handler = logging.FileHandler(logpath, mode="a")
        info_file_handler.setLevel(level)
        logger.addHandler(info_file_handler)
    if displaying:
        console_handler = logging.StreamHandler()
        console_handler.setLevel(level)
        logger.addHandler(console_handler)
    logger.info(filepath)
    with open(filepath, "r") as f:
        logger.info(f.read())

    for f in package_files:
        logger.info(f)
        with open(f, "r") as package_f:
            logger.info(package_f.read())

    return logger


if __name__ == '__main__':

    makedirs(args.save)
    logger = get_logger(logpath=os.path.join(args.save, 'logs'), filepath=os.path.abspath(__file__))
    logger.info(args)

    device = torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')

    is_odenet = args.network == 'odenet'

    downsampling_layers = [
        nn.Conv2d(3, 20, 3, 1),
        norm(20),
        nn.ReLU(inplace=True),
        nn.Conv2d(20, 20, 4, 2, 1),
        norm(20),
        nn.ReLU(inplace=True),
        nn.Conv2d(20, 20, 4, 2, 1),
        norm(20),
        nn.ReLU(inplace=True),
        Flatten(),
    ]

    feature_layers = [ODEBlock(ODEfunc(980))] 
    fc_layers = [nn.Linear(980, 10)]
    # feature_layers = [ODEBlock(ODEfunc(900))] 
    # fc_layers = [nn.Linear(900, 10)]

    model = nn.Sequential(*downsampling_layers, *feature_layers, *fc_layers).to(device)

    logger.info(model)
    logger.info('Number of parameters: {}'.format(count_parameters(model)))

    criterion = nn.CrossEntropyLoss().to(device)

    train_loader, test_loader, train_eval_loader = get_cifar_loaders(
        args.data_aug, args.batch_size, args.test_batch_size
    )

    data_gen = inf_generator(train_loader)
    batches_per_epoch = len(train_loader)

    lr_fn = learning_rate_with_decay(
        args.batch_size, batch_denom=128, batches_per_epoch=batches_per_epoch, boundary_epochs=[60, 100, 140],
        decay_rates=[1, 0.1, 0.01, 0.001]
    )

    optimizer = torch.optim.SGD(model.parameters(), lr=args.lr, momentum=0.9)

    best_acc = 0
    batch_time_meter = RunningAverageMeter()
    f_nfe_meter = RunningAverageMeter()
    b_nfe_meter = RunningAverageMeter()
    end = time.time()

    for itr in range(args.nepochs * batches_per_epoch):

        for param_group in optimizer.param_groups:
            param_group['lr'] = lr_fn(itr)

        optimizer.zero_grad()
        x, y = data_gen.__next__()
        x = x.to(device)
        y = y.to(device)
        logits = model(x)
        loss = criterion(logits, y)

        if is_odenet:
            nfe_forward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        loss.backward()
        optimizer.step()

        if is_odenet:
            nfe_backward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        batch_time_meter.update(time.time() - end)
        if is_odenet:
            f_nfe_meter.update(nfe_forward)
            b_nfe_meter.update(nfe_backward)
        end = time.time()

        if itr % batches_per_epoch == 0:
            with torch.no_grad():
                train_acc = accuracy(model, train_eval_loader)
                val_acc = accuracy(model, test_loader)
                if val_acc > best_acc:
                    torch.save({'state_dict': model.state_dict(), 'args': args}, os.path.join(args.save, 'model.pth'))
                    best_acc = val_acc
                if best_acc > 0.85 and train_acc > 0.85:
                    break
                logger.info(
                    "Epoch {:04d} | Time {:.3f} ({:.3f}) | NFE-F {:.1f} | NFE-B {:.1f} | "
                    "Train Acc {:.4f} | Test Acc {:.4f}".format(
                        itr // batches_per_epoch, batch_time_meter.val, batch_time_meter.avg, f_nfe_meter.avg,
                        b_nfe_meter.avg, train_acc, val_acc
                    )
                )
    names = []
    params = []
    for name,param in model.named_parameters():
        names.append(name)
        params.append(param.detach().numpy())
    nn1 = dict({'Wb':params,'names':names})
    for name,param in model.named_buffers():
        names.append(name)
        params.append(param.detach().numpy())
    savemat("odecnn_cifar_tiny.mat",nn1)
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb  4 09:04:31 2021

@author: manzand
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 19 15:10:31 2021

@author: manzand
"""

import os
import argparse
import logging
import time
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms
from scipy.io import savemat

parser = argparse.ArgumentParser()
parser.add_argument('--network', type=str, choices=['resnet', 'odenet'], default='odenet')
parser.add_argument('--tol', type=float, default=1e-3)
parser.add_argument('--adjoint', type=eval, default=False, choices=[True, False])
parser.add_argument('--downsampling-method', type=str, default='conv', choices=['conv', 'res'])
parser.add_argument('--nepochs', type=int, default=200)
parser.add_argument('--data_aug', type=eval, default=False, choices=[True, False])
parser.add_argument('--lr', type=float, default=0.01)
parser.add_argument('--batch_size', type=int, default=128)
parser.add_argument('--test_batch_size', type=int, default=1000)

parser.add_argument('--save', type=str, default='../logs/cifartiny')
parser.add_argument('--debug', action='store_true')
parser.add_argument('--gpu', type=int, default=0)
args = parser.parse_args()

if args.adjoint:
    from torchdiffeq import odeint_adjoint as odeint
else:
    from torchdiffeq import odeint


def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


def norm(dim):
    return nn.BatchNorm2d(min(64, dim), dim)


class ConcatConv2d(nn.Module):

    def __init__(self, dim_in, dim_out, ksize=3, stride=1, padding=0, dilation=1, groups=1, bias=True, transpose=False):
        super(ConcatConv2d, self).__init__()
        module = nn.ConvTranspose2d if transpose else nn.Conv2d
        self._layer = module(
            dim_in + 1, dim_out, kernel_size=ksize, stride=stride, padding=padding, dilation=dilation, groups=groups,
            bias=bias
        )

    def forward(self, t, x):
        tt = torch.ones_like(x[:, :1, :, :]) * t
        ttx = torch.cat([tt, x], 1)
        return self._layer(ttx)


class ODEfunc(nn.Module):

    def __init__(self,dim):
        super(ODEfunc, self).__init__()
        self.fc1 = nn.Linear(dim,16)
        self.fc2 = nn.Linear(16, dim)
        self.nfe = 0

    def forward(self, t, x):
        self.nfe += 1
        # print('11111111111111111111')
        # print(x.size())
        out = self.fc1(x)
        # print('222222222222222222')
        # print(out.size())
        out = self.fc2(out)
        return out


class ODEBlock(nn.Module):

    def __init__(self, odefunc):
        super(ODEBlock, self).__init__()
        self.odefunc = odefunc
        self.integration_time = torch.tensor([0, 1]).float()

    def forward(self, x):
        self.integration_time = self.integration_time.type_as(x)
        out = odeint(self.odefunc, x, self.integration_time, rtol=args.tol, atol=args.tol)
        return out[1]

    @property
    def nfe(self):
        return self.odefunc.nfe

    @nfe.setter
    def nfe(self, value):
        self.odefunc.nfe = value


class Flatten(nn.Module):

    def __init__(self):
        super(Flatten, self).__init__()

    def forward(self, x):
        shape = torch.prod(torch.tensor(x.shape[1:])).item()
        xout = x.view(-1, shape)
        # print(xout.size())
        return xout


class RunningAverageMeter(object):
    """Computes and stores the average and current value"""

    def __init__(self, momentum=0.99):
        self.momentum = momentum
        self.reset()

    def reset(self):
        self.val = None
        self.avg = 0

    def update(self, val):
        if self.val is None:
            self.avg = val
        else:
            self.avg = self.avg * self.momentum + val * (1 - self.momentum)
        self.val = val


def get_cifar_loaders(data_aug=False, batch_size=32, test_batch_size=1000, perc=1.0):
    if data_aug:
        transform_train = transforms.Compose([
            transforms.RandomCrop(28, padding=4),
            transforms.ToTensor(),
        ])
    else:
        transform_train = transforms.Compose([
            transforms.ToTensor(),
        ])

    transform_test = transforms.Compose([
        transforms.ToTensor(),
    ])

    train_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_train), batch_size=batch_size,
        shuffle=True, num_workers=2, drop_last=True
    )

    train_eval_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    test_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=False, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    return train_loader, test_loader, train_eval_loader


def inf_generator(iterable):
    """Allows training with DataLoaders in a single infinite loop:
        for i, (x, y) in enumerate(inf_generator(train_loader)):
    """
    iterator = iterable.__iter__()
    while True:
        try:
            yield iterator.__next__()
        except StopIteration:
            iterator = iterable.__iter__()


def learning_rate_with_decay(batch_size, batch_denom, batches_per_epoch, boundary_epochs, decay_rates):
    initial_learning_rate = args.lr * batch_size / batch_denom

    boundaries = [int(batches_per_epoch * epoch) for epoch in boundary_epochs]
    vals = [initial_learning_rate * decay for decay in decay_rates]

    def learning_rate_fn(itr):
        lt = [itr < b for b in boundaries] + [True]
        i = np.argmax(lt)
        return vals[i]

    return learning_rate_fn


def one_hot(x, K):
    return np.array(x[:, None] == np.arange(K)[None, :], dtype=int)


def accuracy(model, dataset_loader):
    total_correct = 0
    for x, y in dataset_loader:
        x = x.to(device)
        y = one_hot(np.array(y.numpy()), 10)

        target_class = np.argmax(y, axis=1)
        predicted_class = np.argmax(model(x).cpu().detach().numpy(), axis=1)
        total_correct += np.sum(predicted_class == target_class)
    return total_correct / len(dataset_loader.dataset)


def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)


def makedirs(dirname):
    if not os.path.exists(dirname):
        os.makedirs(dirname)


def get_logger(logpath, filepath, package_files=[], displaying=True, saving=True, debug=False):
    logger = logging.getLogger()
    if debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logger.setLevel(level)
    if saving:
        info_file_handler = logging.FileHandler(logpath, mode="a")
        info_file_handler.setLevel(level)
        logger.addHandler(info_file_handler)
    if displaying:
        console_handler = logging.StreamHandler()
        console_handler.setLevel(level)
        logger.addHandler(console_handler)
    logger.info(filepath)
    with open(filepath, "r") as f:
        logger.info(f.read())

    for f in package_files:
        logger.info(f)
        with open(f, "r") as package_f:
            logger.info(package_f.read())

    return logger


if __name__ == '__main__':

    makedirs(args.save)
    logger = get_logger(logpath=os.path.join(args.save, 'logs'), filepath=os.path.abspath(__file__))
    logger.info(args)

    device = torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')

    is_odenet = args.network == 'odenet'

    downsampling_layers = [
        nn.Conv2d(3, 20, 3, 1),
        norm(20),
        nn.ReLU(inplace=True),
        nn.Conv2d(20, 20, 4, 2, 1),
        norm(20),
        nn.ReLU(inplace=True),
        nn.Conv2d(20, 20, 4, 2, 1),
        norm(20),
        nn.ReLU(inplace=True),
        Flatten(),
    ]

    feature_layers = [ODEBlock(ODEfunc(980))] 
    fc_layers = [nn.Linear(980, 10)]
    # feature_layers = [ODEBlock(ODEfunc(900))] 
    # fc_layers = [nn.Linear(900, 10)]

    model = nn.Sequential(*downsampling_layers, *feature_layers, *fc_layers).to(device)

    logger.info(model)
    logger.info('Number of parameters: {}'.format(count_parameters(model)))

    criterion = nn.CrossEntropyLoss().to(device)

    train_loader, test_loader, train_eval_loader = get_cifar_loaders(
        args.data_aug, args.batch_size, args.test_batch_size
    )

    data_gen = inf_generator(train_loader)
    batches_per_epoch = len(train_loader)

    lr_fn = learning_rate_with_decay(
        args.batch_size, batch_denom=128, batches_per_epoch=batches_per_epoch, boundary_epochs=[60, 100, 140],
        decay_rates=[1, 0.1, 0.01, 0.001]
    )

    optimizer = torch.optim.SGD(model.parameters(), lr=args.lr, momentum=0.9)

    best_acc = 0
    batch_time_meter = RunningAverageMeter()
    f_nfe_meter = RunningAverageMeter()
    b_nfe_meter = RunningAverageMeter()
    end = time.time()

    for itr in range(args.nepochs * batches_per_epoch):

        for param_group in optimizer.param_groups:
            param_group['lr'] = lr_fn(itr)

        optimizer.zero_grad()
        x, y = data_gen.__next__()
        x = x.to(device)
        y = y.to(device)
        logits = model(x)
        loss = criterion(logits, y)

        if is_odenet:
            nfe_forward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        loss.backward()
        optimizer.step()

        if is_odenet:
            nfe_backward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        batch_time_meter.update(time.time() - end)
        if is_odenet:
            f_nfe_meter.update(nfe_forward)
            b_nfe_meter.update(nfe_backward)
        end = time.time()

        if itr % batches_per_epoch == 0:
            with torch.no_grad():
                train_acc = accuracy(model, train_eval_loader)
                val_acc = accuracy(model, test_loader)
                if val_acc > best_acc:
                    torch.save({'state_dict': model.state_dict(), 'args': args}, os.path.join(args.save, 'model.pth'))
                    best_acc = val_acc
                if best_acc > 0.85 and train_acc > 0.85:
                    break
                logger.info(
                    "Epoch {:04d} | Time {:.3f} ({:.3f}) | NFE-F {:.1f} | NFE-B {:.1f} | "
                    "Train Acc {:.4f} | Test Acc {:.4f}".format(
                        itr // batches_per_epoch, batch_time_meter.val, batch_time_meter.avg, f_nfe_meter.avg,
                        b_nfe_meter.avg, train_acc, val_acc
                    )
                )
    names = []
    params = []
    for name,param in model.named_parameters():
        names.append(name)
        params.append(param.detach().numpy())
    nn1 = dict({'Wb':params,'names':names})
    for name,param in model.named_buffers():
        names.append(name)
        params.append(param.detach().numpy())
    savemat("odecnn_cifar_tiny.mat",nn1)
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb  4 09:04:31 2021

@author: manzand
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 19 15:10:31 2021

@author: manzand
"""

import os
import argparse
import logging
import time
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms
from scipy.io import savemat

parser = argparse.ArgumentParser()
parser.add_argument('--network', type=str, choices=['resnet', 'odenet'], default='odenet')
parser.add_argument('--tol', type=float, default=1e-3)
parser.add_argument('--adjoint', type=eval, default=False, choices=[True, False])
parser.add_argument('--downsampling-method', type=str, default='conv', choices=['conv', 'res'])
parser.add_argument('--nepochs', type=int, default=200)
parser.add_argument('--data_aug', type=eval, default=False, choices=[True, False])
parser.add_argument('--lr', type=float, default=0.01)
parser.add_argument('--batch_size', type=int, default=128)
parser.add_argument('--test_batch_size', type=int, default=1000)

parser.add_argument('--save', type=str, default='../logs/cifartiny')
parser.add_argument('--debug', action='store_true')
parser.add_argument('--gpu', type=int, default=0)
args = parser.parse_args()

if args.adjoint:
    from torchdiffeq import odeint_adjoint as odeint
else:
    from torchdiffeq import odeint


def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


def norm(dim):
    return nn.BatchNorm2d(min(64, dim), dim)


class ConcatConv2d(nn.Module):

    def __init__(self, dim_in, dim_out, ksize=3, stride=1, padding=0, dilation=1, groups=1, bias=True, transpose=False):
        super(ConcatConv2d, self).__init__()
        module = nn.ConvTranspose2d if transpose else nn.Conv2d
        self._layer = module(
            dim_in + 1, dim_out, kernel_size=ksize, stride=stride, padding=padding, dilation=dilation, groups=groups,
            bias=bias
        )

    def forward(self, t, x):
        tt = torch.ones_like(x[:, :1, :, :]) * t
        ttx = torch.cat([tt, x], 1)
        return self._layer(ttx)


class ODEfunc(nn.Module):

    def __init__(self,dim):
        super(ODEfunc, self).__init__()
        self.fc1 = nn.Linear(dim,16)
        self.fc2 = nn.Linear(16, dim)
        self.nfe = 0

    def forward(self, t, x):
        self.nfe += 1
        # print('11111111111111111111')
        # print(x.size())
        out = self.fc1(x)
        # print('222222222222222222')
        # print(out.size())
        out = self.fc2(out)
        return out


class ODEBlock(nn.Module):

    def __init__(self, odefunc):
        super(ODEBlock, self).__init__()
        self.odefunc = odefunc
        self.integration_time = torch.tensor([0, 1]).float()

    def forward(self, x):
        self.integration_time = self.integration_time.type_as(x)
        out = odeint(self.odefunc, x, self.integration_time, rtol=args.tol, atol=args.tol)
        return out[1]

    @property
    def nfe(self):
        return self.odefunc.nfe

    @nfe.setter
    def nfe(self, value):
        self.odefunc.nfe = value


class Flatten(nn.Module):

    def __init__(self):
        super(Flatten, self).__init__()

    def forward(self, x):
        shape = torch.prod(torch.tensor(x.shape[1:])).item()
        xout = x.view(-1, shape)
        # print(xout.size())
        return xout


class RunningAverageMeter(object):
    """Computes and stores the average and current value"""

    def __init__(self, momentum=0.99):
        self.momentum = momentum
        self.reset()

    def reset(self):
        self.val = None
        self.avg = 0

    def update(self, val):
        if self.val is None:
            self.avg = val
        else:
            self.avg = self.avg * self.momentum + val * (1 - self.momentum)
        self.val = val


def get_cifar_loaders(data_aug=False, batch_size=32, test_batch_size=1000, perc=1.0):
    if data_aug:
        transform_train = transforms.Compose([
            transforms.RandomCrop(28, padding=4),
            transforms.ToTensor(),
        ])
    else:
        transform_train = transforms.Compose([
            transforms.ToTensor(),
        ])

    transform_test = transforms.Compose([
        transforms.ToTensor(),
    ])

    train_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_train), batch_size=batch_size,
        shuffle=True, num_workers=2, drop_last=True
    )

    train_eval_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    test_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=False, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    return train_loader, test_loader, train_eval_loader


def inf_generator(iterable):
    """Allows training with DataLoaders in a single infinite loop:
        for i, (x, y) in enumerate(inf_generator(train_loader)):
    """
    iterator = iterable.__iter__()
    while True:
        try:
            yield iterator.__next__()
        except StopIteration:
            iterator = iterable.__iter__()


def learning_rate_with_decay(batch_size, batch_denom, batches_per_epoch, boundary_epochs, decay_rates):
    initial_learning_rate = args.lr * batch_size / batch_denom

    boundaries = [int(batches_per_epoch * epoch) for epoch in boundary_epochs]
    vals = [initial_learning_rate * decay for decay in decay_rates]

    def learning_rate_fn(itr):
        lt = [itr < b for b in boundaries] + [True]
        i = np.argmax(lt)
        return vals[i]

    return learning_rate_fn


def one_hot(x, K):
    return np.array(x[:, None] == np.arange(K)[None, :], dtype=int)


def accuracy(model, dataset_loader):
    total_correct = 0
    for x, y in dataset_loader:
        x = x.to(device)
        y = one_hot(np.array(y.numpy()), 10)

        target_class = np.argmax(y, axis=1)
        predicted_class = np.argmax(model(x).cpu().detach().numpy(), axis=1)
        total_correct += np.sum(predicted_class == target_class)
    return total_correct / len(dataset_loader.dataset)


def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)


def makedirs(dirname):
    if not os.path.exists(dirname):
        os.makedirs(dirname)


def get_logger(logpath, filepath, package_files=[], displaying=True, saving=True, debug=False):
    logger = logging.getLogger()
    if debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logger.setLevel(level)
    if saving:
        info_file_handler = logging.FileHandler(logpath, mode="a")
        info_file_handler.setLevel(level)
        logger.addHandler(info_file_handler)
    if displaying:
        console_handler = logging.StreamHandler()
        console_handler.setLevel(level)
        logger.addHandler(console_handler)
    logger.info(filepath)
    with open(filepath, "r") as f:
        logger.info(f.read())

    for f in package_files:
        logger.info(f)
        with open(f, "r") as package_f:
            logger.info(package_f.read())

    return logger


if __name__ == '__main__':

    makedirs(args.save)
    logger = get_logger(logpath=os.path.join(args.save, 'logs'), filepath=os.path.abspath(__file__))
    logger.info(args)

    device = torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')

    is_odenet = args.network == 'odenet'

    downsampling_layers = [
        nn.Conv2d(3, 20, 3, 1),
        norm(20),
        nn.ReLU(inplace=True),
        nn.Conv2d(20, 20, 4, 2, 1),
        norm(20),
        nn.ReLU(inplace=True),
        nn.Conv2d(20, 20, 4, 2, 1),
        norm(20),
        nn.ReLU(inplace=True),
        Flatten(),
    ]

    feature_layers = [ODEBlock(ODEfunc(980))] 
    fc_layers = [nn.Linear(980, 10)]
    # feature_layers = [ODEBlock(ODEfunc(900))] 
    # fc_layers = [nn.Linear(900, 10)]

    model = nn.Sequential(*downsampling_layers, *feature_layers, *fc_layers).to(device)

    logger.info(model)
    logger.info('Number of parameters: {}'.format(count_parameters(model)))

    criterion = nn.CrossEntropyLoss().to(device)

    train_loader, test_loader, train_eval_loader = get_cifar_loaders(
        args.data_aug, args.batch_size, args.test_batch_size
    )

    data_gen = inf_generator(train_loader)
    batches_per_epoch = len(train_loader)

    lr_fn = learning_rate_with_decay(
        args.batch_size, batch_denom=128, batches_per_epoch=batches_per_epoch, boundary_epochs=[60, 100, 140],
        decay_rates=[1, 0.1, 0.01, 0.001]
    )

    optimizer = torch.optim.SGD(model.parameters(), lr=args.lr, momentum=0.9)

    best_acc = 0
    batch_time_meter = RunningAverageMeter()
    f_nfe_meter = RunningAverageMeter()
    b_nfe_meter = RunningAverageMeter()
    end = time.time()

    for itr in range(args.nepochs * batches_per_epoch):

        for param_group in optimizer.param_groups:
            param_group['lr'] = lr_fn(itr)

        optimizer.zero_grad()
        x, y = data_gen.__next__()
        x = x.to(device)
        y = y.to(device)
        logits = model(x)
        loss = criterion(logits, y)

        if is_odenet:
            nfe_forward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        loss.backward()
        optimizer.step()

        if is_odenet:
            nfe_backward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        batch_time_meter.update(time.time() - end)
        if is_odenet:
            f_nfe_meter.update(nfe_forward)
            b_nfe_meter.update(nfe_backward)
        end = time.time()

        if itr % batches_per_epoch == 0:
            with torch.no_grad():
                train_acc = accuracy(model, train_eval_loader)
                val_acc = accuracy(model, test_loader)
                if val_acc > best_acc:
                    torch.save({'state_dict': model.state_dict(), 'args': args}, os.path.join(args.save, 'model.pth'))
                    best_acc = val_acc
                if best_acc > 0.85 and train_acc > 0.85:
                    break
                logger.info(
                    "Epoch {:04d} | Time {:.3f} ({:.3f}) | NFE-F {:.1f} | NFE-B {:.1f} | "
                    "Train Acc {:.4f} | Test Acc {:.4f}".format(
                        itr // batches_per_epoch, batch_time_meter.val, batch_time_meter.avg, f_nfe_meter.avg,
                        b_nfe_meter.avg, train_acc, val_acc
                    )
                )
    names = []
    params = []
    for name,param in model.named_parameters():
        names.append(name)
        params.append(param.detach().numpy())
    nn1 = dict({'Wb':params,'names':names})
    for name,param in model.named_buffers():
        names.append(name)
        params.append(param.detach().numpy())
    savemat("odecnn_cifar_tiny.mat",nn1)
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb  4 09:04:31 2021

@author: manzand
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 19 15:10:31 2021

@author: manzand
"""

import os
import argparse
import logging
import time
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms
from scipy.io import savemat

parser = argparse.ArgumentParser()
parser.add_argument('--network', type=str, choices=['resnet', 'odenet'], default='odenet')
parser.add_argument('--tol', type=float, default=1e-3)
parser.add_argument('--adjoint', type=eval, default=False, choices=[True, False])
parser.add_argument('--downsampling-method', type=str, default='conv', choices=['conv', 'res'])
parser.add_argument('--nepochs', type=int, default=200)
parser.add_argument('--data_aug', type=eval, default=False, choices=[True, False])
parser.add_argument('--lr', type=float, default=0.01)
parser.add_argument('--batch_size', type=int, default=128)
parser.add_argument('--test_batch_size', type=int, default=1000)

parser.add_argument('--save', type=str, default='../logs/cifartiny')
parser.add_argument('--debug', action='store_true')
parser.add_argument('--gpu', type=int, default=0)
args = parser.parse_args()

if args.adjoint:
    from torchdiffeq import odeint_adjoint as odeint
else:
    from torchdiffeq import odeint


def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


def norm(dim):
    return nn.BatchNorm2d(min(64, dim), dim)


class ConcatConv2d(nn.Module):

    def __init__(self, dim_in, dim_out, ksize=3, stride=1, padding=0, dilation=1, groups=1, bias=True, transpose=False):
        super(ConcatConv2d, self).__init__()
        module = nn.ConvTranspose2d if transpose else nn.Conv2d
        self._layer = module(
            dim_in + 1, dim_out, kernel_size=ksize, stride=stride, padding=padding, dilation=dilation, groups=groups,
            bias=bias
        )

    def forward(self, t, x):
        tt = torch.ones_like(x[:, :1, :, :]) * t
        ttx = torch.cat([tt, x], 1)
        return self._layer(ttx)


class ODEfunc(nn.Module):

    def __init__(self,dim):
        super(ODEfunc, self).__init__()
        self.fc1 = nn.Linear(dim,16)
        self.fc2 = nn.Linear(16, dim)
        self.nfe = 0

    def forward(self, t, x):
        self.nfe += 1
        # print('11111111111111111111')
        # print(x.size())
        out = self.fc1(x)
        # print('222222222222222222')
        # print(out.size())
        out = self.fc2(out)
        return out


class ODEBlock(nn.Module):

    def __init__(self, odefunc):
        super(ODEBlock, self).__init__()
        self.odefunc = odefunc
        self.integration_time = torch.tensor([0, 1]).float()

    def forward(self, x):
        self.integration_time = self.integration_time.type_as(x)
        out = odeint(self.odefunc, x, self.integration_time, rtol=args.tol, atol=args.tol)
        return out[1]

    @property
    def nfe(self):
        return self.odefunc.nfe

    @nfe.setter
    def nfe(self, value):
        self.odefunc.nfe = value


class Flatten(nn.Module):

    def __init__(self):
        super(Flatten, self).__init__()

    def forward(self, x):
        shape = torch.prod(torch.tensor(x.shape[1:])).item()
        xout = x.view(-1, shape)
        # print(xout.size())
        return xout


class RunningAverageMeter(object):
    """Computes and stores the average and current value"""

    def __init__(self, momentum=0.99):
        self.momentum = momentum
        self.reset()

    def reset(self):
        self.val = None
        self.avg = 0

    def update(self, val):
        if self.val is None:
            self.avg = val
        else:
            self.avg = self.avg * self.momentum + val * (1 - self.momentum)
        self.val = val


def get_cifar_loaders(data_aug=False, batch_size=32, test_batch_size=1000, perc=1.0):
    if data_aug:
        transform_train = transforms.Compose([
            transforms.RandomCrop(28, padding=4),
            transforms.ToTensor(),
        ])
    else:
        transform_train = transforms.Compose([
            transforms.ToTensor(),
        ])

    transform_test = transforms.Compose([
        transforms.ToTensor(),
    ])

    train_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_train), batch_size=batch_size,
        shuffle=True, num_workers=2, drop_last=True
    )

    train_eval_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    test_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=False, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    return train_loader, test_loader, train_eval_loader


def inf_generator(iterable):
    """Allows training with DataLoaders in a single infinite loop:
        for i, (x, y) in enumerate(inf_generator(train_loader)):
    """
    iterator = iterable.__iter__()
    while True:
        try:
            yield iterator.__next__()
        except StopIteration:
            iterator = iterable.__iter__()


def learning_rate_with_decay(batch_size, batch_denom, batches_per_epoch, boundary_epochs, decay_rates):
    initial_learning_rate = args.lr * batch_size / batch_denom

    boundaries = [int(batches_per_epoch * epoch) for epoch in boundary_epochs]
    vals = [initial_learning_rate * decay for decay in decay_rates]

    def learning_rate_fn(itr):
        lt = [itr < b for b in boundaries] + [True]
        i = np.argmax(lt)
        return vals[i]

    return learning_rate_fn


def one_hot(x, K):
    return np.array(x[:, None] == np.arange(K)[None, :], dtype=int)


def accuracy(model, dataset_loader):
    total_correct = 0
    for x, y in dataset_loader:
        x = x.to(device)
        y = one_hot(np.array(y.numpy()), 10)

        target_class = np.argmax(y, axis=1)
        predicted_class = np.argmax(model(x).cpu().detach().numpy(), axis=1)
        total_correct += np.sum(predicted_class == target_class)
    return total_correct / len(dataset_loader.dataset)


def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)


def makedirs(dirname):
    if not os.path.exists(dirname):
        os.makedirs(dirname)


def get_logger(logpath, filepath, package_files=[], displaying=True, saving=True, debug=False):
    logger = logging.getLogger()
    if debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logger.setLevel(level)
    if saving:
        info_file_handler = logging.FileHandler(logpath, mode="a")
        info_file_handler.setLevel(level)
        logger.addHandler(info_file_handler)
    if displaying:
        console_handler = logging.StreamHandler()
        console_handler.setLevel(level)
        logger.addHandler(console_handler)
    logger.info(filepath)
    with open(filepath, "r") as f:
        logger.info(f.read())

    for f in package_files:
        logger.info(f)
        with open(f, "r") as package_f:
            logger.info(package_f.read())

    return logger


if __name__ == '__main__':

    makedirs(args.save)
    logger = get_logger(logpath=os.path.join(args.save, 'logs'), filepath=os.path.abspath(__file__))
    logger.info(args)

    device = torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')

    is_odenet = args.network == 'odenet'

    downsampling_layers = [
        nn.Conv2d(3, 20, 3, 1),
        norm(20),
        nn.ReLU(inplace=True),
        nn.Conv2d(20, 20, 4, 2, 1),
        norm(20),
        nn.ReLU(inplace=True),
        nn.Conv2d(20, 20, 4, 2, 1),
        norm(20),
        nn.ReLU(inplace=True),
        Flatten(),
    ]

    feature_layers = [ODEBlock(ODEfunc(980))] 
    fc_layers = [nn.Linear(980, 10)]
    # feature_layers = [ODEBlock(ODEfunc(900))] 
    # fc_layers = [nn.Linear(900, 10)]

    model = nn.Sequential(*downsampling_layers, *feature_layers, *fc_layers).to(device)

    logger.info(model)
    logger.info('Number of parameters: {}'.format(count_parameters(model)))

    criterion = nn.CrossEntropyLoss().to(device)

    train_loader, test_loader, train_eval_loader = get_cifar_loaders(
        args.data_aug, args.batch_size, args.test_batch_size
    )

    data_gen = inf_generator(train_loader)
    batches_per_epoch = len(train_loader)

    lr_fn = learning_rate_with_decay(
        args.batch_size, batch_denom=128, batches_per_epoch=batches_per_epoch, boundary_epochs=[60, 100, 140],
        decay_rates=[1, 0.1, 0.01, 0.001]
    )

    optimizer = torch.optim.SGD(model.parameters(), lr=args.lr, momentum=0.9)

    best_acc = 0
    batch_time_meter = RunningAverageMeter()
    f_nfe_meter = RunningAverageMeter()
    b_nfe_meter = RunningAverageMeter()
    end = time.time()

    for itr in range(args.nepochs * batches_per_epoch):

        for param_group in optimizer.param_groups:
            param_group['lr'] = lr_fn(itr)

        optimizer.zero_grad()
        x, y = data_gen.__next__()
        x = x.to(device)
        y = y.to(device)
        logits = model(x)
        loss = criterion(logits, y)

        if is_odenet:
            nfe_forward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        loss.backward()
        optimizer.step()

        if is_odenet:
            nfe_backward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        batch_time_meter.update(time.time() - end)
        if is_odenet:
            f_nfe_meter.update(nfe_forward)
            b_nfe_meter.update(nfe_backward)
        end = time.time()

        if itr % batches_per_epoch == 0:
            with torch.no_grad():
                train_acc = accuracy(model, train_eval_loader)
                val_acc = accuracy(model, test_loader)
                if val_acc > best_acc:
                    torch.save({'state_dict': model.state_dict(), 'args': args}, os.path.join(args.save, 'model.pth'))
                    best_acc = val_acc
                if best_acc > 0.85 and train_acc > 0.85:
                    break
                logger.info(
                    "Epoch {:04d} | Time {:.3f} ({:.3f}) | NFE-F {:.1f} | NFE-B {:.1f} | "
                    "Train Acc {:.4f} | Test Acc {:.4f}".format(
                        itr // batches_per_epoch, batch_time_meter.val, batch_time_meter.avg, f_nfe_meter.avg,
                        b_nfe_meter.avg, train_acc, val_acc
                    )
                )
    names = []
    params = []
    for name,param in model.named_parameters():
        names.append(name)
        params.append(param.detach().numpy())
    nn1 = dict({'Wb':params,'names':names})
    for name,param in model.named_buffers():
        names.append(name)
        params.append(param.detach().numpy())
    savemat("odecnn_cifar_tiny.mat",nn1)
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb  4 09:04:31 2021

@author: manzand
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 19 15:10:31 2021

@author: manzand
"""

import os
import argparse
import logging
import time
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms
from scipy.io import savemat

parser = argparse.ArgumentParser()
parser.add_argument('--network', type=str, choices=['resnet', 'odenet'], default='odenet')
parser.add_argument('--tol', type=float, default=1e-3)
parser.add_argument('--adjoint', type=eval, default=False, choices=[True, False])
parser.add_argument('--downsampling-method', type=str, default='conv', choices=['conv', 'res'])
parser.add_argument('--nepochs', type=int, default=200)
parser.add_argument('--data_aug', type=eval, default=False, choices=[True, False])
parser.add_argument('--lr', type=float, default=0.01)
parser.add_argument('--batch_size', type=int, default=128)
parser.add_argument('--test_batch_size', type=int, default=1000)

parser.add_argument('--save', type=str, default='../logs/cifartiny')
parser.add_argument('--debug', action='store_true')
parser.add_argument('--gpu', type=int, default=0)
args = parser.parse_args()

if args.adjoint:
    from torchdiffeq import odeint_adjoint as odeint
else:
    from torchdiffeq import odeint


def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


def norm(dim):
    return nn.BatchNorm2d(min(64, dim), dim)


class ConcatConv2d(nn.Module):

    def __init__(self, dim_in, dim_out, ksize=3, stride=1, padding=0, dilation=1, groups=1, bias=True, transpose=False):
        super(ConcatConv2d, self).__init__()
        module = nn.ConvTranspose2d if transpose else nn.Conv2d
        self._layer = module(
            dim_in + 1, dim_out, kernel_size=ksize, stride=stride, padding=padding, dilation=dilation, groups=groups,
            bias=bias
        )

    def forward(self, t, x):
        tt = torch.ones_like(x[:, :1, :, :]) * t
        ttx = torch.cat([tt, x], 1)
        return self._layer(ttx)


class ODEfunc(nn.Module):

    def __init__(self,dim):
        super(ODEfunc, self).__init__()
        self.fc1 = nn.Linear(dim,16)
        self.fc2 = nn.Linear(16, dim)
        self.nfe = 0

    def forward(self, t, x):
        self.nfe += 1
        # print('11111111111111111111')
        # print(x.size())
        out = self.fc1(x)
        # print('222222222222222222')
        # print(out.size())
        out = self.fc2(out)
        return out


class ODEBlock(nn.Module):

    def __init__(self, odefunc):
        super(ODEBlock, self).__init__()
        self.odefunc = odefunc
        self.integration_time = torch.tensor([0, 1]).float()

    def forward(self, x):
        self.integration_time = self.integration_time.type_as(x)
        out = odeint(self.odefunc, x, self.integration_time, rtol=args.tol, atol=args.tol)
        return out[1]

    @property
    def nfe(self):
        return self.odefunc.nfe

    @nfe.setter
    def nfe(self, value):
        self.odefunc.nfe = value


class Flatten(nn.Module):

    def __init__(self):
        super(Flatten, self).__init__()

    def forward(self, x):
        shape = torch.prod(torch.tensor(x.shape[1:])).item()
        xout = x.view(-1, shape)
        # print(xout.size())
        return xout


class RunningAverageMeter(object):
    """Computes and stores the average and current value"""

    def __init__(self, momentum=0.99):
        self.momentum = momentum
        self.reset()

    def reset(self):
        self.val = None
        self.avg = 0

    def update(self, val):
        if self.val is None:
            self.avg = val
        else:
            self.avg = self.avg * self.momentum + val * (1 - self.momentum)
        self.val = val


def get_cifar_loaders(data_aug=False, batch_size=32, test_batch_size=1000, perc=1.0):
    if data_aug:
        transform_train = transforms.Compose([
            transforms.RandomCrop(28, padding=4),
            transforms.ToTensor(),
        ])
    else:
        transform_train = transforms.Compose([
            transforms.ToTensor(),
        ])

    transform_test = transforms.Compose([
        transforms.ToTensor(),
    ])

    train_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_train), batch_size=batch_size,
        shuffle=True, num_workers=2, drop_last=True
    )

    train_eval_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    test_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=False, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    return train_loader, test_loader, train_eval_loader


def inf_generator(iterable):
    """Allows training with DataLoaders in a single infinite loop:
        for i, (x, y) in enumerate(inf_generator(train_loader)):
    """
    iterator = iterable.__iter__()
    while True:
        try:
            yield iterator.__next__()
        except StopIteration:
            iterator = iterable.__iter__()


def learning_rate_with_decay(batch_size, batch_denom, batches_per_epoch, boundary_epochs, decay_rates):
    initial_learning_rate = args.lr * batch_size / batch_denom

    boundaries = [int(batches_per_epoch * epoch) for epoch in boundary_epochs]
    vals = [initial_learning_rate * decay for decay in decay_rates]

    def learning_rate_fn(itr):
        lt = [itr < b for b in boundaries] + [True]
        i = np.argmax(lt)
        return vals[i]

    return learning_rate_fn


def one_hot(x, K):
    return np.array(x[:, None] == np.arange(K)[None, :], dtype=int)


def accuracy(model, dataset_loader):
    total_correct = 0
    for x, y in dataset_loader:
        x = x.to(device)
        y = one_hot(np.array(y.numpy()), 10)

        target_class = np.argmax(y, axis=1)
        predicted_class = np.argmax(model(x).cpu().detach().numpy(), axis=1)
        total_correct += np.sum(predicted_class == target_class)
    return total_correct / len(dataset_loader.dataset)


def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)


def makedirs(dirname):
    if not os.path.exists(dirname):
        os.makedirs(dirname)


def get_logger(logpath, filepath, package_files=[], displaying=True, saving=True, debug=False):
    logger = logging.getLogger()
    if debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logger.setLevel(level)
    if saving:
        info_file_handler = logging.FileHandler(logpath, mode="a")
        info_file_handler.setLevel(level)
        logger.addHandler(info_file_handler)
    if displaying:
        console_handler = logging.StreamHandler()
        console_handler.setLevel(level)
        logger.addHandler(console_handler)
    logger.info(filepath)
    with open(filepath, "r") as f:
        logger.info(f.read())

    for f in package_files:
        logger.info(f)
        with open(f, "r") as package_f:
            logger.info(package_f.read())

    return logger


if __name__ == '__main__':

    makedirs(args.save)
    logger = get_logger(logpath=os.path.join(args.save, 'logs'), filepath=os.path.abspath(__file__))
    logger.info(args)

    device = torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')

    is_odenet = args.network == 'odenet'

    downsampling_layers = [
        nn.Conv2d(3, 20, 3, 1),
        norm(20),
        nn.ReLU(inplace=True),
        nn.Conv2d(20, 20, 4, 2, 1),
        norm(20),
        nn.ReLU(inplace=True),
        nn.Conv2d(20, 20, 4, 2, 1),
        norm(20),
        nn.ReLU(inplace=True),
        Flatten(),
    ]

    feature_layers = [ODEBlock(ODEfunc(980))] 
    fc_layers = [nn.Linear(980, 10)]
    # feature_layers = [ODEBlock(ODEfunc(900))] 
    # fc_layers = [nn.Linear(900, 10)]

    model = nn.Sequential(*downsampling_layers, *feature_layers, *fc_layers).to(device)

    logger.info(model)
    logger.info('Number of parameters: {}'.format(count_parameters(model)))

    criterion = nn.CrossEntropyLoss().to(device)

    train_loader, test_loader, train_eval_loader = get_cifar_loaders(
        args.data_aug, args.batch_size, args.test_batch_size
    )

    data_gen = inf_generator(train_loader)
    batches_per_epoch = len(train_loader)

    lr_fn = learning_rate_with_decay(
        args.batch_size, batch_denom=128, batches_per_epoch=batches_per_epoch, boundary_epochs=[60, 100, 140],
        decay_rates=[1, 0.1, 0.01, 0.001]
    )

    optimizer = torch.optim.SGD(model.parameters(), lr=args.lr, momentum=0.9)

    best_acc = 0
    batch_time_meter = RunningAverageMeter()
    f_nfe_meter = RunningAverageMeter()
    b_nfe_meter = RunningAverageMeter()
    end = time.time()

    for itr in range(args.nepochs * batches_per_epoch):

        for param_group in optimizer.param_groups:
            param_group['lr'] = lr_fn(itr)

        optimizer.zero_grad()
        x, y = data_gen.__next__()
        x = x.to(device)
        y = y.to(device)
        logits = model(x)
        loss = criterion(logits, y)

        if is_odenet:
            nfe_forward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        loss.backward()
        optimizer.step()

        if is_odenet:
            nfe_backward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        batch_time_meter.update(time.time() - end)
        if is_odenet:
            f_nfe_meter.update(nfe_forward)
            b_nfe_meter.update(nfe_backward)
        end = time.time()

        if itr % batches_per_epoch == 0:
            with torch.no_grad():
                train_acc = accuracy(model, train_eval_loader)
                val_acc = accuracy(model, test_loader)
                if val_acc > best_acc:
                    torch.save({'state_dict': model.state_dict(), 'args': args}, os.path.join(args.save, 'model.pth'))
                    best_acc = val_acc
                if best_acc > 0.85 and train_acc > 0.85:
                    break
                logger.info(
                    "Epoch {:04d} | Time {:.3f} ({:.3f}) | NFE-F {:.1f} | NFE-B {:.1f} | "
                    "Train Acc {:.4f} | Test Acc {:.4f}".format(
                        itr // batches_per_epoch, batch_time_meter.val, batch_time_meter.avg, f_nfe_meter.avg,
                        b_nfe_meter.avg, train_acc, val_acc
                    )
                )
    names = []
    params = []
    for name,param in model.named_parameters():
        names.append(name)
        params.append(param.detach().numpy())
    nn1 = dict({'Wb':params,'names':names})
    for name,param in model.named_buffers():
        names.append(name)
        params.append(param.detach().numpy())
    savemat("odecnn_cifar_tiny.mat",nn1)
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb  4 09:04:31 2021

@author: manzand
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 19 15:10:31 2021

@author: manzand
"""

import os
import argparse
import logging
import time
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms
from scipy.io import savemat

parser = argparse.ArgumentParser()
parser.add_argument('--network', type=str, choices=['resnet', 'odenet'], default='odenet')
parser.add_argument('--tol', type=float, default=1e-3)
parser.add_argument('--adjoint', type=eval, default=False, choices=[True, False])
parser.add_argument('--downsampling-method', type=str, default='conv', choices=['conv', 'res'])
parser.add_argument('--nepochs', type=int, default=200)
parser.add_argument('--data_aug', type=eval, default=False, choices=[True, False])
parser.add_argument('--lr', type=float, default=0.01)
parser.add_argument('--batch_size', type=int, default=128)
parser.add_argument('--test_batch_size', type=int, default=1000)

parser.add_argument('--save', type=str, default='../logs/cifartiny')
parser.add_argument('--debug', action='store_true')
parser.add_argument('--gpu', type=int, default=0)
args = parser.parse_args()

if args.adjoint:
    from torchdiffeq import odeint_adjoint as odeint
else:
    from torchdiffeq import odeint


def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


def norm(dim):
    return nn.BatchNorm2d(min(64, dim), dim)


class ConcatConv2d(nn.Module):

    def __init__(self, dim_in, dim_out, ksize=3, stride=1, padding=0, dilation=1, groups=1, bias=True, transpose=False):
        super(ConcatConv2d, self).__init__()
        module = nn.ConvTranspose2d if transpose else nn.Conv2d
        self._layer = module(
            dim_in + 1, dim_out, kernel_size=ksize, stride=stride, padding=padding, dilation=dilation, groups=groups,
            bias=bias
        )

    def forward(self, t, x):
        tt = torch.ones_like(x[:, :1, :, :]) * t
        ttx = torch.cat([tt, x], 1)
        return self._layer(ttx)


class ODEfunc(nn.Module):

    def __init__(self,dim):
        super(ODEfunc, self).__init__()
        self.fc1 = nn.Linear(dim,16)
        self.fc2 = nn.Linear(16, dim)
        self.nfe = 0

    def forward(self, t, x):
        self.nfe += 1
        # print('11111111111111111111')
        # print(x.size())
        out = self.fc1(x)
        # print('222222222222222222')
        # print(out.size())
        out = self.fc2(out)
        return out


class ODEBlock(nn.Module):

    def __init__(self, odefunc):
        super(ODEBlock, self).__init__()
        self.odefunc = odefunc
        self.integration_time = torch.tensor([0, 1]).float()

    def forward(self, x):
        self.integration_time = self.integration_time.type_as(x)
        out = odeint(self.odefunc, x, self.integration_time, rtol=args.tol, atol=args.tol)
        return out[1]

    @property
    def nfe(self):
        return self.odefunc.nfe

    @nfe.setter
    def nfe(self, value):
        self.odefunc.nfe = value


class Flatten(nn.Module):

    def __init__(self):
        super(Flatten, self).__init__()

    def forward(self, x):
        shape = torch.prod(torch.tensor(x.shape[1:])).item()
        xout = x.view(-1, shape)
        # print(xout.size())
        return xout


class RunningAverageMeter(object):
    """Computes and stores the average and current value"""

    def __init__(self, momentum=0.99):
        self.momentum = momentum
        self.reset()

    def reset(self):
        self.val = None
        self.avg = 0

    def update(self, val):
        if self.val is None:
            self.avg = val
        else:
            self.avg = self.avg * self.momentum + val * (1 - self.momentum)
        self.val = val


def get_cifar_loaders(data_aug=False, batch_size=32, test_batch_size=1000, perc=1.0):
    if data_aug:
        transform_train = transforms.Compose([
            transforms.RandomCrop(28, padding=4),
            transforms.ToTensor(),
        ])
    else:
        transform_train = transforms.Compose([
            transforms.ToTensor(),
        ])

    transform_test = transforms.Compose([
        transforms.ToTensor(),
    ])

    train_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_train), batch_size=batch_size,
        shuffle=True, num_workers=2, drop_last=True
    )

    train_eval_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    test_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=False, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    return train_loader, test_loader, train_eval_loader


def inf_generator(iterable):
    """Allows training with DataLoaders in a single infinite loop:
        for i, (x, y) in enumerate(inf_generator(train_loader)):
    """
    iterator = iterable.__iter__()
    while True:
        try:
            yield iterator.__next__()
        except StopIteration:
            iterator = iterable.__iter__()


def learning_rate_with_decay(batch_size, batch_denom, batches_per_epoch, boundary_epochs, decay_rates):
    initial_learning_rate = args.lr * batch_size / batch_denom

    boundaries = [int(batches_per_epoch * epoch) for epoch in boundary_epochs]
    vals = [initial_learning_rate * decay for decay in decay_rates]

    def learning_rate_fn(itr):
        lt = [itr < b for b in boundaries] + [True]
        i = np.argmax(lt)
        return vals[i]

    return learning_rate_fn


def one_hot(x, K):
    return np.array(x[:, None] == np.arange(K)[None, :], dtype=int)


def accuracy(model, dataset_loader):
    total_correct = 0
    for x, y in dataset_loader:
        x = x.to(device)
        y = one_hot(np.array(y.numpy()), 10)

        target_class = np.argmax(y, axis=1)
        predicted_class = np.argmax(model(x).cpu().detach().numpy(), axis=1)
        total_correct += np.sum(predicted_class == target_class)
    return total_correct / len(dataset_loader.dataset)


def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)


def makedirs(dirname):
    if not os.path.exists(dirname):
        os.makedirs(dirname)


def get_logger(logpath, filepath, package_files=[], displaying=True, saving=True, debug=False):
    logger = logging.getLogger()
    if debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logger.setLevel(level)
    if saving:
        info_file_handler = logging.FileHandler(logpath, mode="a")
        info_file_handler.setLevel(level)
        logger.addHandler(info_file_handler)
    if displaying:
        console_handler = logging.StreamHandler()
        console_handler.setLevel(level)
        logger.addHandler(console_handler)
    logger.info(filepath)
    with open(filepath, "r") as f:
        logger.info(f.read())

    for f in package_files:
        logger.info(f)
        with open(f, "r") as package_f:
            logger.info(package_f.read())

    return logger


if __name__ == '__main__':

    makedirs(args.save)
    logger = get_logger(logpath=os.path.join(args.save, 'logs'), filepath=os.path.abspath(__file__))
    logger.info(args)

    device = torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')

    is_odenet = args.network == 'odenet'

    downsampling_layers = [
        nn.Conv2d(3, 20, 3, 1),
        norm(20),
        nn.ReLU(inplace=True),
        nn.Conv2d(20, 20, 4, 2, 1),
        norm(20),
        nn.ReLU(inplace=True),
        nn.Conv2d(20, 20, 4, 2, 1),
        norm(20),
        nn.ReLU(inplace=True),
        Flatten(),
    ]

    feature_layers = [ODEBlock(ODEfunc(980))] 
    fc_layers = [nn.Linear(980, 10)]
    # feature_layers = [ODEBlock(ODEfunc(900))] 
    # fc_layers = [nn.Linear(900, 10)]

    model = nn.Sequential(*downsampling_layers, *feature_layers, *fc_layers).to(device)

    logger.info(model)
    logger.info('Number of parameters: {}'.format(count_parameters(model)))

    criterion = nn.CrossEntropyLoss().to(device)

    train_loader, test_loader, train_eval_loader = get_cifar_loaders(
        args.data_aug, args.batch_size, args.test_batch_size
    )

    data_gen = inf_generator(train_loader)
    batches_per_epoch = len(train_loader)

    lr_fn = learning_rate_with_decay(
        args.batch_size, batch_denom=128, batches_per_epoch=batches_per_epoch, boundary_epochs=[60, 100, 140],
        decay_rates=[1, 0.1, 0.01, 0.001]
    )

    optimizer = torch.optim.SGD(model.parameters(), lr=args.lr, momentum=0.9)

    best_acc = 0
    batch_time_meter = RunningAverageMeter()
    f_nfe_meter = RunningAverageMeter()
    b_nfe_meter = RunningAverageMeter()
    end = time.time()

    for itr in range(args.nepochs * batches_per_epoch):

        for param_group in optimizer.param_groups:
            param_group['lr'] = lr_fn(itr)

        optimizer.zero_grad()
        x, y = data_gen.__next__()
        x = x.to(device)
        y = y.to(device)
        logits = model(x)
        loss = criterion(logits, y)

        if is_odenet:
            nfe_forward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        loss.backward()
        optimizer.step()

        if is_odenet:
            nfe_backward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        batch_time_meter.update(time.time() - end)
        if is_odenet:
            f_nfe_meter.update(nfe_forward)
            b_nfe_meter.update(nfe_backward)
        end = time.time()

        if itr % batches_per_epoch == 0:
            with torch.no_grad():
                train_acc = accuracy(model, train_eval_loader)
                val_acc = accuracy(model, test_loader)
                if val_acc > best_acc:
                    torch.save({'state_dict': model.state_dict(), 'args': args}, os.path.join(args.save, 'model.pth'))
                    best_acc = val_acc
                if best_acc > 0.85 and train_acc > 0.85:
                    break
                logger.info(
                    "Epoch {:04d} | Time {:.3f} ({:.3f}) | NFE-F {:.1f} | NFE-B {:.1f} | "
                    "Train Acc {:.4f} | Test Acc {:.4f}".format(
                        itr // batches_per_epoch, batch_time_meter.val, batch_time_meter.avg, f_nfe_meter.avg,
                        b_nfe_meter.avg, train_acc, val_acc
                    )
                )
    names = []
    params = []
    for name,param in model.named_parameters():
        names.append(name)
        params.append(param.detach().numpy())
    nn1 = dict({'Wb':params,'names':names})
    for name,param in model.named_buffers():
        names.append(name)
        params.append(param.detach().numpy())
    savemat("odecnn_cifar_tiny.mat",nn1)
Namespace(adjoint=False, batch_size=128, data_aug=False, debug=False, downsampling_method='conv', gpu=0, lr=0.01, nepochs=200, network='odenet', save='../logs/cifartiny', test_batch_size=1000, tol=0.001)
Namespace(adjoint=False, batch_size=128, data_aug=False, debug=False, downsampling_method='conv', gpu=0, lr=0.01, nepochs=200, network='odenet', save='../logs/cifartiny', test_batch_size=1000, tol=0.001)
Namespace(adjoint=False, batch_size=128, data_aug=False, debug=False, downsampling_method='conv', gpu=0, lr=0.01, nepochs=200, network='odenet', save='../logs/cifartiny', test_batch_size=1000, tol=0.001)
Namespace(adjoint=False, batch_size=128, data_aug=False, debug=False, downsampling_method='conv', gpu=0, lr=0.01, nepochs=200, network='odenet', save='../logs/cifartiny', test_batch_size=1000, tol=0.001)
Namespace(adjoint=False, batch_size=128, data_aug=False, debug=False, downsampling_method='conv', gpu=0, lr=0.01, nepochs=200, network='odenet', save='../logs/cifartiny', test_batch_size=1000, tol=0.001)
Namespace(adjoint=False, batch_size=128, data_aug=False, debug=False, downsampling_method='conv', gpu=0, lr=0.01, nepochs=200, network='odenet', save='../logs/cifartiny', test_batch_size=1000, tol=0.001)
Sequential(
  (0): Conv2d(3, 20, kernel_size=(3, 3), stride=(1, 1))
  (1): BatchNorm2d(20, eps=20, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(20, 20, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (4): BatchNorm2d(20, eps=20, momentum=0.1, affine=True, track_running_stats=True)
  (5): ReLU(inplace=True)
  (6): Conv2d(20, 20, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (7): BatchNorm2d(20, eps=20, momentum=0.1, affine=True, track_running_stats=True)
  (8): ReLU(inplace=True)
  (9): Flatten()
  (10): ODEBlock(
    (odefunc): ODEfunc(
      (fc1): Linear(in_features=980, out_features=16, bias=True)
      (fc2): Linear(in_features=16, out_features=980, bias=True)
    )
  )
  (11): Linear(in_features=980, out_features=10, bias=True)
)
Sequential(
  (0): Conv2d(3, 20, kernel_size=(3, 3), stride=(1, 1))
  (1): BatchNorm2d(20, eps=20, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(20, 20, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (4): BatchNorm2d(20, eps=20, momentum=0.1, affine=True, track_running_stats=True)
  (5): ReLU(inplace=True)
  (6): Conv2d(20, 20, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (7): BatchNorm2d(20, eps=20, momentum=0.1, affine=True, track_running_stats=True)
  (8): ReLU(inplace=True)
  (9): Flatten()
  (10): ODEBlock(
    (odefunc): ODEfunc(
      (fc1): Linear(in_features=980, out_features=16, bias=True)
      (fc2): Linear(in_features=16, out_features=980, bias=True)
    )
  )
  (11): Linear(in_features=980, out_features=10, bias=True)
)
Sequential(
  (0): Conv2d(3, 20, kernel_size=(3, 3), stride=(1, 1))
  (1): BatchNorm2d(20, eps=20, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(20, 20, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (4): BatchNorm2d(20, eps=20, momentum=0.1, affine=True, track_running_stats=True)
  (5): ReLU(inplace=True)
  (6): Conv2d(20, 20, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (7): BatchNorm2d(20, eps=20, momentum=0.1, affine=True, track_running_stats=True)
  (8): ReLU(inplace=True)
  (9): Flatten()
  (10): ODEBlock(
    (odefunc): ODEfunc(
      (fc1): Linear(in_features=980, out_features=16, bias=True)
      (fc2): Linear(in_features=16, out_features=980, bias=True)
    )
  )
  (11): Linear(in_features=980, out_features=10, bias=True)
)
Sequential(
  (0): Conv2d(3, 20, kernel_size=(3, 3), stride=(1, 1))
  (1): BatchNorm2d(20, eps=20, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(20, 20, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (4): BatchNorm2d(20, eps=20, momentum=0.1, affine=True, track_running_stats=True)
  (5): ReLU(inplace=True)
  (6): Conv2d(20, 20, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (7): BatchNorm2d(20, eps=20, momentum=0.1, affine=True, track_running_stats=True)
  (8): ReLU(inplace=True)
  (9): Flatten()
  (10): ODEBlock(
    (odefunc): ODEfunc(
      (fc1): Linear(in_features=980, out_features=16, bias=True)
      (fc2): Linear(in_features=16, out_features=980, bias=True)
    )
  )
  (11): Linear(in_features=980, out_features=10, bias=True)
)
Sequential(
  (0): Conv2d(3, 20, kernel_size=(3, 3), stride=(1, 1))
  (1): BatchNorm2d(20, eps=20, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(20, 20, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (4): BatchNorm2d(20, eps=20, momentum=0.1, affine=True, track_running_stats=True)
  (5): ReLU(inplace=True)
  (6): Conv2d(20, 20, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (7): BatchNorm2d(20, eps=20, momentum=0.1, affine=True, track_running_stats=True)
  (8): ReLU(inplace=True)
  (9): Flatten()
  (10): ODEBlock(
    (odefunc): ODEfunc(
      (fc1): Linear(in_features=980, out_features=16, bias=True)
      (fc2): Linear(in_features=16, out_features=980, bias=True)
    )
  )
  (11): Linear(in_features=980, out_features=10, bias=True)
)
Sequential(
  (0): Conv2d(3, 20, kernel_size=(3, 3), stride=(1, 1))
  (1): BatchNorm2d(20, eps=20, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(20, 20, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (4): BatchNorm2d(20, eps=20, momentum=0.1, affine=True, track_running_stats=True)
  (5): ReLU(inplace=True)
  (6): Conv2d(20, 20, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (7): BatchNorm2d(20, eps=20, momentum=0.1, affine=True, track_running_stats=True)
  (8): ReLU(inplace=True)
  (9): Flatten()
  (10): ODEBlock(
    (odefunc): ODEfunc(
      (fc1): Linear(in_features=980, out_features=16, bias=True)
      (fc2): Linear(in_features=16, out_features=980, bias=True)
    )
  )
  (11): Linear(in_features=980, out_features=10, bias=True)
)
Number of parameters: 55686
Number of parameters: 55686
Number of parameters: 55686
Number of parameters: 55686
Number of parameters: 55686
Number of parameters: 55686
Epoch 0000 | Time 0.475 (0.475) | NFE-F 32.0 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0000 | Time 0.475 (0.475) | NFE-F 32.0 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0000 | Time 0.475 (0.475) | NFE-F 32.0 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0000 | Time 0.475 (0.475) | NFE-F 32.0 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0000 | Time 0.475 (0.475) | NFE-F 32.0 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0000 | Time 0.475 (0.475) | NFE-F 32.0 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0001 | Time 0.388 (0.254) | NFE-F 20.7 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0001 | Time 0.388 (0.254) | NFE-F 20.7 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0001 | Time 0.388 (0.254) | NFE-F 20.7 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0001 | Time 0.388 (0.254) | NFE-F 20.7 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0001 | Time 0.388 (0.254) | NFE-F 20.7 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0001 | Time 0.388 (0.254) | NFE-F 20.7 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0002 | Time 0.392 (0.216) | NFE-F 20.3 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0002 | Time 0.392 (0.216) | NFE-F 20.3 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0002 | Time 0.392 (0.216) | NFE-F 20.3 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0002 | Time 0.392 (0.216) | NFE-F 20.3 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0002 | Time 0.392 (0.216) | NFE-F 20.3 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0002 | Time 0.392 (0.216) | NFE-F 20.3 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0003 | Time 0.447 (0.212) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0003 | Time 0.447 (0.212) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0003 | Time 0.447 (0.212) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0003 | Time 0.447 (0.212) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0003 | Time 0.447 (0.212) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0003 | Time 0.447 (0.212) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0004 | Time 0.575 (0.236) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0004 | Time 0.575 (0.236) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0004 | Time 0.575 (0.236) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0004 | Time 0.575 (0.236) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0004 | Time 0.575 (0.236) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0004 | Time 0.575 (0.236) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0005 | Time 0.506 (0.297) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0005 | Time 0.506 (0.297) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0005 | Time 0.506 (0.297) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0005 | Time 0.506 (0.297) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0005 | Time 0.506 (0.297) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0005 | Time 0.506 (0.297) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
/home/manzand/Documents/Python/neuralODE_examples/cifar/odenet_cifar_example_tiny.py
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb  4 09:04:31 2021

@author: manzand
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 19 15:10:31 2021

@author: manzand
"""

import os
import argparse
import logging
import time
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms
from scipy.io import savemat

parser = argparse.ArgumentParser()
parser.add_argument('--network', type=str, choices=['resnet', 'odenet'], default='odenet')
parser.add_argument('--tol', type=float, default=1e-3)
parser.add_argument('--adjoint', type=eval, default=False, choices=[True, False])
parser.add_argument('--downsampling-method', type=str, default='conv', choices=['conv', 'res'])
parser.add_argument('--nepochs', type=int, default=200)
parser.add_argument('--data_aug', type=eval, default=False, choices=[True, False])
parser.add_argument('--lr', type=float, default=0.01)
parser.add_argument('--batch_size', type=int, default=128)
parser.add_argument('--test_batch_size', type=int, default=1000)

parser.add_argument('--save', type=str, default='../logs/cifartiny')
parser.add_argument('--debug', action='store_true')
parser.add_argument('--gpu', type=int, default=0)
args = parser.parse_args()

if args.adjoint:
    from torchdiffeq import odeint_adjoint as odeint
else:
    from torchdiffeq import odeint


def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


def norm(dim):
    return nn.BatchNorm2d(min(64, dim), dim)


class ConcatConv2d(nn.Module):

    def __init__(self, dim_in, dim_out, ksize=3, stride=1, padding=0, dilation=1, groups=1, bias=True, transpose=False):
        super(ConcatConv2d, self).__init__()
        module = nn.ConvTranspose2d if transpose else nn.Conv2d
        self._layer = module(
            dim_in + 1, dim_out, kernel_size=ksize, stride=stride, padding=padding, dilation=dilation, groups=groups,
            bias=bias
        )

    def forward(self, t, x):
        tt = torch.ones_like(x[:, :1, :, :]) * t
        ttx = torch.cat([tt, x], 1)
        return self._layer(ttx)


class ODEfunc(nn.Module):

    def __init__(self,dim):
        super(ODEfunc, self).__init__()
        self.fc1 = nn.Linear(dim,16)
        self.fc2 = nn.Linear(16, dim)
        self.nfe = 0

    def forward(self, t, x):
        self.nfe += 1
        # print('11111111111111111111')
        # print(x.size())
        out = self.fc1(x)
        # print('222222222222222222')
        # print(out.size())
        out = self.fc2(out)
        return out


class ODEBlock(nn.Module):

    def __init__(self, odefunc):
        super(ODEBlock, self).__init__()
        self.odefunc = odefunc
        self.integration_time = torch.tensor([0, 1]).float()

    def forward(self, x):
        self.integration_time = self.integration_time.type_as(x)
        out = odeint(self.odefunc, x, self.integration_time, rtol=args.tol, atol=args.tol)
        return out[1]

    @property
    def nfe(self):
        return self.odefunc.nfe

    @nfe.setter
    def nfe(self, value):
        self.odefunc.nfe = value


class Flatten(nn.Module):

    def __init__(self):
        super(Flatten, self).__init__()

    def forward(self, x):
        shape = torch.prod(torch.tensor(x.shape[1:])).item()
        xout = x.view(-1, shape)
        # print(xout.size())
        return xout


class RunningAverageMeter(object):
    """Computes and stores the average and current value"""

    def __init__(self, momentum=0.99):
        self.momentum = momentum
        self.reset()

    def reset(self):
        self.val = None
        self.avg = 0

    def update(self, val):
        if self.val is None:
            self.avg = val
        else:
            self.avg = self.avg * self.momentum + val * (1 - self.momentum)
        self.val = val


def get_cifar_loaders(data_aug=False, batch_size=32, test_batch_size=1000, perc=1.0):
    if data_aug:
        transform_train = transforms.Compose([
            transforms.RandomCrop(28, padding=4),
            transforms.ToTensor(),
        ])
    else:
        transform_train = transforms.Compose([
            transforms.ToTensor(),
        ])

    transform_test = transforms.Compose([
        transforms.ToTensor(),
    ])

    train_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_train), batch_size=batch_size,
        shuffle=True, num_workers=2, drop_last=True
    )

    train_eval_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    test_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=False, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    return train_loader, test_loader, train_eval_loader


def inf_generator(iterable):
    """Allows training with DataLoaders in a single infinite loop:
        for i, (x, y) in enumerate(inf_generator(train_loader)):
    """
    iterator = iterable.__iter__()
    while True:
        try:
            yield iterator.__next__()
        except StopIteration:
            iterator = iterable.__iter__()


def learning_rate_with_decay(batch_size, batch_denom, batches_per_epoch, boundary_epochs, decay_rates):
    initial_learning_rate = args.lr * batch_size / batch_denom

    boundaries = [int(batches_per_epoch * epoch) for epoch in boundary_epochs]
    vals = [initial_learning_rate * decay for decay in decay_rates]

    def learning_rate_fn(itr):
        lt = [itr < b for b in boundaries] + [True]
        i = np.argmax(lt)
        return vals[i]

    return learning_rate_fn


def one_hot(x, K):
    return np.array(x[:, None] == np.arange(K)[None, :], dtype=int)


def accuracy(model, dataset_loader):
    total_correct = 0
    for x, y in dataset_loader:
        x = x.to(device)
        y = one_hot(np.array(y.numpy()), 10)

        target_class = np.argmax(y, axis=1)
        predicted_class = np.argmax(model(x).cpu().detach().numpy(), axis=1)
        total_correct += np.sum(predicted_class == target_class)
    return total_correct / len(dataset_loader.dataset)


def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)


def makedirs(dirname):
    if not os.path.exists(dirname):
        os.makedirs(dirname)


def get_logger(logpath, filepath, package_files=[], displaying=True, saving=True, debug=False):
    logger = logging.getLogger()
    if debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logger.setLevel(level)
    if saving:
        info_file_handler = logging.FileHandler(logpath, mode="a")
        info_file_handler.setLevel(level)
        logger.addHandler(info_file_handler)
    if displaying:
        console_handler = logging.StreamHandler()
        console_handler.setLevel(level)
        logger.addHandler(console_handler)
    logger.info(filepath)
    with open(filepath, "r") as f:
        logger.info(f.read())

    for f in package_files:
        logger.info(f)
        with open(f, "r") as package_f:
            logger.info(package_f.read())

    return logger


if __name__ == '__main__':

    makedirs(args.save)
    logger = get_logger(logpath=os.path.join(args.save, 'logs'), filepath=os.path.abspath(__file__))
    logger.info(args)

    device = torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')

    is_odenet = args.network == 'odenet'

    downsampling_layers = [
        nn.Conv2d(3, 32, 3, 1),
        norm(32),
        nn.ReLU(inplace=True),
        nn.Conv2d(32, 16, 4, 2, 1),
        norm(16),
        nn.ReLU(inplace=True),
        nn.Conv2d(16, 16, 4, 2, 1),
        norm(16),
        nn.ReLU(inplace=True),
        Flatten(),
    ]

    feature_layers = [ODEBlock(ODEfunc(980))] 
    fc_layers = [nn.Linear(980, 10)]
    # feature_layers = [ODEBlock(ODEfunc(900))] 
    # fc_layers = [nn.Linear(900, 10)]

    model = nn.Sequential(*downsampling_layers, *feature_layers, *fc_layers).to(device)

    logger.info(model)
    logger.info('Number of parameters: {}'.format(count_parameters(model)))

    criterion = nn.CrossEntropyLoss().to(device)

    train_loader, test_loader, train_eval_loader = get_cifar_loaders(
        args.data_aug, args.batch_size, args.test_batch_size
    )

    data_gen = inf_generator(train_loader)
    batches_per_epoch = len(train_loader)

    lr_fn = learning_rate_with_decay(
        args.batch_size, batch_denom=128, batches_per_epoch=batches_per_epoch, boundary_epochs=[60, 100, 140],
        decay_rates=[1, 0.1, 0.01, 0.001]
    )

    optimizer = torch.optim.SGD(model.parameters(), lr=args.lr, momentum=0.9)

    best_acc = 0
    batch_time_meter = RunningAverageMeter()
    f_nfe_meter = RunningAverageMeter()
    b_nfe_meter = RunningAverageMeter()
    end = time.time()

    for itr in range(args.nepochs * batches_per_epoch):

        for param_group in optimizer.param_groups:
            param_group['lr'] = lr_fn(itr)

        optimizer.zero_grad()
        x, y = data_gen.__next__()
        x = x.to(device)
        y = y.to(device)
        logits = model(x)
        loss = criterion(logits, y)

        if is_odenet:
            nfe_forward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        loss.backward()
        optimizer.step()

        if is_odenet:
            nfe_backward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        batch_time_meter.update(time.time() - end)
        if is_odenet:
            f_nfe_meter.update(nfe_forward)
            b_nfe_meter.update(nfe_backward)
        end = time.time()

        if itr % batches_per_epoch == 0:
            with torch.no_grad():
                train_acc = accuracy(model, train_eval_loader)
                val_acc = accuracy(model, test_loader)
                if val_acc > best_acc:
                    torch.save({'state_dict': model.state_dict(), 'args': args}, os.path.join(args.save, 'model.pth'))
                    best_acc = val_acc
                if best_acc > 0.85 and train_acc > 0.85:
                    break
                logger.info(
                    "Epoch {:04d} | Time {:.3f} ({:.3f}) | NFE-F {:.1f} | NFE-B {:.1f} | "
                    "Train Acc {:.4f} | Test Acc {:.4f}".format(
                        itr // batches_per_epoch, batch_time_meter.val, batch_time_meter.avg, f_nfe_meter.avg,
                        b_nfe_meter.avg, train_acc, val_acc
                    )
                )
    names = []
    params = []
    for name,param in model.named_parameters():
        names.append(name)
        params.append(param.detach().numpy())
    nn1 = dict({'Wb':params,'names':names})
    for name,param in model.named_buffers():
        names.append(name)
        params.append(param.detach().numpy())
    savemat("odecnn_cifar_tiny.mat",nn1)
Namespace(adjoint=False, batch_size=128, data_aug=False, debug=False, downsampling_method='conv', gpu=0, lr=0.01, nepochs=200, network='odenet', save='../logs/cifartiny', test_batch_size=1000, tol=0.001)
Sequential(
  (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1))
  (1): BatchNorm2d(32, eps=32, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (4): BatchNorm2d(16, eps=16, momentum=0.1, affine=True, track_running_stats=True)
  (5): ReLU(inplace=True)
  (6): Conv2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (7): BatchNorm2d(16, eps=16, momentum=0.1, affine=True, track_running_stats=True)
  (8): ReLU(inplace=True)
  (9): Flatten()
  (10): ODEBlock(
    (odefunc): ODEfunc(
      (fc1): Linear(in_features=980, out_features=16, bias=True)
      (fc2): Linear(in_features=16, out_features=980, bias=True)
    )
  )
  (11): Linear(in_features=980, out_features=10, bias=True)
)
Number of parameters: 55510
/home/manzand/Documents/Python/neuralODE_examples/cifar/odenet_cifar_example_tiny.py
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb  4 09:04:31 2021

@author: manzand
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 19 15:10:31 2021

@author: manzand
"""

import os
import argparse
import logging
import time
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms
from scipy.io import savemat

parser = argparse.ArgumentParser()
parser.add_argument('--network', type=str, choices=['resnet', 'odenet'], default='odenet')
parser.add_argument('--tol', type=float, default=1e-3)
parser.add_argument('--adjoint', type=eval, default=False, choices=[True, False])
parser.add_argument('--downsampling-method', type=str, default='conv', choices=['conv', 'res'])
parser.add_argument('--nepochs', type=int, default=200)
parser.add_argument('--data_aug', type=eval, default=False, choices=[True, False])
parser.add_argument('--lr', type=float, default=0.01)
parser.add_argument('--batch_size', type=int, default=128)
parser.add_argument('--test_batch_size', type=int, default=1000)

parser.add_argument('--save', type=str, default='../logs/cifartiny')
parser.add_argument('--debug', action='store_true')
parser.add_argument('--gpu', type=int, default=0)
args = parser.parse_args()

if args.adjoint:
    from torchdiffeq import odeint_adjoint as odeint
else:
    from torchdiffeq import odeint


def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


def norm(dim):
    return nn.BatchNorm2d(min(64, dim), dim)


class ConcatConv2d(nn.Module):

    def __init__(self, dim_in, dim_out, ksize=3, stride=1, padding=0, dilation=1, groups=1, bias=True, transpose=False):
        super(ConcatConv2d, self).__init__()
        module = nn.ConvTranspose2d if transpose else nn.Conv2d
        self._layer = module(
            dim_in + 1, dim_out, kernel_size=ksize, stride=stride, padding=padding, dilation=dilation, groups=groups,
            bias=bias
        )

    def forward(self, t, x):
        tt = torch.ones_like(x[:, :1, :, :]) * t
        ttx = torch.cat([tt, x], 1)
        return self._layer(ttx)


class ODEfunc(nn.Module):

    def __init__(self,dim):
        super(ODEfunc, self).__init__()
        self.fc1 = nn.Linear(dim,16)
        self.fc2 = nn.Linear(16, dim)
        self.nfe = 0

    def forward(self, t, x):
        self.nfe += 1
        # print('11111111111111111111')
        # print(x.size())
        out = self.fc1(x)
        # print('222222222222222222')
        # print(out.size())
        out = self.fc2(out)
        return out


class ODEBlock(nn.Module):

    def __init__(self, odefunc):
        super(ODEBlock, self).__init__()
        self.odefunc = odefunc
        self.integration_time = torch.tensor([0, 1]).float()

    def forward(self, x):
        self.integration_time = self.integration_time.type_as(x)
        out = odeint(self.odefunc, x, self.integration_time, rtol=args.tol, atol=args.tol)
        return out[1]

    @property
    def nfe(self):
        return self.odefunc.nfe

    @nfe.setter
    def nfe(self, value):
        self.odefunc.nfe = value


class Flatten(nn.Module):

    def __init__(self):
        super(Flatten, self).__init__()

    def forward(self, x):
        shape = torch.prod(torch.tensor(x.shape[1:])).item()
        xout = x.view(-1, shape)
        # print(xout.size())
        return xout


class RunningAverageMeter(object):
    """Computes and stores the average and current value"""

    def __init__(self, momentum=0.99):
        self.momentum = momentum
        self.reset()

    def reset(self):
        self.val = None
        self.avg = 0

    def update(self, val):
        if self.val is None:
            self.avg = val
        else:
            self.avg = self.avg * self.momentum + val * (1 - self.momentum)
        self.val = val


def get_cifar_loaders(data_aug=False, batch_size=32, test_batch_size=1000, perc=1.0):
    if data_aug:
        transform_train = transforms.Compose([
            transforms.RandomCrop(28, padding=4),
            transforms.ToTensor(),
        ])
    else:
        transform_train = transforms.Compose([
            transforms.ToTensor(),
        ])

    transform_test = transforms.Compose([
        transforms.ToTensor(),
    ])

    train_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_train), batch_size=batch_size,
        shuffle=True, num_workers=2, drop_last=True
    )

    train_eval_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    test_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=False, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    return train_loader, test_loader, train_eval_loader


def inf_generator(iterable):
    """Allows training with DataLoaders in a single infinite loop:
        for i, (x, y) in enumerate(inf_generator(train_loader)):
    """
    iterator = iterable.__iter__()
    while True:
        try:
            yield iterator.__next__()
        except StopIteration:
            iterator = iterable.__iter__()


def learning_rate_with_decay(batch_size, batch_denom, batches_per_epoch, boundary_epochs, decay_rates):
    initial_learning_rate = args.lr * batch_size / batch_denom

    boundaries = [int(batches_per_epoch * epoch) for epoch in boundary_epochs]
    vals = [initial_learning_rate * decay for decay in decay_rates]

    def learning_rate_fn(itr):
        lt = [itr < b for b in boundaries] + [True]
        i = np.argmax(lt)
        return vals[i]

    return learning_rate_fn


def one_hot(x, K):
    return np.array(x[:, None] == np.arange(K)[None, :], dtype=int)


def accuracy(model, dataset_loader):
    total_correct = 0
    for x, y in dataset_loader:
        x = x.to(device)
        y = one_hot(np.array(y.numpy()), 10)

        target_class = np.argmax(y, axis=1)
        predicted_class = np.argmax(model(x).cpu().detach().numpy(), axis=1)
        total_correct += np.sum(predicted_class == target_class)
    return total_correct / len(dataset_loader.dataset)


def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)


def makedirs(dirname):
    if not os.path.exists(dirname):
        os.makedirs(dirname)


def get_logger(logpath, filepath, package_files=[], displaying=True, saving=True, debug=False):
    logger = logging.getLogger()
    if debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logger.setLevel(level)
    if saving:
        info_file_handler = logging.FileHandler(logpath, mode="a")
        info_file_handler.setLevel(level)
        logger.addHandler(info_file_handler)
    if displaying:
        console_handler = logging.StreamHandler()
        console_handler.setLevel(level)
        logger.addHandler(console_handler)
    logger.info(filepath)
    with open(filepath, "r") as f:
        logger.info(f.read())

    for f in package_files:
        logger.info(f)
        with open(f, "r") as package_f:
            logger.info(package_f.read())

    return logger


if __name__ == '__main__':

    makedirs(args.save)
    logger = get_logger(logpath=os.path.join(args.save, 'logs'), filepath=os.path.abspath(__file__))
    logger.info(args)

    device = torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')

    is_odenet = args.network == 'odenet'

    downsampling_layers = [
        nn.Conv2d(3, 32, 3, 1),
        norm(32),
        nn.ReLU(inplace=True),
        nn.Conv2d(32, 16, 4, 2, 1),
        norm(16),
        nn.ReLU(inplace=True),
        nn.Conv2d(16, 16, 4, 2, 1),
        norm(16),
        nn.ReLU(inplace=True),
        Flatten(),
    ]

    feature_layers = [ODEBlock(ODEfunc(784))] 
    fc_layers = [nn.Linear(784, 10)]
    # feature_layers = [ODEBlock(ODEfunc(900))] 
    # fc_layers = [nn.Linear(900, 10)]

    model = nn.Sequential(*downsampling_layers, *feature_layers, *fc_layers).to(device)

    logger.info(model)
    logger.info('Number of parameters: {}'.format(count_parameters(model)))

    criterion = nn.CrossEntropyLoss().to(device)

    train_loader, test_loader, train_eval_loader = get_cifar_loaders(
        args.data_aug, args.batch_size, args.test_batch_size
    )

    data_gen = inf_generator(train_loader)
    batches_per_epoch = len(train_loader)

    lr_fn = learning_rate_with_decay(
        args.batch_size, batch_denom=128, batches_per_epoch=batches_per_epoch, boundary_epochs=[60, 100, 140],
        decay_rates=[1, 0.1, 0.01, 0.001]
    )

    optimizer = torch.optim.SGD(model.parameters(), lr=args.lr, momentum=0.9)

    best_acc = 0
    batch_time_meter = RunningAverageMeter()
    f_nfe_meter = RunningAverageMeter()
    b_nfe_meter = RunningAverageMeter()
    end = time.time()

    for itr in range(args.nepochs * batches_per_epoch):

        for param_group in optimizer.param_groups:
            param_group['lr'] = lr_fn(itr)

        optimizer.zero_grad()
        x, y = data_gen.__next__()
        x = x.to(device)
        y = y.to(device)
        logits = model(x)
        loss = criterion(logits, y)

        if is_odenet:
            nfe_forward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        loss.backward()
        optimizer.step()

        if is_odenet:
            nfe_backward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        batch_time_meter.update(time.time() - end)
        if is_odenet:
            f_nfe_meter.update(nfe_forward)
            b_nfe_meter.update(nfe_backward)
        end = time.time()

        if itr % batches_per_epoch == 0:
            with torch.no_grad():
                train_acc = accuracy(model, train_eval_loader)
                val_acc = accuracy(model, test_loader)
                if val_acc > best_acc:
                    torch.save({'state_dict': model.state_dict(), 'args': args}, os.path.join(args.save, 'model.pth'))
                    best_acc = val_acc
                if best_acc > 0.85 and train_acc > 0.85:
                    break
                logger.info(
                    "Epoch {:04d} | Time {:.3f} ({:.3f}) | NFE-F {:.1f} | NFE-B {:.1f} | "
                    "Train Acc {:.4f} | Test Acc {:.4f}".format(
                        itr // batches_per_epoch, batch_time_meter.val, batch_time_meter.avg, f_nfe_meter.avg,
                        b_nfe_meter.avg, train_acc, val_acc
                    )
                )
    names = []
    params = []
    for name,param in model.named_parameters():
        names.append(name)
        params.append(param.detach().numpy())
    nn1 = dict({'Wb':params,'names':names})
    for name,param in model.named_buffers():
        names.append(name)
        params.append(param.detach().numpy())
    savemat("odecnn_cifar_tiny.mat",nn1)
Namespace(adjoint=False, batch_size=128, data_aug=False, debug=False, downsampling_method='conv', gpu=0, lr=0.01, nepochs=200, network='odenet', save='../logs/cifartiny', test_batch_size=1000, tol=0.001)
Sequential(
  (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1))
  (1): BatchNorm2d(32, eps=32, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (4): BatchNorm2d(16, eps=16, momentum=0.1, affine=True, track_running_stats=True)
  (5): ReLU(inplace=True)
  (6): Conv2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (7): BatchNorm2d(16, eps=16, momentum=0.1, affine=True, track_running_stats=True)
  (8): ReLU(inplace=True)
  (9): Flatten()
  (10): ODEBlock(
    (odefunc): ODEfunc(
      (fc1): Linear(in_features=784, out_features=16, bias=True)
      (fc2): Linear(in_features=16, out_features=784, bias=True)
    )
  )
  (11): Linear(in_features=784, out_features=10, bias=True)
)
Number of parameters: 47082
Epoch 0000 | Time 0.984 (0.984) | NFE-F 26.0 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0001 | Time 0.630 (0.282) | NFE-F 20.5 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0002 | Time 0.514 (0.246) | NFE-F 20.3 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0003 | Time 0.462 (0.197) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0004 | Time 0.496 (0.232) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0005 | Time 0.551 (0.226) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0006 | Time 0.443 (0.197) | NFE-F 14.5 | NFE-B 0.0 | Train Acc 0.2653 | Test Acc 0.2759
Epoch 0007 | Time 0.298 (0.206) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.2877 | Test Acc 0.2953
Epoch 0008 | Time 0.384 (0.212) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.3193 | Test Acc 0.3258
Epoch 0009 | Time 0.375 (0.232) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.3540 | Test Acc 0.3661
Epoch 0010 | Time 0.396 (0.198) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.3766 | Test Acc 0.3790
Epoch 0011 | Time 0.363 (0.204) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.3974 | Test Acc 0.3953
Epoch 0012 | Time 0.476 (0.206) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.4428 | Test Acc 0.4379
Epoch 0013 | Time 0.369 (0.189) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.4626 | Test Acc 0.4560
Epoch 0014 | Time 0.422 (0.192) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.4890 | Test Acc 0.4830
Epoch 0015 | Time 0.304 (0.170) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5003 | Test Acc 0.4966
Epoch 0016 | Time 0.469 (0.172) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5193 | Test Acc 0.5085
Epoch 0017 | Time 0.390 (0.153) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5349 | Test Acc 0.5146
Epoch 0018 | Time 0.345 (0.152) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5379 | Test Acc 0.5242
Epoch 0019 | Time 0.355 (0.175) | NFE-F 17.8 | NFE-B 0.0 | Train Acc 0.5523 | Test Acc 0.5313
Epoch 0020 | Time 0.389 (0.187) | NFE-F 20.1 | NFE-B 0.0 | Train Acc 0.5555 | Test Acc 0.5372
Epoch 0021 | Time 0.346 (0.178) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5715 | Test Acc 0.5506
Epoch 0022 | Time 0.353 (0.188) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5812 | Test Acc 0.5600
Epoch 0023 | Time 0.473 (0.204) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5624 | Test Acc 0.5424
Epoch 0024 | Time 0.412 (0.190) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5914 | Test Acc 0.5681
Epoch 0025 | Time 0.348 (0.191) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.5950 | Test Acc 0.5733
Epoch 0026 | Time 0.194 (0.114) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.6037 | Test Acc 0.5800
Epoch 0027 | Time 0.214 (0.098) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.6082 | Test Acc 0.5844
Epoch 0028 | Time 0.209 (0.099) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.6139 | Test Acc 0.5850
Epoch 0029 | Time 0.219 (0.096) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.6195 | Test Acc 0.5946
Epoch 0030 | Time 0.224 (0.096) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.6297 | Test Acc 0.5984
Epoch 0031 | Time 0.216 (0.096) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.6331 | Test Acc 0.5995
Epoch 0032 | Time 0.223 (0.097) | NFE-F 20.3 | NFE-B 0.0 | Train Acc 0.6338 | Test Acc 0.6002
Epoch 0033 | Time 0.219 (0.100) | NFE-F 21.3 | NFE-B 0.0 | Train Acc 0.6403 | Test Acc 0.6067
Epoch 0034 | Time 0.218 (0.105) | NFE-F 23.8 | NFE-B 0.0 | Train Acc 0.6428 | Test Acc 0.6068
Epoch 0035 | Time 0.229 (0.111) | NFE-F 26.1 | NFE-B 0.0 | Train Acc 0.6506 | Test Acc 0.6175
Epoch 0036 | Time 0.219 (0.110) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6499 | Test Acc 0.6078
Epoch 0037 | Time 0.209 (0.111) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6600 | Test Acc 0.6182
Epoch 0038 | Time 0.228 (0.111) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6574 | Test Acc 0.6189
Epoch 0039 | Time 0.219 (0.111) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6676 | Test Acc 0.6258
Epoch 0040 | Time 0.264 (0.115) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6552 | Test Acc 0.6165
Epoch 0041 | Time 0.225 (0.113) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6745 | Test Acc 0.6316
Epoch 0042 | Time 0.227 (0.113) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6692 | Test Acc 0.6281
Epoch 0043 | Time 0.219 (0.113) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6790 | Test Acc 0.6331
Epoch 0044 | Time 0.238 (0.113) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6798 | Test Acc 0.6340
Epoch 0045 | Time 0.236 (0.111) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6885 | Test Acc 0.6394
Epoch 0046 | Time 0.216 (0.112) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6739 | Test Acc 0.6247
Epoch 0047 | Time 0.206 (0.111) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6915 | Test Acc 0.6435
Epoch 0048 | Time 0.227 (0.111) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6968 | Test Acc 0.6483
Epoch 0049 | Time 0.242 (0.112) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6990 | Test Acc 0.6428
Epoch 0050 | Time 0.226 (0.111) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6957 | Test Acc 0.6408
Epoch 0051 | Time 0.222 (0.110) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7079 | Test Acc 0.6533
Epoch 0052 | Time 0.211 (0.111) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7078 | Test Acc 0.6510
Epoch 0053 | Time 0.243 (0.111) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7094 | Test Acc 0.6540
Epoch 0054 | Time 0.234 (0.113) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7106 | Test Acc 0.6605
Epoch 0055 | Time 0.245 (0.113) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7163 | Test Acc 0.6583
Epoch 0056 | Time 0.231 (0.114) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7165 | Test Acc 0.6572
Epoch 0057 | Time 0.219 (0.113) | NFE-F 26.4 | NFE-B 0.0 | Train Acc 0.7189 | Test Acc 0.6617
Epoch 0058 | Time 0.225 (0.113) | NFE-F 26.5 | NFE-B 0.0 | Train Acc 0.7219 | Test Acc 0.6648
Epoch 0059 | Time 0.226 (0.114) | NFE-F 27.0 | NFE-B 0.0 | Train Acc 0.7160 | Test Acc 0.6540
Epoch 0060 | Time 0.230 (0.119) | NFE-F 29.2 | NFE-B 0.0 | Train Acc 0.7245 | Test Acc 0.6643
Epoch 0061 | Time 0.228 (0.112) | NFE-F 26.4 | NFE-B 0.0 | Train Acc 0.7378 | Test Acc 0.6720
Epoch 0062 | Time 0.233 (0.111) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7385 | Test Acc 0.6705
Epoch 0063 | Time 0.217 (0.111) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7384 | Test Acc 0.6699
Epoch 0064 | Time 0.229 (0.111) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7391 | Test Acc 0.6702
Epoch 0065 | Time 0.223 (0.112) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7396 | Test Acc 0.6708
Epoch 0066 | Time 0.228 (0.111) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7406 | Test Acc 0.6709
Epoch 0067 | Time 0.249 (0.112) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7401 | Test Acc 0.6698
Epoch 0068 | Time 0.254 (0.112) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7412 | Test Acc 0.6716
Epoch 0069 | Time 0.206 (0.113) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7403 | Test Acc 0.6688
Epoch 0070 | Time 0.221 (0.114) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7413 | Test Acc 0.6719
Epoch 0071 | Time 0.222 (0.113) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7419 | Test Acc 0.6718
Epoch 0072 | Time 0.232 (0.114) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7429 | Test Acc 0.6718
Epoch 0073 | Time 0.234 (0.111) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7421 | Test Acc 0.6711
Epoch 0074 | Time 0.236 (0.112) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7434 | Test Acc 0.6716
Epoch 0075 | Time 0.224 (0.111) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7418 | Test Acc 0.6699
Epoch 0076 | Time 0.231 (0.112) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7429 | Test Acc 0.6709
Epoch 0077 | Time 0.218 (0.112) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7424 | Test Acc 0.6700
Epoch 0078 | Time 0.221 (0.113) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7439 | Test Acc 0.6715
Epoch 0079 | Time 0.216 (0.111) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7442 | Test Acc 0.6727
Epoch 0080 | Time 0.245 (0.112) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7436 | Test Acc 0.6718
Epoch 0081 | Time 0.235 (0.111) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7434 | Test Acc 0.6703
Epoch 0082 | Time 0.250 (0.111) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7439 | Test Acc 0.6713
Epoch 0083 | Time 0.251 (0.114) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7453 | Test Acc 0.6720
Epoch 0084 | Time 0.224 (0.113) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7448 | Test Acc 0.6723
Epoch 0085 | Time 0.231 (0.112) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7446 | Test Acc 0.6709
Epoch 0086 | Time 0.240 (0.113) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7461 | Test Acc 0.6733
Epoch 0087 | Time 0.235 (0.113) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7456 | Test Acc 0.6705
Epoch 0088 | Time 0.236 (0.112) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7467 | Test Acc 0.6718
Epoch 0089 | Time 0.220 (0.111) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7459 | Test Acc 0.6725
Epoch 0090 | Time 0.224 (0.111) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7453 | Test Acc 0.6733
Epoch 0091 | Time 0.218 (0.111) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7462 | Test Acc 0.6718
Epoch 0092 | Time 0.236 (0.111) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7477 | Test Acc 0.6707
Epoch 0093 | Time 0.240 (0.112) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7477 | Test Acc 0.6710
Epoch 0094 | Time 0.241 (0.111) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7474 | Test Acc 0.6709
Epoch 0095 | Time 0.239 (0.112) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7472 | Test Acc 0.6715
Epoch 0096 | Time 0.228 (0.110) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7481 | Test Acc 0.6715
Epoch 0097 | Time 0.256 (0.111) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7480 | Test Acc 0.6735
Epoch 0098 | Time 0.232 (0.114) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7479 | Test Acc 0.6712
Epoch 0099 | Time 0.226 (0.113) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7485 | Test Acc 0.6736
Epoch 0100 | Time 0.222 (0.113) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7487 | Test Acc 0.6736
Epoch 0101 | Time 0.225 (0.114) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7504 | Test Acc 0.6731
Epoch 0102 | Time 0.228 (0.113) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7508 | Test Acc 0.6726
Epoch 0103 | Time 0.231 (0.111) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7505 | Test Acc 0.6730
Epoch 0104 | Time 0.229 (0.112) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7510 | Test Acc 0.6727
Epoch 0105 | Time 0.242 (0.112) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7510 | Test Acc 0.6725
Epoch 0106 | Time 0.235 (0.112) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7510 | Test Acc 0.6730
Epoch 0107 | Time 0.221 (0.112) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7504 | Test Acc 0.6737
Epoch 0108 | Time 0.219 (0.111) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7506 | Test Acc 0.6734
Epoch 0109 | Time 0.224 (0.111) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7509 | Test Acc 0.6723
Epoch 0110 | Time 0.219 (0.111) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7512 | Test Acc 0.6726
Epoch 0111 | Time 0.246 (0.111) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7510 | Test Acc 0.6735
Epoch 0112 | Time 0.235 (0.116) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7509 | Test Acc 0.6731
Epoch 0113 | Time 0.224 (0.112) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7512 | Test Acc 0.6745
Epoch 0114 | Time 0.227 (0.112) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7511 | Test Acc 0.6739
Epoch 0115 | Time 0.221 (0.114) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7510 | Test Acc 0.6738
Epoch 0116 | Time 0.233 (0.111) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7508 | Test Acc 0.6730
Epoch 0117 | Time 0.238 (0.112) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7512 | Test Acc 0.6734
Epoch 0118 | Time 0.227 (0.113) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7508 | Test Acc 0.6739
Epoch 0119 | Time 0.238 (0.111) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7513 | Test Acc 0.6734
Epoch 0120 | Time 0.231 (0.110) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7512 | Test Acc 0.6734
Epoch 0121 | Time 0.213 (0.111) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7511 | Test Acc 0.6736
Epoch 0122 | Time 0.229 (0.111) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7512 | Test Acc 0.6745
Epoch 0123 | Time 0.220 (0.111) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7510 | Test Acc 0.6744
Epoch 0124 | Time 0.222 (0.111) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7511 | Test Acc 0.6736
Epoch 0125 | Time 0.218 (0.111) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7507 | Test Acc 0.6741
Epoch 0126 | Time 0.219 (0.111) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7517 | Test Acc 0.6736
Epoch 0127 | Time 0.230 (0.114) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7514 | Test Acc 0.6738
Epoch 0128 | Time 0.227 (0.115) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7519 | Test Acc 0.6728
Epoch 0129 | Time 0.238 (0.113) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7516 | Test Acc 0.6727
Epoch 0130 | Time 0.225 (0.112) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7520 | Test Acc 0.6733
Epoch 0131 | Time 0.232 (0.112) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7515 | Test Acc 0.6744
Epoch 0132 | Time 0.216 (0.112) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7511 | Test Acc 0.6744
Epoch 0133 | Time 0.218 (0.112) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7513 | Test Acc 0.6747
Epoch 0134 | Time 0.226 (0.111) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7515 | Test Acc 0.6740
Epoch 0135 | Time 0.230 (0.112) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7514 | Test Acc 0.6736
Epoch 0136 | Time 0.219 (0.110) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7512 | Test Acc 0.6738
Epoch 0137 | Time 0.225 (0.110) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7510 | Test Acc 0.6733
Epoch 0138 | Time 0.223 (0.110) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7514 | Test Acc 0.6741
Epoch 0139 | Time 0.392 (0.227) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7512 | Test Acc 0.6726
Epoch 0140 | Time 0.428 (0.215) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7518 | Test Acc 0.6741
Epoch 0141 | Time 0.390 (0.214) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7517 | Test Acc 0.6743
Epoch 0142 | Time 0.467 (0.217) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7516 | Test Acc 0.6744
Epoch 0143 | Time 0.376 (0.218) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7517 | Test Acc 0.6746
Epoch 0144 | Time 0.405 (0.242) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7514 | Test Acc 0.6745
Epoch 0145 | Time 0.457 (0.228) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7517 | Test Acc 0.6747
Epoch 0146 | Time 0.446 (0.230) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7516 | Test Acc 0.6750
Epoch 0147 | Time 0.456 (0.227) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7517 | Test Acc 0.6750
Epoch 0148 | Time 0.442 (0.229) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7516 | Test Acc 0.6751
Epoch 0149 | Time 0.393 (0.228) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7516 | Test Acc 0.6749
Epoch 0150 | Time 0.506 (0.230) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7516 | Test Acc 0.6749
Epoch 0151 | Time 0.433 (0.211) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7516 | Test Acc 0.6749
Epoch 0152 | Time 0.528 (0.224) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7516 | Test Acc 0.6750
Epoch 0153 | Time 0.483 (0.232) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7516 | Test Acc 0.6748
Epoch 0154 | Time 0.491 (0.217) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7517 | Test Acc 0.6750
Epoch 0155 | Time 0.508 (0.240) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7517 | Test Acc 0.6749
Epoch 0156 | Time 0.364 (0.208) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7517 | Test Acc 0.6749
Epoch 0157 | Time 0.414 (0.228) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7518 | Test Acc 0.6749
Epoch 0158 | Time 0.432 (0.231) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7518 | Test Acc 0.6749
Epoch 0159 | Time 0.385 (0.224) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7517 | Test Acc 0.6749
Epoch 0160 | Time 0.434 (0.219) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7518 | Test Acc 0.6749
Epoch 0161 | Time 0.660 (0.231) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7518 | Test Acc 0.6749
Epoch 0162 | Time 0.414 (0.230) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7518 | Test Acc 0.6749
Epoch 0163 | Time 0.482 (0.215) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7517 | Test Acc 0.6749
Epoch 0164 | Time 0.507 (0.233) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7518 | Test Acc 0.6749
Epoch 0165 | Time 0.428 (0.239) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7517 | Test Acc 0.6751
Epoch 0166 | Time 0.405 (0.227) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7518 | Test Acc 0.6752
Epoch 0167 | Time 0.390 (0.220) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7517 | Test Acc 0.6747
Epoch 0168 | Time 0.482 (0.232) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7519 | Test Acc 0.6746
Epoch 0169 | Time 0.403 (0.203) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7518 | Test Acc 0.6745
Epoch 0170 | Time 0.459 (0.203) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7518 | Test Acc 0.6749
Epoch 0171 | Time 0.394 (0.221) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7519 | Test Acc 0.6748
Epoch 0172 | Time 0.457 (0.237) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7518 | Test Acc 0.6747
Epoch 0173 | Time 0.592 (0.242) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7520 | Test Acc 0.6749
Epoch 0174 | Time 0.431 (0.218) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7518 | Test Acc 0.6750
Epoch 0175 | Time 0.432 (0.229) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7520 | Test Acc 0.6747
Epoch 0176 | Time 0.467 (0.220) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7519 | Test Acc 0.6748
Epoch 0177 | Time 0.404 (0.211) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7520 | Test Acc 0.6749
Epoch 0178 | Time 0.436 (0.212) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7520 | Test Acc 0.6750
Epoch 0179 | Time 0.542 (0.221) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7520 | Test Acc 0.6749
Epoch 0180 | Time 0.433 (0.234) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7519 | Test Acc 0.6748
Epoch 0181 | Time 0.431 (0.227) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7520 | Test Acc 0.6750
Epoch 0182 | Time 0.454 (0.216) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7519 | Test Acc 0.6749
Epoch 0183 | Time 0.424 (0.225) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7519 | Test Acc 0.6750
Epoch 0184 | Time 0.393 (0.211) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7519 | Test Acc 0.6750
Epoch 0185 | Time 0.395 (0.214) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7519 | Test Acc 0.6751
Epoch 0186 | Time 0.403 (0.209) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7520 | Test Acc 0.6752
Epoch 0187 | Time 0.400 (0.219) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7519 | Test Acc 0.6752
Epoch 0188 | Time 0.435 (0.245) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7519 | Test Acc 0.6751
Epoch 0189 | Time 0.399 (0.226) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7519 | Test Acc 0.6748
Epoch 0190 | Time 0.391 (0.222) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7519 | Test Acc 0.6751
Epoch 0191 | Time 0.393 (0.229) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7519 | Test Acc 0.6752
Epoch 0192 | Time 0.433 (0.217) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7520 | Test Acc 0.6752
Epoch 0193 | Time 0.495 (0.236) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7519 | Test Acc 0.6750
Epoch 0194 | Time 0.469 (0.240) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7519 | Test Acc 0.6751
Epoch 0195 | Time 0.437 (0.242) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7519 | Test Acc 0.6749
Epoch 0196 | Time 0.449 (0.227) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7519 | Test Acc 0.6747
Epoch 0197 | Time 0.424 (0.224) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7520 | Test Acc 0.6747
Epoch 0198 | Time 0.431 (0.216) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7521 | Test Acc 0.6749
Epoch 0199 | Time 0.460 (0.226) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7520 | Test Acc 0.6747
/home/manzand/Documents/Python/neuralODE_examples/cifar/odenet_cifar_example.py
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 19 15:10:31 2021

@author: manzand
"""

import os
import argparse
import logging
import time
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms
from scipy.io import savemat

parser = argparse.ArgumentParser()
parser.add_argument('--network', type=str, choices=['resnet', 'odenet'], default='odenet')
parser.add_argument('--tol', type=float, default=1e-3)
parser.add_argument('--adjoint', type=eval, default=False, choices=[True, False])
parser.add_argument('--downsampling-method', type=str, default='conv', choices=['conv', 'res'])
parser.add_argument('--nepochs', type=int, default=100)
parser.add_argument('--data_aug', type=eval, default=False, choices=[True, False])
parser.add_argument('--lr', type=float, default=0.01)
parser.add_argument('--batch_size', type=int, default=128)
parser.add_argument('--test_batch_size', type=int, default=1000)

parser.add_argument('--save', type=str, default='../logs/cifarmid')
parser.add_argument('--debug', action='store_true')
parser.add_argument('--gpu', type=int, default=0)
args = parser.parse_args()

if args.adjoint:
    from torchdiffeq import odeint_adjoint as odeint
else:
    from torchdiffeq import odeint


def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


def norm(dim):
    return nn.BatchNorm2d(min(64, dim), dim)


class ConcatConv2d(nn.Module):

    def __init__(self, dim_in, dim_out, ksize=3, stride=1, padding=0, dilation=1, groups=1, bias=True, transpose=False):
        super(ConcatConv2d, self).__init__()
        module = nn.ConvTranspose2d if transpose else nn.Conv2d
        self._layer = module(
            dim_in + 1, dim_out, kernel_size=ksize, stride=stride, padding=padding, dilation=dilation, groups=groups,
            bias=bias
        )

    def forward(self, t, x):
        tt = torch.ones_like(x[:, :1, :, :]) * t
        ttx = torch.cat([tt, x], 1)
        return self._layer(ttx)


class ODEfunc(nn.Module):

    def __init__(self,dim):
        super(ODEfunc, self).__init__()
        self.fc1 = nn.Linear(dim,16)
        self.fc2 = nn.Linear(16, dim)
        self.nfe = 0

    def forward(self, t, x):
        self.nfe += 1
        out = self.fc1(x)
        out = self.fc2(out)
        return out


class ODEBlock(nn.Module):

    def __init__(self, odefunc):
        super(ODEBlock, self).__init__()
        self.odefunc = odefunc
        self.integration_time = torch.tensor([0, 1]).float()

    def forward(self, x):
        self.integration_time = self.integration_time.type_as(x)
        out = odeint(self.odefunc, x, self.integration_time, rtol=args.tol, atol=args.tol)
        return out[1]

    @property
    def nfe(self):
        return self.odefunc.nfe

    @nfe.setter
    def nfe(self, value):
        self.odefunc.nfe = value


class Flatten(nn.Module):

    def __init__(self):
        super(Flatten, self).__init__()

    def forward(self, x):
        shape = torch.prod(torch.tensor(x.shape[1:])).item()
        return x.view(-1, shape)


class RunningAverageMeter(object):
    """Computes and stores the average and current value"""

    def __init__(self, momentum=0.99):
        self.momentum = momentum
        self.reset()

    def reset(self):
        self.val = None
        self.avg = 0

    def update(self, val):
        if self.val is None:
            self.avg = val
        else:
            self.avg = self.avg * self.momentum + val * (1 - self.momentum)
        self.val = val


def get_cifar_loaders(data_aug=False, batch_size=32, test_batch_size=1000, perc=1.0):
    if data_aug:
        transform_train = transforms.Compose([
            transforms.RandomCrop(28, padding=4),
            transforms.ToTensor(),
        ])
    else:
        transform_train = transforms.Compose([
            transforms.ToTensor(),
        ])

    transform_test = transforms.Compose([
        transforms.ToTensor(),
    ])

    train_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_train), batch_size=batch_size,
        shuffle=True, num_workers=2, drop_last=True
    )

    train_eval_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    test_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=False, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    return train_loader, test_loader, train_eval_loader


def inf_generator(iterable):
    """Allows training with DataLoaders in a single infinite loop:
        for i, (x, y) in enumerate(inf_generator(train_loader)):
    """
    iterator = iterable.__iter__()
    while True:
        try:
            yield iterator.__next__()
        except StopIteration:
            iterator = iterable.__iter__()


def learning_rate_with_decay(batch_size, batch_denom, batches_per_epoch, boundary_epochs, decay_rates):
    initial_learning_rate = args.lr * batch_size / batch_denom

    boundaries = [int(batches_per_epoch * epoch) for epoch in boundary_epochs]
    vals = [initial_learning_rate * decay for decay in decay_rates]

    def learning_rate_fn(itr):
        lt = [itr < b for b in boundaries] + [True]
        i = np.argmax(lt)
        return vals[i]

    return learning_rate_fn


def one_hot(x, K):
    return np.array(x[:, None] == np.arange(K)[None, :], dtype=int)


def accuracy(model, dataset_loader):
    total_correct = 0
    for x, y in dataset_loader:
        x = x.to(device)
        y = one_hot(np.array(y.numpy()), 10)

        target_class = np.argmax(y, axis=1)
        predicted_class = np.argmax(model(x).cpu().detach().numpy(), axis=1)
        total_correct += np.sum(predicted_class == target_class)
    return total_correct / len(dataset_loader.dataset)


def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)


def makedirs(dirname):
    if not os.path.exists(dirname):
        os.makedirs(dirname)


def get_logger(logpath, filepath, package_files=[], displaying=True, saving=True, debug=False):
    logger = logging.getLogger()
    if debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logger.setLevel(level)
    if saving:
        info_file_handler = logging.FileHandler(logpath, mode="a")
        info_file_handler.setLevel(level)
        logger.addHandler(info_file_handler)
    if displaying:
        console_handler = logging.StreamHandler()
        console_handler.setLevel(level)
        logger.addHandler(console_handler)
    logger.info(filepath)
    with open(filepath, "r") as f:
        logger.info(f.read())

    for f in package_files:
        logger.info(f)
        with open(f, "r") as package_f:
            logger.info(package_f.read())

    return logger


if __name__ == '__main__':

    makedirs(args.save)
    logger = get_logger(logpath=os.path.join(args.save, 'logs'), filepath=os.path.abspath(__file__))
    logger.info(args)

    device = torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')

    is_odenet = args.network == 'odenet'

    downsampling_layers = [
        nn.Conv2d(3, 36, 3, 1),
        norm(36),
        nn.ReLU(inplace=True),
        nn.Conv2d(36, 24, 4, 2, 1),
        norm(24),
        nn.ReLU(inplace=True),
        nn.Conv2d(24, 16, 4, 2, 1),
        norm(16),
        nn.ReLU(inplace=True),
        Flatten(),
    ]


    # feature_layers = [ODEBlock(ODEfunc(490))] 
    # fc_layers = [nn.Linear(490, 10)]
    feature_layers = [ODEBlock(ODEfunc(784))] 
    fc_layers = [nn.Linear(784, 10)]

    model = nn.Sequential(*downsampling_layers, *feature_layers, *fc_layers).to(device)

    logger.info(model)
    logger.info('Number of parameters: {}'.format(count_parameters(model)))

    criterion = nn.CrossEntropyLoss().to(device)

    train_loader, test_loader, train_eval_loader = get_cifar_loaders(
        args.data_aug, args.batch_size, args.test_batch_size
    )

    data_gen = inf_generator(train_loader)
    batches_per_epoch = len(train_loader)

    lr_fn = learning_rate_with_decay(
        args.batch_size, batch_denom=128, batches_per_epoch=batches_per_epoch, boundary_epochs=[60, 100, 140],
        decay_rates=[1, 0.1, 0.01, 0.001]
    )

    optimizer = torch.optim.SGD(model.parameters(), lr=args.lr, momentum=0.9)

    best_acc = 0
    batch_time_meter = RunningAverageMeter()
    f_nfe_meter = RunningAverageMeter()
    b_nfe_meter = RunningAverageMeter()
    end = time.time()

    for itr in range(args.nepochs * batches_per_epoch):

        for param_group in optimizer.param_groups:
            param_group['lr'] = lr_fn(itr)

        optimizer.zero_grad()
        x, y = data_gen.__next__()
        x = x.to(device)
        y = y.to(device)
        logits = model(x)
        loss = criterion(logits, y)

        if is_odenet:
            nfe_forward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        loss.backward()
        optimizer.step()

        if is_odenet:
            nfe_backward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        batch_time_meter.update(time.time() - end)
        if is_odenet:
            f_nfe_meter.update(nfe_forward)
            b_nfe_meter.update(nfe_backward)
        end = time.time()

        if itr % batches_per_epoch == 0:
            with torch.no_grad():
                train_acc = accuracy(model, train_eval_loader)
                val_acc = accuracy(model, test_loader)
                if val_acc > best_acc:
                    torch.save({'state_dict': model.state_dict(), 'args': args}, os.path.join(args.save, 'model.pth'))
                    best_acc = val_acc
                if best_acc > 0.85 and train_acc > 0.85:
                    break
                logger.info(
                    "Epoch {:04d} | Time {:.3f} ({:.3f}) | NFE-F {:.1f} | NFE-B {:.1f} | "
                    "Train Acc {:.4f} | Test Acc {:.4f}".format(
                        itr // batches_per_epoch, batch_time_meter.val, batch_time_meter.avg, f_nfe_meter.avg,
                        b_nfe_meter.avg, train_acc, val_acc
                    )
                )
    names = []
    params = []
    for name,param in model.named_parameters():
        names.append(name)
        params.append(param.detach().numpy())
    nn1 = dict({'Wb':params,'names':names})
    for name,param in model.named_buffers():
        names.append(name)
        params.append(param.detach().numpy())
    savemat("odecnn_cifar_mid.mat",nn1)
Namespace(adjoint=False, batch_size=128, data_aug=False, debug=False, downsampling_method='conv', gpu=0, lr=0.01, nepochs=100, network='odenet', save='../logs/cifarmid', test_batch_size=1000, tol=0.001)
Sequential(
  (0): Conv2d(3, 36, kernel_size=(3, 3), stride=(1, 1))
  (1): BatchNorm2d(36, eps=36, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(36, 24, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (4): BatchNorm2d(24, eps=24, momentum=0.1, affine=True, track_running_stats=True)
  (5): ReLU(inplace=True)
  (6): Conv2d(24, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (7): BatchNorm2d(16, eps=16, momentum=0.1, affine=True, track_running_stats=True)
  (8): ReLU(inplace=True)
  (9): Flatten()
  (10): ODEBlock(
    (odefunc): ODEfunc(
      (fc1): Linear(in_features=784, out_features=16, bias=True)
      (fc2): Linear(in_features=16, out_features=784, bias=True)
    )
  )
  (11): Linear(in_features=784, out_features=10, bias=True)
)
Number of parameters: 54906
Epoch 0000 | Time 0.226 (0.226) | NFE-F 26.0 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0001 | Time 0.230 (0.109) | NFE-F 20.7 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0002 | Time 0.229 (0.107) | NFE-F 21.0 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0003 | Time 0.223 (0.109) | NFE-F 21.7 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0004 | Time 0.257 (0.112) | NFE-F 23.4 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0005 | Time 0.226 (0.107) | NFE-F 21.3 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0006 | Time 0.248 (0.106) | NFE-F 21.1 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0007 | Time 0.221 (0.104) | NFE-F 20.3 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0008 | Time 0.234 (0.104) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0009 | Time 0.200 (0.093) | NFE-F 14.9 | NFE-B 0.0 | Train Acc 0.2245 | Test Acc 0.2257
Epoch 0010 | Time 0.263 (0.120) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.2816 | Test Acc 0.2884
Epoch 0011 | Time 0.309 (0.150) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.2926 | Test Acc 0.3028
Epoch 0012 | Time 0.216 (0.132) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.3119 | Test Acc 0.3183
Epoch 0013 | Time 0.275 (0.144) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.3417 | Test Acc 0.3460
Epoch 0014 | Time 0.219 (0.101) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.3663 | Test Acc 0.3706
Epoch 0015 | Time 0.209 (0.091) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.3976 | Test Acc 0.4004
Epoch 0016 | Time 0.209 (0.091) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.4044 | Test Acc 0.4081
Epoch 0017 | Time 0.205 (0.091) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.4342 | Test Acc 0.4329
Epoch 0018 | Time 0.219 (0.093) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.4803 | Test Acc 0.4759
Epoch 0019 | Time 0.323 (0.112) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.4976 | Test Acc 0.4904
Epoch 0020 | Time 0.231 (0.105) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5055 | Test Acc 0.4958
Epoch 0021 | Time 0.232 (0.094) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5348 | Test Acc 0.5217
Epoch 0022 | Time 0.211 (0.091) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5648 | Test Acc 0.5516
Epoch 0023 | Time 0.205 (0.090) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5704 | Test Acc 0.5516
Epoch 0024 | Time 0.242 (0.099) | NFE-F 17.6 | NFE-B 0.0 | Train Acc 0.5881 | Test Acc 0.5760
Epoch 0025 | Time 0.235 (0.106) | NFE-F 20.1 | NFE-B 0.0 | Train Acc 0.6054 | Test Acc 0.5912
Epoch 0026 | Time 0.221 (0.105) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.6134 | Test Acc 0.5933
Epoch 0027 | Time 0.226 (0.105) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.6092 | Test Acc 0.5896
Epoch 0028 | Time 0.228 (0.106) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.6282 | Test Acc 0.6028
Epoch 0029 | Time 0.222 (0.105) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.6212 | Test Acc 0.5969
Epoch 0030 | Time 0.226 (0.105) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.6375 | Test Acc 0.6074
Epoch 0031 | Time 0.233 (0.106) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.6455 | Test Acc 0.6151
Epoch 0032 | Time 0.222 (0.105) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.6465 | Test Acc 0.6168
Epoch 0033 | Time 0.216 (0.105) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.6517 | Test Acc 0.6169
Epoch 0034 | Time 0.236 (0.114) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.6611 | Test Acc 0.6260
Epoch 0035 | Time 0.250 (0.120) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.6596 | Test Acc 0.6236
Epoch 0036 | Time 0.239 (0.112) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.6570 | Test Acc 0.6191
Epoch 0037 | Time 0.246 (0.114) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.6729 | Test Acc 0.6345
Epoch 0038 | Time 0.393 (0.166) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.6767 | Test Acc 0.6393
Epoch 0039 | Time 0.232 (0.111) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.6791 | Test Acc 0.6371
Epoch 0040 | Time 0.229 (0.105) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.6826 | Test Acc 0.6416
Epoch 0041 | Time 0.240 (0.115) | NFE-F 24.4 | NFE-B 0.0 | Train Acc 0.6811 | Test Acc 0.6423
Epoch 0042 | Time 0.267 (0.195) | NFE-F 25.7 | NFE-B 0.0 | Train Acc 0.6820 | Test Acc 0.6375
Epoch 0043 | Time 0.255 (0.128) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6900 | Test Acc 0.6436
Epoch 0044 | Time 0.244 (0.122) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6921 | Test Acc 0.6437
Epoch 0045 | Time 0.262 (0.124) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6991 | Test Acc 0.6480
Epoch 0046 | Time 0.251 (0.120) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6958 | Test Acc 0.6435
Epoch 0047 | Time 0.267 (0.126) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7011 | Test Acc 0.6513
Epoch 0048 | Time 0.239 (0.123) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7049 | Test Acc 0.6544
Epoch 0049 | Time 0.298 (0.133) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7045 | Test Acc 0.6546
Epoch 0050 | Time 0.270 (0.122) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7027 | Test Acc 0.6536
Epoch 0051 | Time 0.250 (0.121) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7053 | Test Acc 0.6539
Epoch 0052 | Time 0.244 (0.120) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.6988 | Test Acc 0.6453
Epoch 0053 | Time 0.247 (0.123) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7094 | Test Acc 0.6555
Epoch 0054 | Time 0.248 (0.126) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7129 | Test Acc 0.6565
Epoch 0055 | Time 0.244 (0.121) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7122 | Test Acc 0.6608
Epoch 0056 | Time 0.237 (0.119) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7207 | Test Acc 0.6578
Epoch 0057 | Time 0.261 (0.119) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7169 | Test Acc 0.6569
Epoch 0058 | Time 0.255 (0.120) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7238 | Test Acc 0.6628
Epoch 0059 | Time 0.244 (0.122) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7208 | Test Acc 0.6632
Epoch 0060 | Time 0.239 (0.121) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7250 | Test Acc 0.6649
Epoch 0061 | Time 0.259 (0.121) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7388 | Test Acc 0.6741
Epoch 0062 | Time 0.261 (0.120) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7399 | Test Acc 0.6745
Epoch 0063 | Time 0.253 (0.120) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7406 | Test Acc 0.6778
Epoch 0064 | Time 0.252 (0.119) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7407 | Test Acc 0.6768
Epoch 0065 | Time 0.244 (0.120) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7413 | Test Acc 0.6777
Epoch 0066 | Time 0.241 (0.122) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7419 | Test Acc 0.6778
Epoch 0067 | Time 0.251 (0.123) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7410 | Test Acc 0.6782
Epoch 0068 | Time 0.254 (0.121) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7425 | Test Acc 0.6763
Epoch 0069 | Time 0.246 (0.120) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7437 | Test Acc 0.6776
Epoch 0070 | Time 0.250 (0.119) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7420 | Test Acc 0.6776
Epoch 0071 | Time 0.242 (0.119) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7437 | Test Acc 0.6762
Epoch 0072 | Time 0.255 (0.124) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7432 | Test Acc 0.6764
Epoch 0073 | Time 0.258 (0.120) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7432 | Test Acc 0.6764
Epoch 0074 | Time 0.239 (0.120) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7440 | Test Acc 0.6743
Epoch 0075 | Time 0.252 (0.126) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7456 | Test Acc 0.6768
Epoch 0076 | Time 0.261 (0.128) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7457 | Test Acc 0.6779
Epoch 0077 | Time 0.244 (0.123) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7452 | Test Acc 0.6764
Epoch 0078 | Time 0.257 (0.124) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7455 | Test Acc 0.6774
Epoch 0079 | Time 0.237 (0.122) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7449 | Test Acc 0.6782
Epoch 0080 | Time 0.286 (0.130) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7464 | Test Acc 0.6772
Epoch 0081 | Time 0.265 (0.158) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7469 | Test Acc 0.6773
Epoch 0082 | Time 0.442 (0.200) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7455 | Test Acc 0.6761
Epoch 0083 | Time 0.449 (0.238) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7467 | Test Acc 0.6765
Epoch 0084 | Time 0.448 (0.262) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7471 | Test Acc 0.6797
Epoch 0085 | Time 0.475 (0.222) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7482 | Test Acc 0.6802
Epoch 0086 | Time 0.396 (0.224) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7481 | Test Acc 0.6770
Epoch 0087 | Time 0.482 (0.220) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7488 | Test Acc 0.6776
Epoch 0088 | Time 0.443 (0.216) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7478 | Test Acc 0.6754
Epoch 0089 | Time 0.422 (0.220) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7500 | Test Acc 0.6787
Epoch 0090 | Time 0.477 (0.213) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7488 | Test Acc 0.6778
Epoch 0091 | Time 0.473 (0.218) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7502 | Test Acc 0.6782
Epoch 0092 | Time 0.529 (0.220) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7483 | Test Acc 0.6791
Epoch 0093 | Time 0.601 (0.257) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7506 | Test Acc 0.6778
Epoch 0094 | Time 0.485 (0.254) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7508 | Test Acc 0.6777
Epoch 0095 | Time 0.584 (0.261) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7499 | Test Acc 0.6785
Epoch 0096 | Time 0.484 (0.257) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7502 | Test Acc 0.6753
Epoch 0097 | Time 0.594 (0.282) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7524 | Test Acc 0.6781
Epoch 0098 | Time 0.587 (0.273) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7508 | Test Acc 0.6764
Epoch 0099 | Time 0.792 (0.463) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.7500 | Test Acc 0.6764
/home/manzand/Documents/Python/neuralODE_examples/cifar/odenet_cifar_example.py
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 19 15:10:31 2021

@author: manzand
"""

import os
import argparse
import logging
import time
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms
from scipy.io import savemat

parser = argparse.ArgumentParser()
parser.add_argument('--network', type=str, choices=['resnet', 'odenet'], default='odenet')
parser.add_argument('--tol', type=float, default=1e-3)
parser.add_argument('--adjoint', type=eval, default=False, choices=[True, False])
parser.add_argument('--downsampling-method', type=str, default='conv', choices=['conv', 'res'])
parser.add_argument('--nepochs', type=int, default=100)
parser.add_argument('--data_aug', type=eval, default=False, choices=[True, False])
parser.add_argument('--lr', type=float, default=0.01)
parser.add_argument('--batch_size', type=int, default=128)
parser.add_argument('--test_batch_size', type=int, default=1000)

parser.add_argument('--save', type=str, default='../logs/cifarmid')
parser.add_argument('--debug', action='store_true')
parser.add_argument('--gpu', type=int, default=0)
args = parser.parse_args()

if args.adjoint:
    from torchdiffeq import odeint_adjoint as odeint
else:
    from torchdiffeq import odeint


def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


def norm(dim):
    return nn.BatchNorm2d(min(64, dim), dim)


class ConcatConv2d(nn.Module):

    def __init__(self, dim_in, dim_out, ksize=3, stride=1, padding=0, dilation=1, groups=1, bias=True, transpose=False):
        super(ConcatConv2d, self).__init__()
        module = nn.ConvTranspose2d if transpose else nn.Conv2d
        self._layer = module(
            dim_in + 1, dim_out, kernel_size=ksize, stride=stride, padding=padding, dilation=dilation, groups=groups,
            bias=bias
        )

    def forward(self, t, x):
        tt = torch.ones_like(x[:, :1, :, :]) * t
        ttx = torch.cat([tt, x], 1)
        return self._layer(ttx)


class ODEfunc(nn.Module):

    def __init__(self,dim):
        super(ODEfunc, self).__init__()
        self.fc1 = nn.Linear(dim,16)
        self.fc2 = nn.Linear(16, dim)
        self.nfe = 0

    def forward(self, t, x):
        self.nfe += 1
        out = self.fc1(x)
        out = self.fc2(out)
        return out


class ODEBlock(nn.Module):

    def __init__(self, odefunc):
        super(ODEBlock, self).__init__()
        self.odefunc = odefunc
        self.integration_time = torch.tensor([0, 1]).float()

    def forward(self, x):
        self.integration_time = self.integration_time.type_as(x)
        out = odeint(self.odefunc, x, self.integration_time, rtol=args.tol, atol=args.tol)
        return out[1]

    @property
    def nfe(self):
        return self.odefunc.nfe

    @nfe.setter
    def nfe(self, value):
        self.odefunc.nfe = value


class Flatten(nn.Module):

    def __init__(self):
        super(Flatten, self).__init__()

    def forward(self, x):
        shape = torch.prod(torch.tensor(x.shape[1:])).item()
        return x.view(-1, shape)


class RunningAverageMeter(object):
    """Computes and stores the average and current value"""

    def __init__(self, momentum=0.99):
        self.momentum = momentum
        self.reset()

    def reset(self):
        self.val = None
        self.avg = 0

    def update(self, val):
        if self.val is None:
            self.avg = val
        else:
            self.avg = self.avg * self.momentum + val * (1 - self.momentum)
        self.val = val


def get_cifar_loaders(data_aug=False, batch_size=32, test_batch_size=1000, perc=1.0):
    if data_aug:
        transform_train = transforms.Compose([
            transforms.RandomCrop(28, padding=4),
            transforms.ToTensor(),
        ])
    else:
        transform_train = transforms.Compose([
            transforms.ToTensor(),
        ])

    transform_test = transforms.Compose([
        transforms.ToTensor(),
    ])

    train_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_train), batch_size=batch_size,
        shuffle=True, num_workers=2, drop_last=True
    )

    train_eval_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    test_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=False, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    return train_loader, test_loader, train_eval_loader


def inf_generator(iterable):
    """Allows training with DataLoaders in a single infinite loop:
        for i, (x, y) in enumerate(inf_generator(train_loader)):
    """
    iterator = iterable.__iter__()
    while True:
        try:
            yield iterator.__next__()
        except StopIteration:
            iterator = iterable.__iter__()


def learning_rate_with_decay(batch_size, batch_denom, batches_per_epoch, boundary_epochs, decay_rates):
    initial_learning_rate = args.lr * batch_size / batch_denom

    boundaries = [int(batches_per_epoch * epoch) for epoch in boundary_epochs]
    vals = [initial_learning_rate * decay for decay in decay_rates]

    def learning_rate_fn(itr):
        lt = [itr < b for b in boundaries] + [True]
        i = np.argmax(lt)
        return vals[i]

    return learning_rate_fn


def one_hot(x, K):
    return np.array(x[:, None] == np.arange(K)[None, :], dtype=int)


def accuracy(model, dataset_loader):
    total_correct = 0
    for x, y in dataset_loader:
        x = x.to(device)
        y = one_hot(np.array(y.numpy()), 10)

        target_class = np.argmax(y, axis=1)
        predicted_class = np.argmax(model(x).cpu().detach().numpy(), axis=1)
        total_correct += np.sum(predicted_class == target_class)
    return total_correct / len(dataset_loader.dataset)


def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)


def makedirs(dirname):
    if not os.path.exists(dirname):
        os.makedirs(dirname)


def get_logger(logpath, filepath, package_files=[], displaying=True, saving=True, debug=False):
    logger = logging.getLogger()
    if debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logger.setLevel(level)
    if saving:
        info_file_handler = logging.FileHandler(logpath, mode="a")
        info_file_handler.setLevel(level)
        logger.addHandler(info_file_handler)
    if displaying:
        console_handler = logging.StreamHandler()
        console_handler.setLevel(level)
        logger.addHandler(console_handler)
    logger.info(filepath)
    with open(filepath, "r") as f:
        logger.info(f.read())

    for f in package_files:
        logger.info(f)
        with open(f, "r") as package_f:
            logger.info(package_f.read())

    return logger


if __name__ == '__main__':

    makedirs(args.save)
    logger = get_logger(logpath=os.path.join(args.save, 'logs'), filepath=os.path.abspath(__file__))
    logger.info(args)

    device = torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')

    is_odenet = args.network == 'odenet'

    downsampling_layers = [
        nn.Conv2d(3, 32, 3, 1),
        norm(32),
        nn.ReLU(inplace=True),
        nn.Conv2d(32, 64, 4, 2, 1),
        norm(64),
        nn.ReLU(inplace=True),
        nn.Conv2d(64, 128, 4, 2, 1),
        norm(128),
        nn.ReLU(inplace=True),
        Flatten(),
    ]


    # feature_layers = [ODEBlock(ODEfunc(490))] 
    # fc_layers = [nn.Linear(490, 10)]
    feature_layers = [ODEBlock(ODEfunc(784))] 
    fc_layers = [nn.Linear(784, 10)]

    model = nn.Sequential(*downsampling_layers, *feature_layers, *fc_layers).to(device)

    logger.info(model)
    logger.info('Number of parameters: {}'.format(count_parameters(model)))

    criterion = nn.CrossEntropyLoss().to(device)

    train_loader, test_loader, train_eval_loader = get_cifar_loaders(
        args.data_aug, args.batch_size, args.test_batch_size
    )

    data_gen = inf_generator(train_loader)
    batches_per_epoch = len(train_loader)

    lr_fn = learning_rate_with_decay(
        args.batch_size, batch_denom=128, batches_per_epoch=batches_per_epoch, boundary_epochs=[60, 100, 140],
        decay_rates=[1, 0.1, 0.01, 0.001]
    )

    optimizer = torch.optim.SGD(model.parameters(), lr=args.lr, momentum=0.9)

    best_acc = 0
    batch_time_meter = RunningAverageMeter()
    f_nfe_meter = RunningAverageMeter()
    b_nfe_meter = RunningAverageMeter()
    end = time.time()

    for itr in range(args.nepochs * batches_per_epoch):

        for param_group in optimizer.param_groups:
            param_group['lr'] = lr_fn(itr)

        optimizer.zero_grad()
        x, y = data_gen.__next__()
        x = x.to(device)
        y = y.to(device)
        logits = model(x)
        loss = criterion(logits, y)

        if is_odenet:
            nfe_forward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        loss.backward()
        optimizer.step()

        if is_odenet:
            nfe_backward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        batch_time_meter.update(time.time() - end)
        if is_odenet:
            f_nfe_meter.update(nfe_forward)
            b_nfe_meter.update(nfe_backward)
        end = time.time()

        if itr % batches_per_epoch == 0:
            with torch.no_grad():
                train_acc = accuracy(model, train_eval_loader)
                val_acc = accuracy(model, test_loader)
                if val_acc > best_acc:
                    torch.save({'state_dict': model.state_dict(), 'args': args}, os.path.join(args.save, 'model.pth'))
                    best_acc = val_acc
                if best_acc > 0.85 and train_acc > 0.85:
                    break
                logger.info(
                    "Epoch {:04d} | Time {:.3f} ({:.3f}) | NFE-F {:.1f} | NFE-B {:.1f} | "
                    "Train Acc {:.4f} | Test Acc {:.4f}".format(
                        itr // batches_per_epoch, batch_time_meter.val, batch_time_meter.avg, f_nfe_meter.avg,
                        b_nfe_meter.avg, train_acc, val_acc
                    )
                )
    names = []
    params = []
    for name,param in model.named_parameters():
        names.append(name)
        params.append(param.detach().numpy())
    nn1 = dict({'Wb':params,'names':names})
    for name,param in model.named_buffers():
        names.append(name)
        params.append(param.detach().numpy())
    savemat("odecnn_cifar_mid.mat",nn1)
Namespace(adjoint=False, batch_size=128, data_aug=False, debug=False, downsampling_method='conv', gpu=0, lr=0.01, nepochs=100, network='odenet', save='../logs/cifarmid', test_batch_size=1000, tol=0.001)
Sequential(
  (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1))
  (1): BatchNorm2d(32, eps=32, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (4): BatchNorm2d(64, eps=64, momentum=0.1, affine=True, track_running_stats=True)
  (5): ReLU(inplace=True)
  (6): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (7): BatchNorm2d(64, eps=128, momentum=0.1, affine=True, track_running_stats=True)
  (8): ReLU(inplace=True)
  (9): Flatten()
  (10): ODEBlock(
    (odefunc): ODEfunc(
      (fc1): Linear(in_features=784, out_features=16, bias=True)
      (fc2): Linear(in_features=16, out_features=784, bias=True)
    )
  )
  (11): Linear(in_features=784, out_features=10, bias=True)
)
Number of parameters: 198986
/home/manzand/Documents/Python/neuralODE_examples/cifar/odenet_cifar_example.py
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 19 15:10:31 2021

@author: manzand
"""

import os
import argparse
import logging
import time
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms
from scipy.io import savemat

parser = argparse.ArgumentParser()
parser.add_argument('--network', type=str, choices=['resnet', 'odenet'], default='odenet')
parser.add_argument('--tol', type=float, default=1e-3)
parser.add_argument('--adjoint', type=eval, default=False, choices=[True, False])
parser.add_argument('--downsampling-method', type=str, default='conv', choices=['conv', 'res'])
parser.add_argument('--nepochs', type=int, default=100)
parser.add_argument('--data_aug', type=eval, default=False, choices=[True, False])
parser.add_argument('--lr', type=float, default=0.01)
parser.add_argument('--batch_size', type=int, default=128)
parser.add_argument('--test_batch_size', type=int, default=1000)

parser.add_argument('--save', type=str, default='../logs/cifarmid')
parser.add_argument('--debug', action='store_true')
parser.add_argument('--gpu', type=int, default=0)
args = parser.parse_args()

if args.adjoint:
    from torchdiffeq import odeint_adjoint as odeint
else:
    from torchdiffeq import odeint


def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


def norm(dim):
    return nn.BatchNorm2d(min(64, dim), dim)


class ConcatConv2d(nn.Module):

    def __init__(self, dim_in, dim_out, ksize=3, stride=1, padding=0, dilation=1, groups=1, bias=True, transpose=False):
        super(ConcatConv2d, self).__init__()
        module = nn.ConvTranspose2d if transpose else nn.Conv2d
        self._layer = module(
            dim_in + 1, dim_out, kernel_size=ksize, stride=stride, padding=padding, dilation=dilation, groups=groups,
            bias=bias
        )

    def forward(self, t, x):
        tt = torch.ones_like(x[:, :1, :, :]) * t
        ttx = torch.cat([tt, x], 1)
        return self._layer(ttx)


class ODEfunc(nn.Module):

    def __init__(self,dim):
        super(ODEfunc, self).__init__()
        self.fc1 = nn.Linear(dim,16)
        self.fc2 = nn.Linear(16, dim)
        self.nfe = 0

    def forward(self, t, x):
        self.nfe += 1
        out = self.fc1(x)
        out = self.fc2(out)
        return out


class ODEBlock(nn.Module):

    def __init__(self, odefunc):
        super(ODEBlock, self).__init__()
        self.odefunc = odefunc
        self.integration_time = torch.tensor([0, 1]).float()

    def forward(self, x):
        self.integration_time = self.integration_time.type_as(x)
        out = odeint(self.odefunc, x, self.integration_time, rtol=args.tol, atol=args.tol)
        return out[1]

    @property
    def nfe(self):
        return self.odefunc.nfe

    @nfe.setter
    def nfe(self, value):
        self.odefunc.nfe = value


class Flatten(nn.Module):

    def __init__(self):
        super(Flatten, self).__init__()

    def forward(self, x):
        shape = torch.prod(torch.tensor(x.shape[1:])).item()
        return x.view(-1, shape)


class RunningAverageMeter(object):
    """Computes and stores the average and current value"""

    def __init__(self, momentum=0.99):
        self.momentum = momentum
        self.reset()

    def reset(self):
        self.val = None
        self.avg = 0

    def update(self, val):
        if self.val is None:
            self.avg = val
        else:
            self.avg = self.avg * self.momentum + val * (1 - self.momentum)
        self.val = val


def get_cifar_loaders(data_aug=False, batch_size=32, test_batch_size=1000, perc=1.0):
    if data_aug:
        transform_train = transforms.Compose([
            transforms.RandomCrop(28, padding=4),
            transforms.ToTensor(),
        ])
    else:
        transform_train = transforms.Compose([
            transforms.ToTensor(),
        ])

    transform_test = transforms.Compose([
        transforms.ToTensor(),
    ])

    train_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_train), batch_size=batch_size,
        shuffle=True, num_workers=2, drop_last=True
    )

    train_eval_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    test_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=False, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    return train_loader, test_loader, train_eval_loader


def inf_generator(iterable):
    """Allows training with DataLoaders in a single infinite loop:
        for i, (x, y) in enumerate(inf_generator(train_loader)):
    """
    iterator = iterable.__iter__()
    while True:
        try:
            yield iterator.__next__()
        except StopIteration:
            iterator = iterable.__iter__()


def learning_rate_with_decay(batch_size, batch_denom, batches_per_epoch, boundary_epochs, decay_rates):
    initial_learning_rate = args.lr * batch_size / batch_denom

    boundaries = [int(batches_per_epoch * epoch) for epoch in boundary_epochs]
    vals = [initial_learning_rate * decay for decay in decay_rates]

    def learning_rate_fn(itr):
        lt = [itr < b for b in boundaries] + [True]
        i = np.argmax(lt)
        return vals[i]

    return learning_rate_fn


def one_hot(x, K):
    return np.array(x[:, None] == np.arange(K)[None, :], dtype=int)


def accuracy(model, dataset_loader):
    total_correct = 0
    for x, y in dataset_loader:
        x = x.to(device)
        y = one_hot(np.array(y.numpy()), 10)

        target_class = np.argmax(y, axis=1)
        predicted_class = np.argmax(model(x).cpu().detach().numpy(), axis=1)
        total_correct += np.sum(predicted_class == target_class)
    return total_correct / len(dataset_loader.dataset)


def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)


def makedirs(dirname):
    if not os.path.exists(dirname):
        os.makedirs(dirname)


def get_logger(logpath, filepath, package_files=[], displaying=True, saving=True, debug=False):
    logger = logging.getLogger()
    if debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logger.setLevel(level)
    if saving:
        info_file_handler = logging.FileHandler(logpath, mode="a")
        info_file_handler.setLevel(level)
        logger.addHandler(info_file_handler)
    if displaying:
        console_handler = logging.StreamHandler()
        console_handler.setLevel(level)
        logger.addHandler(console_handler)
    logger.info(filepath)
    with open(filepath, "r") as f:
        logger.info(f.read())

    for f in package_files:
        logger.info(f)
        with open(f, "r") as package_f:
            logger.info(package_f.read())

    return logger


if __name__ == '__main__':

    makedirs(args.save)
    logger = get_logger(logpath=os.path.join(args.save, 'logs'), filepath=os.path.abspath(__file__))
    logger.info(args)

    device = torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')

    is_odenet = args.network == 'odenet'

    downsampling_layers = [
        nn.Conv2d(3, 32, 3, 1),
        norm(32),
        nn.ReLU(inplace=True),
        nn.Conv2d(32, 64, 4, 2, 1),
        norm(64),
        nn.ReLU(inplace=True),
        nn.Conv2d(64, 128, 4, 2, 1),
        norm(128),
        nn.ReLU(inplace=True),
        Flatten(),
    ]


    # feature_layers = [ODEBlock(ODEfunc(490))] 
    # fc_layers = [nn.Linear(490, 10)]
    feature_layers = [ODEBlock(ODEfunc(784))] 
    fc_layers = [nn.Linear(784, 10)]

    model = nn.Sequential(*downsampling_layers, *feature_layers, *fc_layers).to(device)

    logger.info(model)
    logger.info('Number of parameters: {}'.format(count_parameters(model)))

    criterion = nn.CrossEntropyLoss().to(device)

    train_loader, test_loader, train_eval_loader = get_cifar_loaders(
        args.data_aug, args.batch_size, args.test_batch_size
    )

    data_gen = inf_generator(train_loader)
    batches_per_epoch = len(train_loader)

    lr_fn = learning_rate_with_decay(
        args.batch_size, batch_denom=128, batches_per_epoch=batches_per_epoch, boundary_epochs=[60, 100, 140],
        decay_rates=[1, 0.1, 0.01, 0.001]
    )

    optimizer = torch.optim.SGD(model.parameters(), lr=args.lr, momentum=0.9)

    best_acc = 0
    batch_time_meter = RunningAverageMeter()
    f_nfe_meter = RunningAverageMeter()
    b_nfe_meter = RunningAverageMeter()
    end = time.time()

    for itr in range(args.nepochs * batches_per_epoch):

        for param_group in optimizer.param_groups:
            param_group['lr'] = lr_fn(itr)

        optimizer.zero_grad()
        x, y = data_gen.__next__()
        x = x.to(device)
        y = y.to(device)
        logits = model(x)
        loss = criterion(logits, y)

        if is_odenet:
            nfe_forward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        loss.backward()
        optimizer.step()

        if is_odenet:
            nfe_backward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        batch_time_meter.update(time.time() - end)
        if is_odenet:
            f_nfe_meter.update(nfe_forward)
            b_nfe_meter.update(nfe_backward)
        end = time.time()

        if itr % batches_per_epoch == 0:
            with torch.no_grad():
                train_acc = accuracy(model, train_eval_loader)
                val_acc = accuracy(model, test_loader)
                if val_acc > best_acc:
                    torch.save({'state_dict': model.state_dict(), 'args': args}, os.path.join(args.save, 'model.pth'))
                    best_acc = val_acc
                if best_acc > 0.85 and train_acc > 0.85:
                    break
                logger.info(
                    "Epoch {:04d} | Time {:.3f} ({:.3f}) | NFE-F {:.1f} | NFE-B {:.1f} | "
                    "Train Acc {:.4f} | Test Acc {:.4f}".format(
                        itr // batches_per_epoch, batch_time_meter.val, batch_time_meter.avg, f_nfe_meter.avg,
                        b_nfe_meter.avg, train_acc, val_acc
                    )
                )
    names = []
    params = []
    for name,param in model.named_parameters():
        names.append(name)
        params.append(param.detach().numpy())
    nn1 = dict({'Wb':params,'names':names})
    for name,param in model.named_buffers():
        names.append(name)
        params.append(param.detach().numpy())
    savemat("odecnn_cifar_mid.mat",nn1)
Namespace(adjoint=False, batch_size=128, data_aug=False, debug=False, downsampling_method='conv', gpu=0, lr=0.01, nepochs=100, network='odenet', save='../logs/cifarmid', test_batch_size=1000, tol=0.001)
Sequential(
  (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1))
  (1): BatchNorm2d(32, eps=32, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (4): BatchNorm2d(64, eps=64, momentum=0.1, affine=True, track_running_stats=True)
  (5): ReLU(inplace=True)
  (6): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (7): BatchNorm2d(64, eps=128, momentum=0.1, affine=True, track_running_stats=True)
  (8): ReLU(inplace=True)
  (9): Flatten()
  (10): ODEBlock(
    (odefunc): ODEfunc(
      (fc1): Linear(in_features=784, out_features=16, bias=True)
      (fc2): Linear(in_features=16, out_features=784, bias=True)
    )
  )
  (11): Linear(in_features=784, out_features=10, bias=True)
)
Number of parameters: 198986
/home/manzand/Documents/Python/neuralODE_examples/cifar/odenet_cifar_example.py
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 19 15:10:31 2021

@author: manzand
"""

import os
import argparse
import logging
import time
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms
from scipy.io import savemat

parser = argparse.ArgumentParser()
parser.add_argument('--network', type=str, choices=['resnet', 'odenet'], default='odenet')
parser.add_argument('--tol', type=float, default=1e-3)
parser.add_argument('--adjoint', type=eval, default=False, choices=[True, False])
parser.add_argument('--downsampling-method', type=str, default='conv', choices=['conv', 'res'])
parser.add_argument('--nepochs', type=int, default=100)
parser.add_argument('--data_aug', type=eval, default=False, choices=[True, False])
parser.add_argument('--lr', type=float, default=0.01)
parser.add_argument('--batch_size', type=int, default=128)
parser.add_argument('--test_batch_size', type=int, default=1000)

parser.add_argument('--save', type=str, default='../logs/cifarmid')
parser.add_argument('--debug', action='store_true')
parser.add_argument('--gpu', type=int, default=0)
args = parser.parse_args()

if args.adjoint:
    from torchdiffeq import odeint_adjoint as odeint
else:
    from torchdiffeq import odeint


def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


def norm(dim):
    return nn.BatchNorm2d(min(64, dim), dim)


class ConcatConv2d(nn.Module):

    def __init__(self, dim_in, dim_out, ksize=3, stride=1, padding=0, dilation=1, groups=1, bias=True, transpose=False):
        super(ConcatConv2d, self).__init__()
        module = nn.ConvTranspose2d if transpose else nn.Conv2d
        self._layer = module(
            dim_in + 1, dim_out, kernel_size=ksize, stride=stride, padding=padding, dilation=dilation, groups=groups,
            bias=bias
        )

    def forward(self, t, x):
        tt = torch.ones_like(x[:, :1, :, :]) * t
        ttx = torch.cat([tt, x], 1)
        return self._layer(ttx)


class ODEfunc(nn.Module):

    def __init__(self,dim):
        super(ODEfunc, self).__init__()
        self.fc1 = nn.Linear(dim,16)
        self.fc2 = nn.Linear(16, dim)
        self.nfe = 0

    def forward(self, t, x):
        self.nfe += 1
        out = self.fc1(x)
        out = self.fc2(out)
        return out


class ODEBlock(nn.Module):

    def __init__(self, odefunc):
        super(ODEBlock, self).__init__()
        self.odefunc = odefunc
        self.integration_time = torch.tensor([0, 1]).float()

    def forward(self, x):
        self.integration_time = self.integration_time.type_as(x)
        out = odeint(self.odefunc, x, self.integration_time, rtol=args.tol, atol=args.tol)
        return out[1]

    @property
    def nfe(self):
        return self.odefunc.nfe

    @nfe.setter
    def nfe(self, value):
        self.odefunc.nfe = value


class Flatten(nn.Module):

    def __init__(self):
        super(Flatten, self).__init__()

    def forward(self, x):
        shape = torch.prod(torch.tensor(x.shape[1:])).item()
        return x.view(-1, shape)


class RunningAverageMeter(object):
    """Computes and stores the average and current value"""

    def __init__(self, momentum=0.99):
        self.momentum = momentum
        self.reset()

    def reset(self):
        self.val = None
        self.avg = 0

    def update(self, val):
        if self.val is None:
            self.avg = val
        else:
            self.avg = self.avg * self.momentum + val * (1 - self.momentum)
        self.val = val


def get_cifar_loaders(data_aug=False, batch_size=32, test_batch_size=1000, perc=1.0):
    if data_aug:
        transform_train = transforms.Compose([
            transforms.RandomCrop(28, padding=4),
            transforms.ToTensor(),
        ])
    else:
        transform_train = transforms.Compose([
            transforms.ToTensor(),
        ])

    transform_test = transforms.Compose([
        transforms.ToTensor(),
    ])

    train_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_train), batch_size=batch_size,
        shuffle=True, num_workers=2, drop_last=True
    )

    train_eval_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    test_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=False, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    return train_loader, test_loader, train_eval_loader


def inf_generator(iterable):
    """Allows training with DataLoaders in a single infinite loop:
        for i, (x, y) in enumerate(inf_generator(train_loader)):
    """
    iterator = iterable.__iter__()
    while True:
        try:
            yield iterator.__next__()
        except StopIteration:
            iterator = iterable.__iter__()


def learning_rate_with_decay(batch_size, batch_denom, batches_per_epoch, boundary_epochs, decay_rates):
    initial_learning_rate = args.lr * batch_size / batch_denom

    boundaries = [int(batches_per_epoch * epoch) for epoch in boundary_epochs]
    vals = [initial_learning_rate * decay for decay in decay_rates]

    def learning_rate_fn(itr):
        lt = [itr < b for b in boundaries] + [True]
        i = np.argmax(lt)
        return vals[i]

    return learning_rate_fn


def one_hot(x, K):
    return np.array(x[:, None] == np.arange(K)[None, :], dtype=int)


def accuracy(model, dataset_loader):
    total_correct = 0
    for x, y in dataset_loader:
        x = x.to(device)
        y = one_hot(np.array(y.numpy()), 10)

        target_class = np.argmax(y, axis=1)
        predicted_class = np.argmax(model(x).cpu().detach().numpy(), axis=1)
        total_correct += np.sum(predicted_class == target_class)
    return total_correct / len(dataset_loader.dataset)


def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)


def makedirs(dirname):
    if not os.path.exists(dirname):
        os.makedirs(dirname)


def get_logger(logpath, filepath, package_files=[], displaying=True, saving=True, debug=False):
    logger = logging.getLogger()
    if debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logger.setLevel(level)
    if saving:
        info_file_handler = logging.FileHandler(logpath, mode="a")
        info_file_handler.setLevel(level)
        logger.addHandler(info_file_handler)
    if displaying:
        console_handler = logging.StreamHandler()
        console_handler.setLevel(level)
        logger.addHandler(console_handler)
    logger.info(filepath)
    with open(filepath, "r") as f:
        logger.info(f.read())

    for f in package_files:
        logger.info(f)
        with open(f, "r") as package_f:
            logger.info(package_f.read())

    return logger


if __name__ == '__main__':

    makedirs(args.save)
    logger = get_logger(logpath=os.path.join(args.save, 'logs'), filepath=os.path.abspath(__file__))
    logger.info(args)

    device = torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')

    is_odenet = args.network == 'odenet'

    downsampling_layers = [
        nn.Conv2d(3, 32, 3, 1),
        norm(32),
        nn.ReLU(inplace=True),
        nn.Conv2d(32, 64, 4, 2, 1),
        norm(64),
        nn.ReLU(inplace=True),
        nn.Conv2d(64, 64, 4, 2, 1),
        norm(64),
        nn.ReLU(inplace=True),
        Flatten(),
    ]


    # feature_layers = [ODEBlock(ODEfunc(490))] 
    # fc_layers = [nn.Linear(490, 10)]
    feature_layers = [ODEBlock(ODEfunc(784))] 
    fc_layers = [nn.Linear(784, 10)]

    model = nn.Sequential(*downsampling_layers, *feature_layers, *fc_layers).to(device)

    logger.info(model)
    logger.info('Number of parameters: {}'.format(count_parameters(model)))

    criterion = nn.CrossEntropyLoss().to(device)

    train_loader, test_loader, train_eval_loader = get_cifar_loaders(
        args.data_aug, args.batch_size, args.test_batch_size
    )

    data_gen = inf_generator(train_loader)
    batches_per_epoch = len(train_loader)

    lr_fn = learning_rate_with_decay(
        args.batch_size, batch_denom=128, batches_per_epoch=batches_per_epoch, boundary_epochs=[60, 100, 140],
        decay_rates=[1, 0.1, 0.01, 0.001]
    )

    optimizer = torch.optim.SGD(model.parameters(), lr=args.lr, momentum=0.9)

    best_acc = 0
    batch_time_meter = RunningAverageMeter()
    f_nfe_meter = RunningAverageMeter()
    b_nfe_meter = RunningAverageMeter()
    end = time.time()

    for itr in range(args.nepochs * batches_per_epoch):

        for param_group in optimizer.param_groups:
            param_group['lr'] = lr_fn(itr)

        optimizer.zero_grad()
        x, y = data_gen.__next__()
        x = x.to(device)
        y = y.to(device)
        logits = model(x)
        loss = criterion(logits, y)

        if is_odenet:
            nfe_forward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        loss.backward()
        optimizer.step()

        if is_odenet:
            nfe_backward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        batch_time_meter.update(time.time() - end)
        if is_odenet:
            f_nfe_meter.update(nfe_forward)
            b_nfe_meter.update(nfe_backward)
        end = time.time()

        if itr % batches_per_epoch == 0:
            with torch.no_grad():
                train_acc = accuracy(model, train_eval_loader)
                val_acc = accuracy(model, test_loader)
                if val_acc > best_acc:
                    torch.save({'state_dict': model.state_dict(), 'args': args}, os.path.join(args.save, 'model.pth'))
                    best_acc = val_acc
                if best_acc > 0.85 and train_acc > 0.85:
                    break
                logger.info(
                    "Epoch {:04d} | Time {:.3f} ({:.3f}) | NFE-F {:.1f} | NFE-B {:.1f} | "
                    "Train Acc {:.4f} | Test Acc {:.4f}".format(
                        itr // batches_per_epoch, batch_time_meter.val, batch_time_meter.avg, f_nfe_meter.avg,
                        b_nfe_meter.avg, train_acc, val_acc
                    )
                )
    names = []
    params = []
    for name,param in model.named_parameters():
        names.append(name)
        params.append(param.detach().numpy())
    nn1 = dict({'Wb':params,'names':names})
    for name,param in model.named_buffers():
        names.append(name)
        params.append(param.detach().numpy())
    savemat("odecnn_cifar_mid.mat",nn1)
Namespace(adjoint=False, batch_size=128, data_aug=False, debug=False, downsampling_method='conv', gpu=0, lr=0.01, nepochs=100, network='odenet', save='../logs/cifarmid', test_batch_size=1000, tol=0.001)
Sequential(
  (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1))
  (1): BatchNorm2d(32, eps=32, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (4): BatchNorm2d(64, eps=64, momentum=0.1, affine=True, track_running_stats=True)
  (5): ReLU(inplace=True)
  (6): Conv2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (7): BatchNorm2d(64, eps=64, momentum=0.1, affine=True, track_running_stats=True)
  (8): ReLU(inplace=True)
  (9): Flatten()
  (10): ODEBlock(
    (odefunc): ODEfunc(
      (fc1): Linear(in_features=784, out_features=16, bias=True)
      (fc2): Linear(in_features=16, out_features=784, bias=True)
    )
  )
  (11): Linear(in_features=784, out_features=10, bias=True)
)
Number of parameters: 133386
/home/manzand/Documents/Python/neuralODE_examples/cifar/odenet_cifar_example.py
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 19 15:10:31 2021

@author: manzand
"""

import os
import argparse
import logging
import time
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms
from scipy.io import savemat

parser = argparse.ArgumentParser()
parser.add_argument('--network', type=str, choices=['resnet', 'odenet'], default='odenet')
parser.add_argument('--tol', type=float, default=1e-3)
parser.add_argument('--adjoint', type=eval, default=False, choices=[True, False])
parser.add_argument('--downsampling-method', type=str, default='conv', choices=['conv', 'res'])
parser.add_argument('--nepochs', type=int, default=100)
parser.add_argument('--data_aug', type=eval, default=False, choices=[True, False])
parser.add_argument('--lr', type=float, default=0.01)
parser.add_argument('--batch_size', type=int, default=128)
parser.add_argument('--test_batch_size', type=int, default=1000)

parser.add_argument('--save', type=str, default='../logs/cifarmid')
parser.add_argument('--debug', action='store_true')
parser.add_argument('--gpu', type=int, default=0)
args = parser.parse_args()

if args.adjoint:
    from torchdiffeq import odeint_adjoint as odeint
else:
    from torchdiffeq import odeint


def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


def norm(dim):
    return nn.BatchNorm2d(min(64, dim), dim)


class ConcatConv2d(nn.Module):

    def __init__(self, dim_in, dim_out, ksize=3, stride=1, padding=0, dilation=1, groups=1, bias=True, transpose=False):
        super(ConcatConv2d, self).__init__()
        module = nn.ConvTranspose2d if transpose else nn.Conv2d
        self._layer = module(
            dim_in + 1, dim_out, kernel_size=ksize, stride=stride, padding=padding, dilation=dilation, groups=groups,
            bias=bias
        )

    def forward(self, t, x):
        tt = torch.ones_like(x[:, :1, :, :]) * t
        ttx = torch.cat([tt, x], 1)
        return self._layer(ttx)


class ODEfunc(nn.Module):

    def __init__(self,dim):
        super(ODEfunc, self).__init__()
        self.fc1 = nn.Linear(dim,16)
        self.fc2 = nn.Linear(16, dim)
        self.nfe = 0

    def forward(self, t, x):
        self.nfe += 1
        out = self.fc1(x)
        out = self.fc2(out)
        return out


class ODEBlock(nn.Module):

    def __init__(self, odefunc):
        super(ODEBlock, self).__init__()
        self.odefunc = odefunc
        self.integration_time = torch.tensor([0, 1]).float()

    def forward(self, x):
        self.integration_time = self.integration_time.type_as(x)
        out = odeint(self.odefunc, x, self.integration_time, rtol=args.tol, atol=args.tol)
        return out[1]

    @property
    def nfe(self):
        return self.odefunc.nfe

    @nfe.setter
    def nfe(self, value):
        self.odefunc.nfe = value


class Flatten(nn.Module):

    def __init__(self):
        super(Flatten, self).__init__()

    def forward(self, x):
        shape = torch.prod(torch.tensor(x.shape[1:])).item()
        return x.view(-1, shape)


class RunningAverageMeter(object):
    """Computes and stores the average and current value"""

    def __init__(self, momentum=0.99):
        self.momentum = momentum
        self.reset()

    def reset(self):
        self.val = None
        self.avg = 0

    def update(self, val):
        if self.val is None:
            self.avg = val
        else:
            self.avg = self.avg * self.momentum + val * (1 - self.momentum)
        self.val = val


def get_cifar_loaders(data_aug=False, batch_size=32, test_batch_size=1000, perc=1.0):
    if data_aug:
        transform_train = transforms.Compose([
            transforms.RandomCrop(28, padding=4),
            transforms.ToTensor(),
        ])
    else:
        transform_train = transforms.Compose([
            transforms.ToTensor(),
        ])

    transform_test = transforms.Compose([
        transforms.ToTensor(),
    ])

    train_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_train), batch_size=batch_size,
        shuffle=True, num_workers=2, drop_last=True
    )

    train_eval_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    test_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=False, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    return train_loader, test_loader, train_eval_loader


def inf_generator(iterable):
    """Allows training with DataLoaders in a single infinite loop:
        for i, (x, y) in enumerate(inf_generator(train_loader)):
    """
    iterator = iterable.__iter__()
    while True:
        try:
            yield iterator.__next__()
        except StopIteration:
            iterator = iterable.__iter__()


def learning_rate_with_decay(batch_size, batch_denom, batches_per_epoch, boundary_epochs, decay_rates):
    initial_learning_rate = args.lr * batch_size / batch_denom

    boundaries = [int(batches_per_epoch * epoch) for epoch in boundary_epochs]
    vals = [initial_learning_rate * decay for decay in decay_rates]

    def learning_rate_fn(itr):
        lt = [itr < b for b in boundaries] + [True]
        i = np.argmax(lt)
        return vals[i]

    return learning_rate_fn


def one_hot(x, K):
    return np.array(x[:, None] == np.arange(K)[None, :], dtype=int)


def accuracy(model, dataset_loader):
    total_correct = 0
    for x, y in dataset_loader:
        x = x.to(device)
        y = one_hot(np.array(y.numpy()), 10)

        target_class = np.argmax(y, axis=1)
        predicted_class = np.argmax(model(x).cpu().detach().numpy(), axis=1)
        total_correct += np.sum(predicted_class == target_class)
    return total_correct / len(dataset_loader.dataset)


def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)


def makedirs(dirname):
    if not os.path.exists(dirname):
        os.makedirs(dirname)


def get_logger(logpath, filepath, package_files=[], displaying=True, saving=True, debug=False):
    logger = logging.getLogger()
    if debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logger.setLevel(level)
    if saving:
        info_file_handler = logging.FileHandler(logpath, mode="a")
        info_file_handler.setLevel(level)
        logger.addHandler(info_file_handler)
    if displaying:
        console_handler = logging.StreamHandler()
        console_handler.setLevel(level)
        logger.addHandler(console_handler)
    logger.info(filepath)
    with open(filepath, "r") as f:
        logger.info(f.read())

    for f in package_files:
        logger.info(f)
        with open(f, "r") as package_f:
            logger.info(package_f.read())

    return logger


if __name__ == '__main__':

    makedirs(args.save)
    logger = get_logger(logpath=os.path.join(args.save, 'logs'), filepath=os.path.abspath(__file__))
    logger.info(args)

    device = torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')

    is_odenet = args.network == 'odenet'

    downsampling_layers = [
        nn.Conv2d(3, 32, 3, 1),
        norm(32),
        nn.ReLU(inplace=True),
        nn.Conv2d(32, 64, 4, 2, 1),
        norm(64),
        nn.ReLU(inplace=True),
        nn.Conv2d(64, 64, 4, 2, 1),
        norm(64),
        nn.ReLU(inplace=True),
        Flatten(),
    ]


    # feature_layers = [ODEBlock(ODEfunc(490))] 
    # fc_layers = [nn.Linear(490, 10)]
    feature_layers = [ODEBlock(ODEfunc(3136))] 
    fc_layers = [nn.Linear(3136, 10)]

    model = nn.Sequential(*downsampling_layers, *feature_layers, *fc_layers).to(device)

    logger.info(model)
    logger.info('Number of parameters: {}'.format(count_parameters(model)))

    criterion = nn.CrossEntropyLoss().to(device)

    train_loader, test_loader, train_eval_loader = get_cifar_loaders(
        args.data_aug, args.batch_size, args.test_batch_size
    )

    data_gen = inf_generator(train_loader)
    batches_per_epoch = len(train_loader)

    lr_fn = learning_rate_with_decay(
        args.batch_size, batch_denom=128, batches_per_epoch=batches_per_epoch, boundary_epochs=[60, 100, 140],
        decay_rates=[1, 0.1, 0.01, 0.001]
    )

    optimizer = torch.optim.SGD(model.parameters(), lr=args.lr, momentum=0.9)

    best_acc = 0
    batch_time_meter = RunningAverageMeter()
    f_nfe_meter = RunningAverageMeter()
    b_nfe_meter = RunningAverageMeter()
    end = time.time()

    for itr in range(args.nepochs * batches_per_epoch):

        for param_group in optimizer.param_groups:
            param_group['lr'] = lr_fn(itr)

        optimizer.zero_grad()
        x, y = data_gen.__next__()
        x = x.to(device)
        y = y.to(device)
        logits = model(x)
        loss = criterion(logits, y)

        if is_odenet:
            nfe_forward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        loss.backward()
        optimizer.step()

        if is_odenet:
            nfe_backward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        batch_time_meter.update(time.time() - end)
        if is_odenet:
            f_nfe_meter.update(nfe_forward)
            b_nfe_meter.update(nfe_backward)
        end = time.time()

        if itr % batches_per_epoch == 0:
            with torch.no_grad():
                train_acc = accuracy(model, train_eval_loader)
                val_acc = accuracy(model, test_loader)
                if val_acc > best_acc:
                    torch.save({'state_dict': model.state_dict(), 'args': args}, os.path.join(args.save, 'model.pth'))
                    best_acc = val_acc
                if best_acc > 0.85 and train_acc > 0.85:
                    break
                logger.info(
                    "Epoch {:04d} | Time {:.3f} ({:.3f}) | NFE-F {:.1f} | NFE-B {:.1f} | "
                    "Train Acc {:.4f} | Test Acc {:.4f}".format(
                        itr // batches_per_epoch, batch_time_meter.val, batch_time_meter.avg, f_nfe_meter.avg,
                        b_nfe_meter.avg, train_acc, val_acc
                    )
                )
    names = []
    params = []
    for name,param in model.named_parameters():
        names.append(name)
        params.append(param.detach().numpy())
    nn1 = dict({'Wb':params,'names':names})
    for name,param in model.named_buffers():
        names.append(name)
        params.append(param.detach().numpy())
    savemat("odecnn_cifar_mid.mat",nn1)
Namespace(adjoint=False, batch_size=128, data_aug=False, debug=False, downsampling_method='conv', gpu=0, lr=0.01, nepochs=100, network='odenet', save='../logs/cifarmid', test_batch_size=1000, tol=0.001)
Sequential(
  (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1))
  (1): BatchNorm2d(32, eps=32, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (4): BatchNorm2d(64, eps=64, momentum=0.1, affine=True, track_running_stats=True)
  (5): ReLU(inplace=True)
  (6): Conv2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (7): BatchNorm2d(64, eps=64, momentum=0.1, affine=True, track_running_stats=True)
  (8): ReLU(inplace=True)
  (9): Flatten()
  (10): ODEBlock(
    (odefunc): ODEfunc(
      (fc1): Linear(in_features=3136, out_features=16, bias=True)
      (fc2): Linear(in_features=16, out_features=3136, bias=True)
    )
  )
  (11): Linear(in_features=3136, out_features=10, bias=True)
)
Number of parameters: 234522
Epoch 0000 | Time 1.016 (1.016) | NFE-F 32.0 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0001 | Time 1.027 (0.675) | NFE-F 21.5 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0002 | Time 0.960 (0.625) | NFE-F 20.3 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0003 | Time 0.949 (0.632) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0004 | Time 1.047 (0.632) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0005 | Time 0.893 (0.630) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0006 | Time 0.973 (0.633) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0007 | Time 1.056 (0.644) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0008 | Time 1.007 (0.631) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0009 | Time 0.947 (0.624) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0010 | Time 0.611 (0.487) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0011 | Time 1.045 (0.530) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0012 | Time 0.539 (0.520) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0013 | Time 0.888 (0.537) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0014 | Time 0.900 (0.544) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0015 | Time 0.903 (0.540) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0016 | Time 0.815 (0.539) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0017 | Time 0.784 (0.537) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0018 | Time 0.786 (0.533) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0019 | Time 1.361 (0.543) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0020 | Time 0.861 (0.654) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0021 | Time 0.517 (0.348) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0022 | Time 0.509 (0.336) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0023 | Time 0.505 (0.378) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0024 | Time 0.570 (0.368) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0025 | Time 0.490 (0.346) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
/home/manzand/Documents/Python/neuralODE_examples/cifar/odenet_cifar_example_tiny.py
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb  4 09:04:31 2021

@author: manzand
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 19 15:10:31 2021

@author: manzand
"""

import os
import argparse
import logging
import time
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms
from scipy.io import savemat

parser = argparse.ArgumentParser()
parser.add_argument('--network', type=str, choices=['resnet', 'odenet'], default='odenet')
parser.add_argument('--tol', type=float, default=1e-3)
parser.add_argument('--adjoint', type=eval, default=False, choices=[True, False])
parser.add_argument('--downsampling-method', type=str, default='conv', choices=['conv', 'res'])
parser.add_argument('--nepochs', type=int, default=200)
parser.add_argument('--data_aug', type=eval, default=False, choices=[True, False])
parser.add_argument('--lr', type=float, default=0.01)
parser.add_argument('--batch_size', type=int, default=128)
parser.add_argument('--test_batch_size', type=int, default=1000)

parser.add_argument('--save', type=str, default='../logs/cifartiny')
parser.add_argument('--debug', action='store_true')
parser.add_argument('--gpu', type=int, default=0)
args = parser.parse_args()

if args.adjoint:
    from torchdiffeq import odeint_adjoint as odeint
else:
    from torchdiffeq import odeint


def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


def norm(dim):
    return nn.BatchNorm2d(min(64, dim), dim)


class ConcatConv2d(nn.Module):

    def __init__(self, dim_in, dim_out, ksize=3, stride=1, padding=0, dilation=1, groups=1, bias=True, transpose=False):
        super(ConcatConv2d, self).__init__()
        module = nn.ConvTranspose2d if transpose else nn.Conv2d
        self._layer = module(
            dim_in + 1, dim_out, kernel_size=ksize, stride=stride, padding=padding, dilation=dilation, groups=groups,
            bias=bias
        )

    def forward(self, t, x):
        tt = torch.ones_like(x[:, :1, :, :]) * t
        ttx = torch.cat([tt, x], 1)
        return self._layer(ttx)


class ODEfunc(nn.Module):

    def __init__(self,dim):
        super(ODEfunc, self).__init__()
        self.fc1 = nn.Linear(dim,16)
        self.fc2 = nn.Linear(16, dim)
        self.nfe = 0

    def forward(self, t, x):
        self.nfe += 1
        # print('11111111111111111111')
        # print(x.size())
        out = self.fc1(x)
        # print('222222222222222222')
        # print(out.size())
        out = self.fc2(out)
        return out


class ODEBlock(nn.Module):

    def __init__(self, odefunc):
        super(ODEBlock, self).__init__()
        self.odefunc = odefunc
        self.integration_time = torch.tensor([0, 1]).float()

    def forward(self, x):
        self.integration_time = self.integration_time.type_as(x)
        out = odeint(self.odefunc, x, self.integration_time, rtol=args.tol, atol=args.tol)
        return out[1]

    @property
    def nfe(self):
        return self.odefunc.nfe

    @nfe.setter
    def nfe(self, value):
        self.odefunc.nfe = value


class Flatten(nn.Module):

    def __init__(self):
        super(Flatten, self).__init__()

    def forward(self, x):
        shape = torch.prod(torch.tensor(x.shape[1:])).item()
        xout = x.view(-1, shape)
        # print(xout.size())
        return xout


class RunningAverageMeter(object):
    """Computes and stores the average and current value"""

    def __init__(self, momentum=0.99):
        self.momentum = momentum
        self.reset()

    def reset(self):
        self.val = None
        self.avg = 0

    def update(self, val):
        if self.val is None:
            self.avg = val
        else:
            self.avg = self.avg * self.momentum + val * (1 - self.momentum)
        self.val = val


def get_cifar_loaders(data_aug=False, batch_size=32, test_batch_size=1000, perc=1.0):
    if data_aug:
        transform_train = transforms.Compose([
            transforms.RandomCrop(28, padding=4),
            transforms.ToTensor(),
        ])
    else:
        transform_train = transforms.Compose([
            transforms.ToTensor(),
        ])

    transform_test = transforms.Compose([
        transforms.ToTensor(),
    ])

    train_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_train), batch_size=batch_size,
        shuffle=True, num_workers=2, drop_last=True
    )

    train_eval_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    test_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=False, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    return train_loader, test_loader, train_eval_loader


def inf_generator(iterable):
    """Allows training with DataLoaders in a single infinite loop:
        for i, (x, y) in enumerate(inf_generator(train_loader)):
    """
    iterator = iterable.__iter__()
    while True:
        try:
            yield iterator.__next__()
        except StopIteration:
            iterator = iterable.__iter__()


def learning_rate_with_decay(batch_size, batch_denom, batches_per_epoch, boundary_epochs, decay_rates):
    initial_learning_rate = args.lr * batch_size / batch_denom

    boundaries = [int(batches_per_epoch * epoch) for epoch in boundary_epochs]
    vals = [initial_learning_rate * decay for decay in decay_rates]

    def learning_rate_fn(itr):
        lt = [itr < b for b in boundaries] + [True]
        i = np.argmax(lt)
        return vals[i]

    return learning_rate_fn


def one_hot(x, K):
    return np.array(x[:, None] == np.arange(K)[None, :], dtype=int)


def accuracy(model, dataset_loader):
    total_correct = 0
    for x, y in dataset_loader:
        x = x.to(device)
        y = one_hot(np.array(y.numpy()), 10)

        target_class = np.argmax(y, axis=1)
        predicted_class = np.argmax(model(x).cpu().detach().numpy(), axis=1)
        total_correct += np.sum(predicted_class == target_class)
    return total_correct / len(dataset_loader.dataset)


def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)


def makedirs(dirname):
    if not os.path.exists(dirname):
        os.makedirs(dirname)


def get_logger(logpath, filepath, package_files=[], displaying=True, saving=True, debug=False):
    logger = logging.getLogger()
    if debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logger.setLevel(level)
    if saving:
        info_file_handler = logging.FileHandler(logpath, mode="a")
        info_file_handler.setLevel(level)
        logger.addHandler(info_file_handler)
    if displaying:
        console_handler = logging.StreamHandler()
        console_handler.setLevel(level)
        logger.addHandler(console_handler)
    logger.info(filepath)
    with open(filepath, "r") as f:
        logger.info(f.read())

    for f in package_files:
        logger.info(f)
        with open(f, "r") as package_f:
            logger.info(package_f.read())

    return logger


if __name__ == '__main__':

    makedirs(args.save)
    logger = get_logger(logpath=os.path.join(args.save, 'logs'), filepath=os.path.abspath(__file__))
    logger.info(args)

    device = torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')

    is_odenet = args.network == 'odenet'

    downsampling_layers = [
        nn.Conv2d(3, 32, 3, 1),
        norm(32),
        nn.ReLU(inplace=True),
        nn.Conv2d(32, 16, 4, 2, 1),
        norm(16),
        nn.ReLU(inplace=True),
        nn.Conv2d(16, 16, 4, 2, 1),
        norm(16),
        nn.ReLU(inplace=True),
        nn.Conv2d(16, 16, 4, 2, 1),
        norm(16),
        nn.ReLU(inplace=True),
        nn.Conv2d(16, 16, 4, 2, 1),
        norm(16),
        nn.ReLU(inplace=True),
        Flatten(),
    ]

    feature_layers = [ODEBlock(ODEfunc(784))] 
    fc_layers = [nn.Linear(784, 10)]
    # feature_layers = [ODEBlock(ODEfunc(900))] 
    # fc_layers = [nn.Linear(900, 10)]

    model = nn.Sequential(*downsampling_layers, *feature_layers, *fc_layers).to(device)

    logger.info(model)
    logger.info('Number of parameters: {}'.format(count_parameters(model)))

    criterion = nn.CrossEntropyLoss().to(device)

    train_loader, test_loader, train_eval_loader = get_cifar_loaders(
        args.data_aug, args.batch_size, args.test_batch_size
    )

    data_gen = inf_generator(train_loader)
    batches_per_epoch = len(train_loader)

    lr_fn = learning_rate_with_decay(
        args.batch_size, batch_denom=128, batches_per_epoch=batches_per_epoch, boundary_epochs=[60, 100, 140],
        decay_rates=[1, 0.1, 0.01, 0.001]
    )

    optimizer = torch.optim.SGD(model.parameters(), lr=args.lr, momentum=0.9)

    best_acc = 0
    batch_time_meter = RunningAverageMeter()
    f_nfe_meter = RunningAverageMeter()
    b_nfe_meter = RunningAverageMeter()
    end = time.time()

    for itr in range(args.nepochs * batches_per_epoch):

        for param_group in optimizer.param_groups:
            param_group['lr'] = lr_fn(itr)

        optimizer.zero_grad()
        x, y = data_gen.__next__()
        x = x.to(device)
        y = y.to(device)
        logits = model(x)
        loss = criterion(logits, y)

        if is_odenet:
            nfe_forward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        loss.backward()
        optimizer.step()

        if is_odenet:
            nfe_backward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        batch_time_meter.update(time.time() - end)
        if is_odenet:
            f_nfe_meter.update(nfe_forward)
            b_nfe_meter.update(nfe_backward)
        end = time.time()

        if itr % batches_per_epoch == 0:
            with torch.no_grad():
                train_acc = accuracy(model, train_eval_loader)
                val_acc = accuracy(model, test_loader)
                if val_acc > best_acc:
                    torch.save({'state_dict': model.state_dict(), 'args': args}, os.path.join(args.save, 'model.pth'))
                    best_acc = val_acc
                if best_acc > 0.85 and train_acc > 0.85:
                    break
                logger.info(
                    "Epoch {:04d} | Time {:.3f} ({:.3f}) | NFE-F {:.1f} | NFE-B {:.1f} | "
                    "Train Acc {:.4f} | Test Acc {:.4f}".format(
                        itr // batches_per_epoch, batch_time_meter.val, batch_time_meter.avg, f_nfe_meter.avg,
                        b_nfe_meter.avg, train_acc, val_acc
                    )
                )
    names = []
    params = []
    for name,param in model.named_parameters():
        names.append(name)
        params.append(param.detach().numpy())
    nn1 = dict({'Wb':params,'names':names})
    for name,param in model.named_buffers():
        names.append(name)
        params.append(param.detach().numpy())
    savemat("odecnn_cifar_tiny.mat",nn1)
Namespace(adjoint=False, batch_size=128, data_aug=False, debug=False, downsampling_method='conv', gpu=0, lr=0.01, nepochs=200, network='odenet', save='../logs/cifartiny', test_batch_size=1000, tol=0.001)
Sequential(
  (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1))
  (1): BatchNorm2d(32, eps=32, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (4): BatchNorm2d(16, eps=16, momentum=0.1, affine=True, track_running_stats=True)
  (5): ReLU(inplace=True)
  (6): Conv2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (7): BatchNorm2d(16, eps=16, momentum=0.1, affine=True, track_running_stats=True)
  (8): ReLU(inplace=True)
  (9): Conv2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (10): BatchNorm2d(16, eps=16, momentum=0.1, affine=True, track_running_stats=True)
  (11): ReLU(inplace=True)
  (12): Conv2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (13): BatchNorm2d(16, eps=16, momentum=0.1, affine=True, track_running_stats=True)
  (14): ReLU(inplace=True)
  (15): Flatten()
  (16): ODEBlock(
    (odefunc): ODEfunc(
      (fc1): Linear(in_features=784, out_features=16, bias=True)
      (fc2): Linear(in_features=16, out_features=784, bias=True)
    )
  )
  (17): Linear(in_features=784, out_features=10, bias=True)
)
Number of parameters: 55370
/home/manzand/Documents/Python/neuralODE_examples/cifar/odenet_cifar_example_tiny.py
/home/manzand/Documents/Python/neuralODE_examples/cifar/odenet_cifar_example_tiny.py
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb  4 09:04:31 2021

@author: manzand
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 19 15:10:31 2021

@author: manzand
"""

import os
import argparse
import logging
import time
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms
from scipy.io import savemat

parser = argparse.ArgumentParser()
parser.add_argument('--network', type=str, choices=['resnet', 'odenet'], default='odenet')
parser.add_argument('--tol', type=float, default=1e-3)
parser.add_argument('--adjoint', type=eval, default=False, choices=[True, False])
parser.add_argument('--downsampling-method', type=str, default='conv', choices=['conv', 'res'])
parser.add_argument('--nepochs', type=int, default=200)
parser.add_argument('--data_aug', type=eval, default=False, choices=[True, False])
parser.add_argument('--lr', type=float, default=0.01)
parser.add_argument('--batch_size', type=int, default=128)
parser.add_argument('--test_batch_size', type=int, default=1000)

parser.add_argument('--save', type=str, default='../logs/cifartiny')
parser.add_argument('--debug', action='store_true')
parser.add_argument('--gpu', type=int, default=0)
args = parser.parse_args()

if args.adjoint:
    from torchdiffeq import odeint_adjoint as odeint
else:
    from torchdiffeq import odeint


def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


def norm(dim):
    return nn.BatchNorm2d(min(64, dim), dim)


class ConcatConv2d(nn.Module):

    def __init__(self, dim_in, dim_out, ksize=3, stride=1, padding=0, dilation=1, groups=1, bias=True, transpose=False):
        super(ConcatConv2d, self).__init__()
        module = nn.ConvTranspose2d if transpose else nn.Conv2d
        self._layer = module(
            dim_in + 1, dim_out, kernel_size=ksize, stride=stride, padding=padding, dilation=dilation, groups=groups,
            bias=bias
        )

    def forward(self, t, x):
        tt = torch.ones_like(x[:, :1, :, :]) * t
        ttx = torch.cat([tt, x], 1)
        return self._layer(ttx)


class ODEfunc(nn.Module):

    def __init__(self,dim):
        super(ODEfunc, self).__init__()
        self.fc1 = nn.Linear(dim,16)
        self.fc2 = nn.Linear(16, dim)
        self.nfe = 0

    def forward(self, t, x):
        self.nfe += 1
        # print('11111111111111111111')
        # print(x.size())
        out = self.fc1(x)
        # print('222222222222222222')
        # print(out.size())
        out = self.fc2(out)
        return out


class ODEBlock(nn.Module):

    def __init__(self, odefunc):
        super(ODEBlock, self).__init__()
        self.odefunc = odefunc
        self.integration_time = torch.tensor([0, 1]).float()

    def forward(self, x):
        self.integration_time = self.integration_time.type_as(x)
        out = odeint(self.odefunc, x, self.integration_time, rtol=args.tol, atol=args.tol)
        return out[1]

    @property
    def nfe(self):
        return self.odefunc.nfe

    @nfe.setter
    def nfe(self, value):
        self.odefunc.nfe = value


class Flatten(nn.Module):

    def __init__(self):
        super(Flatten, self).__init__()

    def forward(self, x):
        shape = torch.prod(torch.tensor(x.shape[1:])).item()
        xout = x.view(-1, shape)
        # print(xout.size())
        return xout


class RunningAverageMeter(object):
    """Computes and stores the average and current value"""

    def __init__(self, momentum=0.99):
        self.momentum = momentum
        self.reset()

    def reset(self):
        self.val = None
        self.avg = 0

    def update(self, val):
        if self.val is None:
            self.avg = val
        else:
            self.avg = self.avg * self.momentum + val * (1 - self.momentum)
        self.val = val


def get_cifar_loaders(data_aug=False, batch_size=32, test_batch_size=1000, perc=1.0):
    if data_aug:
        transform_train = transforms.Compose([
            transforms.RandomCrop(28, padding=4),
            transforms.ToTensor(),
        ])
    else:
        transform_train = transforms.Compose([
            transforms.ToTensor(),
        ])

    transform_test = transforms.Compose([
        transforms.ToTensor(),
    ])

    train_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_train), batch_size=batch_size,
        shuffle=True, num_workers=2, drop_last=True
    )

    train_eval_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    test_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=False, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    return train_loader, test_loader, train_eval_loader


def inf_generator(iterable):
    """Allows training with DataLoaders in a single infinite loop:
        for i, (x, y) in enumerate(inf_generator(train_loader)):
    """
    iterator = iterable.__iter__()
    while True:
        try:
            yield iterator.__next__()
        except StopIteration:
            iterator = iterable.__iter__()


def learning_rate_with_decay(batch_size, batch_denom, batches_per_epoch, boundary_epochs, decay_rates):
    initial_learning_rate = args.lr * batch_size / batch_denom

    boundaries = [int(batches_per_epoch * epoch) for epoch in boundary_epochs]
    vals = [initial_learning_rate * decay for decay in decay_rates]

    def learning_rate_fn(itr):
        lt = [itr < b for b in boundaries] + [True]
        i = np.argmax(lt)
        return vals[i]

    return learning_rate_fn


def one_hot(x, K):
    return np.array(x[:, None] == np.arange(K)[None, :], dtype=int)


def accuracy(model, dataset_loader):
    total_correct = 0
    for x, y in dataset_loader:
        x = x.to(device)
        y = one_hot(np.array(y.numpy()), 10)

        target_class = np.argmax(y, axis=1)
        predicted_class = np.argmax(model(x).cpu().detach().numpy(), axis=1)
        total_correct += np.sum(predicted_class == target_class)
    return total_correct / len(dataset_loader.dataset)


def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)


def makedirs(dirname):
    if not os.path.exists(dirname):
        os.makedirs(dirname)


def get_logger(logpath, filepath, package_files=[], displaying=True, saving=True, debug=False):
    logger = logging.getLogger()
    if debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logger.setLevel(level)
    if saving:
        info_file_handler = logging.FileHandler(logpath, mode="a")
        info_file_handler.setLevel(level)
        logger.addHandler(info_file_handler)
    if displaying:
        console_handler = logging.StreamHandler()
        console_handler.setLevel(level)
        logger.addHandler(console_handler)
    logger.info(filepath)
    with open(filepath, "r") as f:
        logger.info(f.read())

    for f in package_files:
        logger.info(f)
        with open(f, "r") as package_f:
            logger.info(package_f.read())

    return logger


if __name__ == '__main__':

    makedirs(args.save)
    logger = get_logger(logpath=os.path.join(args.save, 'logs'), filepath=os.path.abspath(__file__))
    logger.info(args)

    device = torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')

    is_odenet = args.network == 'odenet'

    downsampling_layers = [
        nn.Conv2d(3, 32, 3, 1),
        norm(32),
        nn.ReLU(inplace=True),
        nn.Conv2d(32, 16, 4, 2, 1),
        norm(16),
        nn.ReLU(inplace=True),
        nn.Conv2d(16, 16, 4, 2, 1),
        norm(16),
        nn.ReLU(inplace=True),
        nn.Conv2d(16, 16, 4, 2, 1),
        norm(16),
        nn.ReLU(inplace=True),
        nn.Conv2d(16, 16, 4, 2, 1),
        norm(16),
        nn.ReLU(inplace=True),
        Flatten(),
    ]

    feature_layers = [ODEBlock(ODEfunc(16))] 
    fc_layers = [nn.Linear(16, 10)]
    # feature_layers = [ODEBlock(ODEfunc(900))] 
    # fc_layers = [nn.Linear(900, 10)]

    model = nn.Sequential(*downsampling_layers, *feature_layers, *fc_layers).to(device)

    logger.info(model)
    logger.info('Number of parameters: {}'.format(count_parameters(model)))

    criterion = nn.CrossEntropyLoss().to(device)

    train_loader, test_loader, train_eval_loader = get_cifar_loaders(
        args.data_aug, args.batch_size, args.test_batch_size
    )

    data_gen = inf_generator(train_loader)
    batches_per_epoch = len(train_loader)

    lr_fn = learning_rate_with_decay(
        args.batch_size, batch_denom=128, batches_per_epoch=batches_per_epoch, boundary_epochs=[60, 100, 140],
        decay_rates=[1, 0.1, 0.01, 0.001]
    )

    optimizer = torch.optim.SGD(model.parameters(), lr=args.lr, momentum=0.9)

    best_acc = 0
    batch_time_meter = RunningAverageMeter()
    f_nfe_meter = RunningAverageMeter()
    b_nfe_meter = RunningAverageMeter()
    end = time.time()

    for itr in range(args.nepochs * batches_per_epoch):

        for param_group in optimizer.param_groups:
            param_group['lr'] = lr_fn(itr)

        optimizer.zero_grad()
        x, y = data_gen.__next__()
        x = x.to(device)
        y = y.to(device)
        logits = model(x)
        loss = criterion(logits, y)

        if is_odenet:
            nfe_forward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        loss.backward()
        optimizer.step()

        if is_odenet:
            nfe_backward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        batch_time_meter.update(time.time() - end)
        if is_odenet:
            f_nfe_meter.update(nfe_forward)
            b_nfe_meter.update(nfe_backward)
        end = time.time()

        if itr % batches_per_epoch == 0:
            with torch.no_grad():
                train_acc = accuracy(model, train_eval_loader)
                val_acc = accuracy(model, test_loader)
                if val_acc > best_acc:
                    torch.save({'state_dict': model.state_dict(), 'args': args}, os.path.join(args.save, 'model.pth'))
                    best_acc = val_acc
                if best_acc > 0.85 and train_acc > 0.85:
                    break
                logger.info(
                    "Epoch {:04d} | Time {:.3f} ({:.3f}) | NFE-F {:.1f} | NFE-B {:.1f} | "
                    "Train Acc {:.4f} | Test Acc {:.4f}".format(
                        itr // batches_per_epoch, batch_time_meter.val, batch_time_meter.avg, f_nfe_meter.avg,
                        b_nfe_meter.avg, train_acc, val_acc
                    )
                )
    names = []
    params = []
    for name,param in model.named_parameters():
        names.append(name)
        params.append(param.detach().numpy())
    nn1 = dict({'Wb':params,'names':names})
    for name,param in model.named_buffers():
        names.append(name)
        params.append(param.detach().numpy())
    savemat("odecnn_cifar_tiny.mat",nn1)
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb  4 09:04:31 2021

@author: manzand
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 19 15:10:31 2021

@author: manzand
"""

import os
import argparse
import logging
import time
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms
from scipy.io import savemat

parser = argparse.ArgumentParser()
parser.add_argument('--network', type=str, choices=['resnet', 'odenet'], default='odenet')
parser.add_argument('--tol', type=float, default=1e-3)
parser.add_argument('--adjoint', type=eval, default=False, choices=[True, False])
parser.add_argument('--downsampling-method', type=str, default='conv', choices=['conv', 'res'])
parser.add_argument('--nepochs', type=int, default=200)
parser.add_argument('--data_aug', type=eval, default=False, choices=[True, False])
parser.add_argument('--lr', type=float, default=0.01)
parser.add_argument('--batch_size', type=int, default=128)
parser.add_argument('--test_batch_size', type=int, default=1000)

parser.add_argument('--save', type=str, default='../logs/cifartiny')
parser.add_argument('--debug', action='store_true')
parser.add_argument('--gpu', type=int, default=0)
args = parser.parse_args()

if args.adjoint:
    from torchdiffeq import odeint_adjoint as odeint
else:
    from torchdiffeq import odeint


def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


def norm(dim):
    return nn.BatchNorm2d(min(64, dim), dim)


class ConcatConv2d(nn.Module):

    def __init__(self, dim_in, dim_out, ksize=3, stride=1, padding=0, dilation=1, groups=1, bias=True, transpose=False):
        super(ConcatConv2d, self).__init__()
        module = nn.ConvTranspose2d if transpose else nn.Conv2d
        self._layer = module(
            dim_in + 1, dim_out, kernel_size=ksize, stride=stride, padding=padding, dilation=dilation, groups=groups,
            bias=bias
        )

    def forward(self, t, x):
        tt = torch.ones_like(x[:, :1, :, :]) * t
        ttx = torch.cat([tt, x], 1)
        return self._layer(ttx)


class ODEfunc(nn.Module):

    def __init__(self,dim):
        super(ODEfunc, self).__init__()
        self.fc1 = nn.Linear(dim,16)
        self.fc2 = nn.Linear(16, dim)
        self.nfe = 0

    def forward(self, t, x):
        self.nfe += 1
        # print('11111111111111111111')
        # print(x.size())
        out = self.fc1(x)
        # print('222222222222222222')
        # print(out.size())
        out = self.fc2(out)
        return out


class ODEBlock(nn.Module):

    def __init__(self, odefunc):
        super(ODEBlock, self).__init__()
        self.odefunc = odefunc
        self.integration_time = torch.tensor([0, 1]).float()

    def forward(self, x):
        self.integration_time = self.integration_time.type_as(x)
        out = odeint(self.odefunc, x, self.integration_time, rtol=args.tol, atol=args.tol)
        return out[1]

    @property
    def nfe(self):
        return self.odefunc.nfe

    @nfe.setter
    def nfe(self, value):
        self.odefunc.nfe = value


class Flatten(nn.Module):

    def __init__(self):
        super(Flatten, self).__init__()

    def forward(self, x):
        shape = torch.prod(torch.tensor(x.shape[1:])).item()
        xout = x.view(-1, shape)
        # print(xout.size())
        return xout


class RunningAverageMeter(object):
    """Computes and stores the average and current value"""

    def __init__(self, momentum=0.99):
        self.momentum = momentum
        self.reset()

    def reset(self):
        self.val = None
        self.avg = 0

    def update(self, val):
        if self.val is None:
            self.avg = val
        else:
            self.avg = self.avg * self.momentum + val * (1 - self.momentum)
        self.val = val


def get_cifar_loaders(data_aug=False, batch_size=32, test_batch_size=1000, perc=1.0):
    if data_aug:
        transform_train = transforms.Compose([
            transforms.RandomCrop(28, padding=4),
            transforms.ToTensor(),
        ])
    else:
        transform_train = transforms.Compose([
            transforms.ToTensor(),
        ])

    transform_test = transforms.Compose([
        transforms.ToTensor(),
    ])

    train_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_train), batch_size=batch_size,
        shuffle=True, num_workers=2, drop_last=True
    )

    train_eval_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    test_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=False, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    return train_loader, test_loader, train_eval_loader


def inf_generator(iterable):
    """Allows training with DataLoaders in a single infinite loop:
        for i, (x, y) in enumerate(inf_generator(train_loader)):
    """
    iterator = iterable.__iter__()
    while True:
        try:
            yield iterator.__next__()
        except StopIteration:
            iterator = iterable.__iter__()


def learning_rate_with_decay(batch_size, batch_denom, batches_per_epoch, boundary_epochs, decay_rates):
    initial_learning_rate = args.lr * batch_size / batch_denom

    boundaries = [int(batches_per_epoch * epoch) for epoch in boundary_epochs]
    vals = [initial_learning_rate * decay for decay in decay_rates]

    def learning_rate_fn(itr):
        lt = [itr < b for b in boundaries] + [True]
        i = np.argmax(lt)
        return vals[i]

    return learning_rate_fn


def one_hot(x, K):
    return np.array(x[:, None] == np.arange(K)[None, :], dtype=int)


def accuracy(model, dataset_loader):
    total_correct = 0
    for x, y in dataset_loader:
        x = x.to(device)
        y = one_hot(np.array(y.numpy()), 10)

        target_class = np.argmax(y, axis=1)
        predicted_class = np.argmax(model(x).cpu().detach().numpy(), axis=1)
        total_correct += np.sum(predicted_class == target_class)
    return total_correct / len(dataset_loader.dataset)


def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)


def makedirs(dirname):
    if not os.path.exists(dirname):
        os.makedirs(dirname)


def get_logger(logpath, filepath, package_files=[], displaying=True, saving=True, debug=False):
    logger = logging.getLogger()
    if debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logger.setLevel(level)
    if saving:
        info_file_handler = logging.FileHandler(logpath, mode="a")
        info_file_handler.setLevel(level)
        logger.addHandler(info_file_handler)
    if displaying:
        console_handler = logging.StreamHandler()
        console_handler.setLevel(level)
        logger.addHandler(console_handler)
    logger.info(filepath)
    with open(filepath, "r") as f:
        logger.info(f.read())

    for f in package_files:
        logger.info(f)
        with open(f, "r") as package_f:
            logger.info(package_f.read())

    return logger


if __name__ == '__main__':

    makedirs(args.save)
    logger = get_logger(logpath=os.path.join(args.save, 'logs'), filepath=os.path.abspath(__file__))
    logger.info(args)

    device = torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')

    is_odenet = args.network == 'odenet'

    downsampling_layers = [
        nn.Conv2d(3, 32, 3, 1),
        norm(32),
        nn.ReLU(inplace=True),
        nn.Conv2d(32, 16, 4, 2, 1),
        norm(16),
        nn.ReLU(inplace=True),
        nn.Conv2d(16, 16, 4, 2, 1),
        norm(16),
        nn.ReLU(inplace=True),
        nn.Conv2d(16, 16, 4, 2, 1),
        norm(16),
        nn.ReLU(inplace=True),
        nn.Conv2d(16, 16, 4, 2, 1),
        norm(16),
        nn.ReLU(inplace=True),
        Flatten(),
    ]

    feature_layers = [ODEBlock(ODEfunc(16))] 
    fc_layers = [nn.Linear(16, 10)]
    # feature_layers = [ODEBlock(ODEfunc(900))] 
    # fc_layers = [nn.Linear(900, 10)]

    model = nn.Sequential(*downsampling_layers, *feature_layers, *fc_layers).to(device)

    logger.info(model)
    logger.info('Number of parameters: {}'.format(count_parameters(model)))

    criterion = nn.CrossEntropyLoss().to(device)

    train_loader, test_loader, train_eval_loader = get_cifar_loaders(
        args.data_aug, args.batch_size, args.test_batch_size
    )

    data_gen = inf_generator(train_loader)
    batches_per_epoch = len(train_loader)

    lr_fn = learning_rate_with_decay(
        args.batch_size, batch_denom=128, batches_per_epoch=batches_per_epoch, boundary_epochs=[60, 100, 140],
        decay_rates=[1, 0.1, 0.01, 0.001]
    )

    optimizer = torch.optim.SGD(model.parameters(), lr=args.lr, momentum=0.9)

    best_acc = 0
    batch_time_meter = RunningAverageMeter()
    f_nfe_meter = RunningAverageMeter()
    b_nfe_meter = RunningAverageMeter()
    end = time.time()

    for itr in range(args.nepochs * batches_per_epoch):

        for param_group in optimizer.param_groups:
            param_group['lr'] = lr_fn(itr)

        optimizer.zero_grad()
        x, y = data_gen.__next__()
        x = x.to(device)
        y = y.to(device)
        logits = model(x)
        loss = criterion(logits, y)

        if is_odenet:
            nfe_forward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        loss.backward()
        optimizer.step()

        if is_odenet:
            nfe_backward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        batch_time_meter.update(time.time() - end)
        if is_odenet:
            f_nfe_meter.update(nfe_forward)
            b_nfe_meter.update(nfe_backward)
        end = time.time()

        if itr % batches_per_epoch == 0:
            with torch.no_grad():
                train_acc = accuracy(model, train_eval_loader)
                val_acc = accuracy(model, test_loader)
                if val_acc > best_acc:
                    torch.save({'state_dict': model.state_dict(), 'args': args}, os.path.join(args.save, 'model.pth'))
                    best_acc = val_acc
                if best_acc > 0.85 and train_acc > 0.85:
                    break
                logger.info(
                    "Epoch {:04d} | Time {:.3f} ({:.3f}) | NFE-F {:.1f} | NFE-B {:.1f} | "
                    "Train Acc {:.4f} | Test Acc {:.4f}".format(
                        itr // batches_per_epoch, batch_time_meter.val, batch_time_meter.avg, f_nfe_meter.avg,
                        b_nfe_meter.avg, train_acc, val_acc
                    )
                )
    names = []
    params = []
    for name,param in model.named_parameters():
        names.append(name)
        params.append(param.detach().numpy())
    nn1 = dict({'Wb':params,'names':names})
    for name,param in model.named_buffers():
        names.append(name)
        params.append(param.detach().numpy())
    savemat("odecnn_cifar_tiny.mat",nn1)
Namespace(adjoint=False, batch_size=128, data_aug=False, debug=False, downsampling_method='conv', gpu=0, lr=0.01, nepochs=200, network='odenet', save='../logs/cifartiny', test_batch_size=1000, tol=0.001)
Namespace(adjoint=False, batch_size=128, data_aug=False, debug=False, downsampling_method='conv', gpu=0, lr=0.01, nepochs=200, network='odenet', save='../logs/cifartiny', test_batch_size=1000, tol=0.001)
Sequential(
  (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1))
  (1): BatchNorm2d(32, eps=32, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (4): BatchNorm2d(16, eps=16, momentum=0.1, affine=True, track_running_stats=True)
  (5): ReLU(inplace=True)
  (6): Conv2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (7): BatchNorm2d(16, eps=16, momentum=0.1, affine=True, track_running_stats=True)
  (8): ReLU(inplace=True)
  (9): Conv2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (10): BatchNorm2d(16, eps=16, momentum=0.1, affine=True, track_running_stats=True)
  (11): ReLU(inplace=True)
  (12): Conv2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (13): BatchNorm2d(16, eps=16, momentum=0.1, affine=True, track_running_stats=True)
  (14): ReLU(inplace=True)
  (15): Flatten()
  (16): ODEBlock(
    (odefunc): ODEfunc(
      (fc1): Linear(in_features=16, out_features=16, bias=True)
      (fc2): Linear(in_features=16, out_features=16, bias=True)
    )
  )
  (17): Linear(in_features=16, out_features=10, bias=True)
)
Sequential(
  (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1))
  (1): BatchNorm2d(32, eps=32, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (4): BatchNorm2d(16, eps=16, momentum=0.1, affine=True, track_running_stats=True)
  (5): ReLU(inplace=True)
  (6): Conv2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (7): BatchNorm2d(16, eps=16, momentum=0.1, affine=True, track_running_stats=True)
  (8): ReLU(inplace=True)
  (9): Conv2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (10): BatchNorm2d(16, eps=16, momentum=0.1, affine=True, track_running_stats=True)
  (11): ReLU(inplace=True)
  (12): Conv2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (13): BatchNorm2d(16, eps=16, momentum=0.1, affine=True, track_running_stats=True)
  (14): ReLU(inplace=True)
  (15): Flatten()
  (16): ODEBlock(
    (odefunc): ODEfunc(
      (fc1): Linear(in_features=16, out_features=16, bias=True)
      (fc2): Linear(in_features=16, out_features=16, bias=True)
    )
  )
  (17): Linear(in_features=16, out_features=10, bias=True)
)
Number of parameters: 22346
Number of parameters: 22346
Epoch 0000 | Time 0.342 (0.342) | NFE-F 44.0 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0000 | Time 0.342 (0.342) | NFE-F 44.0 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0001 | Time 0.296 (0.099) | NFE-F 15.4 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0001 | Time 0.296 (0.099) | NFE-F 15.4 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0002 | Time 0.269 (0.092) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0002 | Time 0.269 (0.092) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0003 | Time 0.255 (0.088) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0003 | Time 0.255 (0.088) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0004 | Time 0.363 (0.094) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0004 | Time 0.363 (0.094) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0005 | Time 0.248 (0.107) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0005 | Time 0.248 (0.107) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0006 | Time 0.352 (0.125) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0006 | Time 0.352 (0.125) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0007 | Time 0.270 (0.106) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0007 | Time 0.270 (0.106) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0008 | Time 0.330 (0.107) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0008 | Time 0.330 (0.107) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0009 | Time 0.248 (0.099) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0009 | Time 0.248 (0.099) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0010 | Time 0.287 (0.101) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0010 | Time 0.287 (0.101) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0011 | Time 0.260 (0.087) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0011 | Time 0.260 (0.087) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0012 | Time 0.315 (0.105) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0012 | Time 0.315 (0.105) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0013 | Time 0.310 (0.099) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0013 | Time 0.310 (0.099) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0014 | Time 0.291 (0.101) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0014 | Time 0.291 (0.101) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0015 | Time 0.277 (0.093) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0015 | Time 0.277 (0.093) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0016 | Time 0.285 (0.094) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0016 | Time 0.285 (0.094) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0017 | Time 0.236 (0.085) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0017 | Time 0.236 (0.085) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0018 | Time 0.284 (0.093) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0018 | Time 0.284 (0.093) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0019 | Time 0.256 (0.107) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0019 | Time 0.256 (0.107) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0020 | Time 0.338 (0.101) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0020 | Time 0.338 (0.101) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0021 | Time 0.255 (0.099) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0021 | Time 0.255 (0.099) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0022 | Time 0.240 (0.095) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0022 | Time 0.240 (0.095) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0023 | Time 0.302 (0.086) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0023 | Time 0.302 (0.086) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0024 | Time 0.323 (0.104) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0024 | Time 0.323 (0.104) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0025 | Time 0.296 (0.092) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0025 | Time 0.296 (0.092) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0026 | Time 0.316 (0.091) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0026 | Time 0.316 (0.091) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0027 | Time 0.289 (0.098) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0027 | Time 0.289 (0.098) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0028 | Time 0.281 (0.097) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0028 | Time 0.281 (0.097) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0029 | Time 0.266 (0.090) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0029 | Time 0.266 (0.090) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0030 | Time 0.248 (0.091) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0030 | Time 0.248 (0.091) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0031 | Time 0.281 (0.098) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0031 | Time 0.281 (0.098) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0032 | Time 0.268 (0.096) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0032 | Time 0.268 (0.096) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0033 | Time 0.237 (0.088) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0033 | Time 0.237 (0.088) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0034 | Time 0.269 (0.090) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0034 | Time 0.269 (0.090) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0035 | Time 0.255 (0.089) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0035 | Time 0.255 (0.089) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0036 | Time 0.247 (0.102) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0036 | Time 0.247 (0.102) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0037 | Time 0.261 (0.091) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0037 | Time 0.261 (0.091) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0038 | Time 0.218 (0.083) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0038 | Time 0.218 (0.083) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0039 | Time 0.258 (0.114) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0039 | Time 0.258 (0.114) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0040 | Time 0.236 (0.098) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0040 | Time 0.236 (0.098) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0041 | Time 0.232 (0.094) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0041 | Time 0.232 (0.094) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0042 | Time 0.279 (0.092) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0042 | Time 0.279 (0.092) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0043 | Time 0.283 (0.102) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0043 | Time 0.283 (0.102) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0044 | Time 0.279 (0.091) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0044 | Time 0.279 (0.091) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0045 | Time 0.278 (0.101) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0045 | Time 0.278 (0.101) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0046 | Time 0.228 (0.094) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0046 | Time 0.228 (0.094) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
/home/manzand/Documents/Python/neuralODE_examples/cifar/odenet_cifar_example_tiny.py
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb  4 09:04:31 2021

@author: manzand
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 19 15:10:31 2021

@author: manzand
"""

import os
import argparse
import logging
import time
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms
from scipy.io import savemat

parser = argparse.ArgumentParser()
parser.add_argument('--network', type=str, choices=['resnet', 'odenet'], default='odenet')
parser.add_argument('--tol', type=float, default=1e-3)
parser.add_argument('--adjoint', type=eval, default=False, choices=[True, False])
parser.add_argument('--downsampling-method', type=str, default='conv', choices=['conv', 'res'])
parser.add_argument('--nepochs', type=int, default=200)
parser.add_argument('--data_aug', type=eval, default=False, choices=[True, False])
parser.add_argument('--lr', type=float, default=0.001)
parser.add_argument('--batch_size', type=int, default=128)
parser.add_argument('--test_batch_size', type=int, default=1000)

parser.add_argument('--save', type=str, default='../logs/cifartiny')
parser.add_argument('--debug', action='store_true')
parser.add_argument('--gpu', type=int, default=0)
args = parser.parse_args()

if args.adjoint:
    from torchdiffeq import odeint_adjoint as odeint
else:
    from torchdiffeq import odeint


def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


def norm(dim):
    return nn.BatchNorm2d(min(64, dim), dim)


class ConcatConv2d(nn.Module):

    def __init__(self, dim_in, dim_out, ksize=3, stride=1, padding=0, dilation=1, groups=1, bias=True, transpose=False):
        super(ConcatConv2d, self).__init__()
        module = nn.ConvTranspose2d if transpose else nn.Conv2d
        self._layer = module(
            dim_in + 1, dim_out, kernel_size=ksize, stride=stride, padding=padding, dilation=dilation, groups=groups,
            bias=bias
        )

    def forward(self, t, x):
        tt = torch.ones_like(x[:, :1, :, :]) * t
        ttx = torch.cat([tt, x], 1)
        return self._layer(ttx)


class ODEfunc(nn.Module):

    def __init__(self,dim):
        super(ODEfunc, self).__init__()
        self.fc1 = nn.Linear(dim,16)
        self.fc2 = nn.Linear(16, dim)
        self.nfe = 0

    def forward(self, t, x):
        self.nfe += 1
        # print('11111111111111111111')
        # print(x.size())
        out = self.fc1(x)
        # print('222222222222222222')
        # print(out.size())
        out = self.fc2(out)
        return out


class ODEBlock(nn.Module):

    def __init__(self, odefunc):
        super(ODEBlock, self).__init__()
        self.odefunc = odefunc
        self.integration_time = torch.tensor([0, 1]).float()

    def forward(self, x):
        self.integration_time = self.integration_time.type_as(x)
        out = odeint(self.odefunc, x, self.integration_time, rtol=args.tol, atol=args.tol)
        return out[1]

    @property
    def nfe(self):
        return self.odefunc.nfe

    @nfe.setter
    def nfe(self, value):
        self.odefunc.nfe = value


class Flatten(nn.Module):

    def __init__(self):
        super(Flatten, self).__init__()

    def forward(self, x):
        shape = torch.prod(torch.tensor(x.shape[1:])).item()
        xout = x.view(-1, shape)
        # print(xout.size())
        return xout


class RunningAverageMeter(object):
    """Computes and stores the average and current value"""

    def __init__(self, momentum=0.99):
        self.momentum = momentum
        self.reset()

    def reset(self):
        self.val = None
        self.avg = 0

    def update(self, val):
        if self.val is None:
            self.avg = val
        else:
            self.avg = self.avg * self.momentum + val * (1 - self.momentum)
        self.val = val


def get_cifar_loaders(data_aug=False, batch_size=32, test_batch_size=1000, perc=1.0):
    if data_aug:
        transform_train = transforms.Compose([
            transforms.RandomCrop(28, padding=4),
            transforms.ToTensor(),
        ])
    else:
        transform_train = transforms.Compose([
            transforms.ToTensor(),
        ])

    transform_test = transforms.Compose([
        transforms.ToTensor(),
    ])

    train_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_train), batch_size=batch_size,
        shuffle=True, num_workers=2, drop_last=True
    )

    train_eval_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    test_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=False, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    return train_loader, test_loader, train_eval_loader


def inf_generator(iterable):
    """Allows training with DataLoaders in a single infinite loop:
        for i, (x, y) in enumerate(inf_generator(train_loader)):
    """
    iterator = iterable.__iter__()
    while True:
        try:
            yield iterator.__next__()
        except StopIteration:
            iterator = iterable.__iter__()


def learning_rate_with_decay(batch_size, batch_denom, batches_per_epoch, boundary_epochs, decay_rates):
    initial_learning_rate = args.lr * batch_size / batch_denom

    boundaries = [int(batches_per_epoch * epoch) for epoch in boundary_epochs]
    vals = [initial_learning_rate * decay for decay in decay_rates]

    def learning_rate_fn(itr):
        lt = [itr < b for b in boundaries] + [True]
        i = np.argmax(lt)
        return vals[i]

    return learning_rate_fn


def one_hot(x, K):
    return np.array(x[:, None] == np.arange(K)[None, :], dtype=int)


def accuracy(model, dataset_loader):
    total_correct = 0
    for x, y in dataset_loader:
        x = x.to(device)
        y = one_hot(np.array(y.numpy()), 10)

        target_class = np.argmax(y, axis=1)
        predicted_class = np.argmax(model(x).cpu().detach().numpy(), axis=1)
        total_correct += np.sum(predicted_class == target_class)
    return total_correct / len(dataset_loader.dataset)


def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)


def makedirs(dirname):
    if not os.path.exists(dirname):
        os.makedirs(dirname)


def get_logger(logpath, filepath, package_files=[], displaying=True, saving=True, debug=False):
    logger = logging.getLogger()
    if debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logger.setLevel(level)
    if saving:
        info_file_handler = logging.FileHandler(logpath, mode="a")
        info_file_handler.setLevel(level)
        logger.addHandler(info_file_handler)
    if displaying:
        console_handler = logging.StreamHandler()
        console_handler.setLevel(level)
        logger.addHandler(console_handler)
    logger.info(filepath)
    with open(filepath, "r") as f:
        logger.info(f.read())

    for f in package_files:
        logger.info(f)
        with open(f, "r") as package_f:
            logger.info(package_f.read())

    return logger


if __name__ == '__main__':

    makedirs(args.save)
    logger = get_logger(logpath=os.path.join(args.save, 'logs'), filepath=os.path.abspath(__file__))
    logger.info(args)

    device = torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')

    is_odenet = args.network == 'odenet'

    downsampling_layers = [
        nn.Conv2d(3, 32, 3, 1),
        norm(32),
        nn.ReLU(inplace=True),
        nn.Conv2d(32, 16, 4, 2, 1),
        norm(16),
        nn.ReLU(inplace=True),
        nn.Conv2d(16, 16, 4, 2, 1),
        norm(16),
        nn.ReLU(inplace=True),
        nn.Conv2d(16, 16, 4, 2, 1),
        norm(16),
        nn.ReLU(inplace=True),
        nn.Conv2d(16, 16, 4, 2, 1),
        norm(16),
        nn.ReLU(inplace=True),
        Flatten(),
    ]

    feature_layers = [ODEBlock(ODEfunc(16))] 
    fc_layers = [nn.Linear(16, 10)]
    # feature_layers = [ODEBlock(ODEfunc(900))] 
    # fc_layers = [nn.Linear(900, 10)]

    model = nn.Sequential(*downsampling_layers, *feature_layers, *fc_layers).to(device)

    logger.info(model)
    logger.info('Number of parameters: {}'.format(count_parameters(model)))

    criterion = nn.CrossEntropyLoss().to(device)

    train_loader, test_loader, train_eval_loader = get_cifar_loaders(
        args.data_aug, args.batch_size, args.test_batch_size
    )

    data_gen = inf_generator(train_loader)
    batches_per_epoch = len(train_loader)

    lr_fn = learning_rate_with_decay(
        args.batch_size, batch_denom=128, batches_per_epoch=batches_per_epoch, boundary_epochs=[60, 100, 140],
        decay_rates=[1, 0.1, 0.01, 0.001]
    )

    optimizer = torch.optim.SGD(model.parameters(), lr=args.lr, momentum=0.9)

    best_acc = 0
    batch_time_meter = RunningAverageMeter()
    f_nfe_meter = RunningAverageMeter()
    b_nfe_meter = RunningAverageMeter()
    end = time.time()

    for itr in range(args.nepochs * batches_per_epoch):

        for param_group in optimizer.param_groups:
            param_group['lr'] = lr_fn(itr)

        optimizer.zero_grad()
        x, y = data_gen.__next__()
        x = x.to(device)
        y = y.to(device)
        logits = model(x)
        loss = criterion(logits, y)

        if is_odenet:
            nfe_forward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        loss.backward()
        optimizer.step()

        if is_odenet:
            nfe_backward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        batch_time_meter.update(time.time() - end)
        if is_odenet:
            f_nfe_meter.update(nfe_forward)
            b_nfe_meter.update(nfe_backward)
        end = time.time()

        if itr % batches_per_epoch == 0:
            with torch.no_grad():
                train_acc = accuracy(model, train_eval_loader)
                val_acc = accuracy(model, test_loader)
                if val_acc > best_acc:
                    torch.save({'state_dict': model.state_dict(), 'args': args}, os.path.join(args.save, 'model.pth'))
                    best_acc = val_acc
                if best_acc > 0.85 and train_acc > 0.85:
                    break
                logger.info(
                    "Epoch {:04d} | Time {:.3f} ({:.3f}) | NFE-F {:.1f} | NFE-B {:.1f} | "
                    "Train Acc {:.4f} | Test Acc {:.4f}".format(
                        itr // batches_per_epoch, batch_time_meter.val, batch_time_meter.avg, f_nfe_meter.avg,
                        b_nfe_meter.avg, train_acc, val_acc
                    )
                )
    names = []
    params = []
    for name,param in model.named_parameters():
        names.append(name)
        params.append(param.detach().numpy())
    nn1 = dict({'Wb':params,'names':names})
    for name,param in model.named_buffers():
        names.append(name)
        params.append(param.detach().numpy())
    savemat("odecnn_cifar_tiny.mat",nn1)
Namespace(adjoint=False, batch_size=128, data_aug=False, debug=False, downsampling_method='conv', gpu=0, lr=0.001, nepochs=200, network='odenet', save='../logs/cifartiny', test_batch_size=1000, tol=0.001)
Sequential(
  (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1))
  (1): BatchNorm2d(32, eps=32, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (4): BatchNorm2d(16, eps=16, momentum=0.1, affine=True, track_running_stats=True)
  (5): ReLU(inplace=True)
  (6): Conv2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (7): BatchNorm2d(16, eps=16, momentum=0.1, affine=True, track_running_stats=True)
  (8): ReLU(inplace=True)
  (9): Conv2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (10): BatchNorm2d(16, eps=16, momentum=0.1, affine=True, track_running_stats=True)
  (11): ReLU(inplace=True)
  (12): Conv2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (13): BatchNorm2d(16, eps=16, momentum=0.1, affine=True, track_running_stats=True)
  (14): ReLU(inplace=True)
  (15): Flatten()
  (16): ODEBlock(
    (odefunc): ODEfunc(
      (fc1): Linear(in_features=16, out_features=16, bias=True)
      (fc2): Linear(in_features=16, out_features=16, bias=True)
    )
  )
  (17): Linear(in_features=16, out_features=10, bias=True)
)
Number of parameters: 22346
Epoch 0000 | Time 0.355 (0.355) | NFE-F 44.0 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0001 | Time 0.335 (0.145) | NFE-F 17.8 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0002 | Time 0.272 (0.134) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0003 | Time 0.321 (0.136) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0004 | Time 0.351 (0.143) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0005 | Time 0.385 (0.128) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0006 | Time 0.321 (0.143) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0007 | Time 0.403 (0.140) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0008 | Time 0.349 (0.157) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0009 | Time 0.279 (0.133) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0010 | Time 0.300 (0.149) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0011 | Time 0.392 (0.137) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0012 | Time 0.392 (0.155) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0013 | Time 0.269 (0.138) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0014 | Time 0.353 (0.138) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0015 | Time 0.368 (0.137) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0016 | Time 0.308 (0.136) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0017 | Time 0.375 (0.168) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0018 | Time 0.312 (0.154) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0019 | Time 0.282 (0.142) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0020 | Time 0.321 (0.139) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0021 | Time 0.507 (0.154) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0022 | Time 0.322 (0.153) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0023 | Time 0.366 (0.145) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0024 | Time 0.435 (0.149) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0025 | Time 0.311 (0.167) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0026 | Time 0.340 (0.146) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0027 | Time 0.368 (0.137) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0028 | Time 0.311 (0.128) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0029 | Time 0.356 (0.148) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0030 | Time 0.346 (0.127) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0031 | Time 0.345 (0.142) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0032 | Time 0.357 (0.145) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0033 | Time 0.313 (0.147) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0034 | Time 0.375 (0.149) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0035 | Time 0.425 (0.143) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0036 | Time 0.366 (0.127) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0037 | Time 0.311 (0.131) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0038 | Time 0.405 (0.158) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0039 | Time 0.255 (0.120) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
/home/manzand/Documents/Python/neuralODE_examples/cifar/odenet_cifar_example_tiny.py
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb  4 09:04:31 2021

@author: manzand
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 19 15:10:31 2021

@author: manzand
"""

import os
import argparse
import logging
import time
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms
from scipy.io import savemat

parser = argparse.ArgumentParser()
parser.add_argument('--network', type=str, choices=['resnet', 'odenet'], default='odenet')
parser.add_argument('--tol', type=float, default=1e-3)
parser.add_argument('--adjoint', type=eval, default=False, choices=[True, False])
parser.add_argument('--downsampling-method', type=str, default='conv', choices=['conv', 'res'])
parser.add_argument('--nepochs', type=int, default=200)
parser.add_argument('--data_aug', type=eval, default=False, choices=[True, False])
parser.add_argument('--lr', type=float, default=0.001)
parser.add_argument('--batch_size', type=int, default=128)
parser.add_argument('--test_batch_size', type=int, default=1000)

parser.add_argument('--save', type=str, default='../logs/cifartiny')
parser.add_argument('--debug', action='store_true')
parser.add_argument('--gpu', type=int, default=0)
args = parser.parse_args()

if args.adjoint:
    from torchdiffeq import odeint_adjoint as odeint
else:
    from torchdiffeq import odeint


def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


def norm(dim):
    return nn.BatchNorm2d(min(64, dim), dim)


class ConcatConv2d(nn.Module):

    def __init__(self, dim_in, dim_out, ksize=3, stride=1, padding=0, dilation=1, groups=1, bias=True, transpose=False):
        super(ConcatConv2d, self).__init__()
        module = nn.ConvTranspose2d if transpose else nn.Conv2d
        self._layer = module(
            dim_in + 1, dim_out, kernel_size=ksize, stride=stride, padding=padding, dilation=dilation, groups=groups,
            bias=bias
        )

    def forward(self, t, x):
        tt = torch.ones_like(x[:, :1, :, :]) * t
        ttx = torch.cat([tt, x], 1)
        return self._layer(ttx)


class ODEfunc(nn.Module):

    def __init__(self,dim):
        super(ODEfunc, self).__init__()
        self.fc1 = nn.Linear(dim,16)
        self.fc2 = nn.Linear(16, dim)
        self.nfe = 0

    def forward(self, t, x):
        self.nfe += 1
        # print('11111111111111111111')
        # print(x.size())
        out = self.fc1(x)
        # print('222222222222222222')
        # print(out.size())
        out = self.fc2(out)
        return out


class ODEBlock(nn.Module):

    def __init__(self, odefunc):
        super(ODEBlock, self).__init__()
        self.odefunc = odefunc
        self.integration_time = torch.tensor([0, 1]).float()

    def forward(self, x):
        self.integration_time = self.integration_time.type_as(x)
        out = odeint(self.odefunc, x, self.integration_time, rtol=args.tol, atol=args.tol)
        return out[1]

    @property
    def nfe(self):
        return self.odefunc.nfe

    @nfe.setter
    def nfe(self, value):
        self.odefunc.nfe = value


class Flatten(nn.Module):

    def __init__(self):
        super(Flatten, self).__init__()

    def forward(self, x):
        shape = torch.prod(torch.tensor(x.shape[1:])).item()
        xout = x.view(-1, shape)
        # print(xout.size())
        return xout


class RunningAverageMeter(object):
    """Computes and stores the average and current value"""

    def __init__(self, momentum=0.99):
        self.momentum = momentum
        self.reset()

    def reset(self):
        self.val = None
        self.avg = 0

    def update(self, val):
        if self.val is None:
            self.avg = val
        else:
            self.avg = self.avg * self.momentum + val * (1 - self.momentum)
        self.val = val


def get_cifar_loaders(data_aug=False, batch_size=32, test_batch_size=1000, perc=1.0):
    if data_aug:
        transform_train = transforms.Compose([
            transforms.RandomCrop(28, padding=4),
            transforms.ToTensor(),
        ])
    else:
        transform_train = transforms.Compose([
            transforms.ToTensor(),
        ])

    transform_test = transforms.Compose([
        transforms.ToTensor(),
    ])

    train_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_train), batch_size=batch_size,
        shuffle=True, num_workers=2, drop_last=True
    )

    train_eval_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    test_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=False, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    return train_loader, test_loader, train_eval_loader


def inf_generator(iterable):
    """Allows training with DataLoaders in a single infinite loop:
        for i, (x, y) in enumerate(inf_generator(train_loader)):
    """
    iterator = iterable.__iter__()
    while True:
        try:
            yield iterator.__next__()
        except StopIteration:
            iterator = iterable.__iter__()


def learning_rate_with_decay(batch_size, batch_denom, batches_per_epoch, boundary_epochs, decay_rates):
    initial_learning_rate = args.lr * batch_size / batch_denom

    boundaries = [int(batches_per_epoch * epoch) for epoch in boundary_epochs]
    vals = [initial_learning_rate * decay for decay in decay_rates]

    def learning_rate_fn(itr):
        lt = [itr < b for b in boundaries] + [True]
        i = np.argmax(lt)
        return vals[i]

    return learning_rate_fn


def one_hot(x, K):
    return np.array(x[:, None] == np.arange(K)[None, :], dtype=int)


def accuracy(model, dataset_loader):
    total_correct = 0
    for x, y in dataset_loader:
        x = x.to(device)
        y = one_hot(np.array(y.numpy()), 10)

        target_class = np.argmax(y, axis=1)
        predicted_class = np.argmax(model(x).cpu().detach().numpy(), axis=1)
        total_correct += np.sum(predicted_class == target_class)
    return total_correct / len(dataset_loader.dataset)


def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)


def makedirs(dirname):
    if not os.path.exists(dirname):
        os.makedirs(dirname)


def get_logger(logpath, filepath, package_files=[], displaying=True, saving=True, debug=False):
    logger = logging.getLogger()
    if debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logger.setLevel(level)
    if saving:
        info_file_handler = logging.FileHandler(logpath, mode="a")
        info_file_handler.setLevel(level)
        logger.addHandler(info_file_handler)
    if displaying:
        console_handler = logging.StreamHandler()
        console_handler.setLevel(level)
        logger.addHandler(console_handler)
    logger.info(filepath)
    with open(filepath, "r") as f:
        logger.info(f.read())

    for f in package_files:
        logger.info(f)
        with open(f, "r") as package_f:
            logger.info(package_f.read())

    return logger


if __name__ == '__main__':

    makedirs(args.save)
    logger = get_logger(logpath=os.path.join(args.save, 'logs'), filepath=os.path.abspath(__file__))
    logger.info(args)

    device = torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')

    is_odenet = args.network == 'odenet'

    downsampling_layers = [
        nn.Conv2d(3, 32, 3, 1),
        norm(32),
        nn.ReLU(inplace=True),
        nn.Conv2d(32, 16, 4, 2, 1),
        norm(16),
        nn.ReLU(inplace=True),
        Flatten(),
    ]

    feature_layers = [ODEBlock(ODEfunc(16))] 
    fc_layers = [nn.Linear(16, 10)]
    # feature_layers = [ODEBlock(ODEfunc(900))] 
    # fc_layers = [nn.Linear(900, 10)]

    model = nn.Sequential(*downsampling_layers, *feature_layers, *fc_layers).to(device)

    logger.info(model)
    logger.info('Number of parameters: {}'.format(count_parameters(model)))

    criterion = nn.CrossEntropyLoss().to(device)

    train_loader, test_loader, train_eval_loader = get_cifar_loaders(
        args.data_aug, args.batch_size, args.test_batch_size
    )

    data_gen = inf_generator(train_loader)
    batches_per_epoch = len(train_loader)

    lr_fn = learning_rate_with_decay(
        args.batch_size, batch_denom=128, batches_per_epoch=batches_per_epoch, boundary_epochs=[60, 100, 140],
        decay_rates=[1, 0.1, 0.01, 0.001]
    )

    optimizer = torch.optim.SGD(model.parameters(), lr=args.lr, momentum=0.9)

    best_acc = 0
    batch_time_meter = RunningAverageMeter()
    f_nfe_meter = RunningAverageMeter()
    b_nfe_meter = RunningAverageMeter()
    end = time.time()

    for itr in range(args.nepochs * batches_per_epoch):

        for param_group in optimizer.param_groups:
            param_group['lr'] = lr_fn(itr)

        optimizer.zero_grad()
        x, y = data_gen.__next__()
        x = x.to(device)
        y = y.to(device)
        logits = model(x)
        loss = criterion(logits, y)

        if is_odenet:
            nfe_forward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        loss.backward()
        optimizer.step()

        if is_odenet:
            nfe_backward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        batch_time_meter.update(time.time() - end)
        if is_odenet:
            f_nfe_meter.update(nfe_forward)
            b_nfe_meter.update(nfe_backward)
        end = time.time()

        if itr % batches_per_epoch == 0:
            with torch.no_grad():
                train_acc = accuracy(model, train_eval_loader)
                val_acc = accuracy(model, test_loader)
                if val_acc > best_acc:
                    torch.save({'state_dict': model.state_dict(), 'args': args}, os.path.join(args.save, 'model.pth'))
                    best_acc = val_acc
                if best_acc > 0.85 and train_acc > 0.85:
                    break
                logger.info(
                    "Epoch {:04d} | Time {:.3f} ({:.3f}) | NFE-F {:.1f} | NFE-B {:.1f} | "
                    "Train Acc {:.4f} | Test Acc {:.4f}".format(
                        itr // batches_per_epoch, batch_time_meter.val, batch_time_meter.avg, f_nfe_meter.avg,
                        b_nfe_meter.avg, train_acc, val_acc
                    )
                )
    names = []
    params = []
    for name,param in model.named_parameters():
        names.append(name)
        params.append(param.detach().numpy())
    nn1 = dict({'Wb':params,'names':names})
    for name,param in model.named_buffers():
        names.append(name)
        params.append(param.detach().numpy())
    savemat("odecnn_cifar_tiny.mat",nn1)
Namespace(adjoint=False, batch_size=128, data_aug=False, debug=False, downsampling_method='conv', gpu=0, lr=0.001, nepochs=200, network='odenet', save='../logs/cifartiny', test_batch_size=1000, tol=0.001)
Sequential(
  (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1))
  (1): BatchNorm2d(32, eps=32, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (4): BatchNorm2d(16, eps=16, momentum=0.1, affine=True, track_running_stats=True)
  (5): ReLU(inplace=True)
  (6): Flatten()
  (7): ODEBlock(
    (odefunc): ODEfunc(
      (fc1): Linear(in_features=16, out_features=16, bias=True)
      (fc2): Linear(in_features=16, out_features=16, bias=True)
    )
  )
  (8): Linear(in_features=16, out_features=10, bias=True)
)
Number of parameters: 9914
/home/manzand/Documents/Python/neuralODE_examples/cifar/odenet_cifar_example_tiny.py
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb  4 09:04:31 2021

@author: manzand
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 19 15:10:31 2021

@author: manzand
"""

import os
import argparse
import logging
import time
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms
from scipy.io import savemat

parser = argparse.ArgumentParser()
parser.add_argument('--network', type=str, choices=['resnet', 'odenet'], default='odenet')
parser.add_argument('--tol', type=float, default=1e-3)
parser.add_argument('--adjoint', type=eval, default=False, choices=[True, False])
parser.add_argument('--downsampling-method', type=str, default='conv', choices=['conv', 'res'])
parser.add_argument('--nepochs', type=int, default=200)
parser.add_argument('--data_aug', type=eval, default=False, choices=[True, False])
parser.add_argument('--lr', type=float, default=0.001)
parser.add_argument('--batch_size', type=int, default=128)
parser.add_argument('--test_batch_size', type=int, default=1000)

parser.add_argument('--save', type=str, default='../logs/cifartiny')
parser.add_argument('--debug', action='store_true')
parser.add_argument('--gpu', type=int, default=0)
args = parser.parse_args()

if args.adjoint:
    from torchdiffeq import odeint_adjoint as odeint
else:
    from torchdiffeq import odeint


def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


def norm(dim):
    return nn.BatchNorm2d(min(64, dim), dim)


class ConcatConv2d(nn.Module):

    def __init__(self, dim_in, dim_out, ksize=3, stride=1, padding=0, dilation=1, groups=1, bias=True, transpose=False):
        super(ConcatConv2d, self).__init__()
        module = nn.ConvTranspose2d if transpose else nn.Conv2d
        self._layer = module(
            dim_in + 1, dim_out, kernel_size=ksize, stride=stride, padding=padding, dilation=dilation, groups=groups,
            bias=bias
        )

    def forward(self, t, x):
        tt = torch.ones_like(x[:, :1, :, :]) * t
        ttx = torch.cat([tt, x], 1)
        return self._layer(ttx)


class ODEfunc(nn.Module):

    def __init__(self,dim):
        super(ODEfunc, self).__init__()
        self.fc1 = nn.Linear(dim,16)
        self.fc2 = nn.Linear(16, dim)
        self.nfe = 0

    def forward(self, t, x):
        self.nfe += 1
        # print('11111111111111111111')
        # print(x.size())
        out = self.fc1(x)
        # print('222222222222222222')
        # print(out.size())
        out = self.fc2(out)
        return out


class ODEBlock(nn.Module):

    def __init__(self, odefunc):
        super(ODEBlock, self).__init__()
        self.odefunc = odefunc
        self.integration_time = torch.tensor([0, 1]).float()

    def forward(self, x):
        self.integration_time = self.integration_time.type_as(x)
        out = odeint(self.odefunc, x, self.integration_time, rtol=args.tol, atol=args.tol)
        return out[1]

    @property
    def nfe(self):
        return self.odefunc.nfe

    @nfe.setter
    def nfe(self, value):
        self.odefunc.nfe = value


class Flatten(nn.Module):

    def __init__(self):
        super(Flatten, self).__init__()

    def forward(self, x):
        shape = torch.prod(torch.tensor(x.shape[1:])).item()
        xout = x.view(-1, shape)
        # print(xout.size())
        return xout


class RunningAverageMeter(object):
    """Computes and stores the average and current value"""

    def __init__(self, momentum=0.99):
        self.momentum = momentum
        self.reset()

    def reset(self):
        self.val = None
        self.avg = 0

    def update(self, val):
        if self.val is None:
            self.avg = val
        else:
            self.avg = self.avg * self.momentum + val * (1 - self.momentum)
        self.val = val


def get_cifar_loaders(data_aug=False, batch_size=32, test_batch_size=1000, perc=1.0):
    if data_aug:
        transform_train = transforms.Compose([
            transforms.RandomCrop(28, padding=4),
            transforms.ToTensor(),
        ])
    else:
        transform_train = transforms.Compose([
            transforms.ToTensor(),
        ])

    transform_test = transforms.Compose([
        transforms.ToTensor(),
    ])

    train_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_train), batch_size=batch_size,
        shuffle=True, num_workers=2, drop_last=True
    )

    train_eval_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    test_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=False, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    return train_loader, test_loader, train_eval_loader


def inf_generator(iterable):
    """Allows training with DataLoaders in a single infinite loop:
        for i, (x, y) in enumerate(inf_generator(train_loader)):
    """
    iterator = iterable.__iter__()
    while True:
        try:
            yield iterator.__next__()
        except StopIteration:
            iterator = iterable.__iter__()


def learning_rate_with_decay(batch_size, batch_denom, batches_per_epoch, boundary_epochs, decay_rates):
    initial_learning_rate = args.lr * batch_size / batch_denom

    boundaries = [int(batches_per_epoch * epoch) for epoch in boundary_epochs]
    vals = [initial_learning_rate * decay for decay in decay_rates]

    def learning_rate_fn(itr):
        lt = [itr < b for b in boundaries] + [True]
        i = np.argmax(lt)
        return vals[i]

    return learning_rate_fn


def one_hot(x, K):
    return np.array(x[:, None] == np.arange(K)[None, :], dtype=int)


def accuracy(model, dataset_loader):
    total_correct = 0
    for x, y in dataset_loader:
        x = x.to(device)
        y = one_hot(np.array(y.numpy()), 10)

        target_class = np.argmax(y, axis=1)
        predicted_class = np.argmax(model(x).cpu().detach().numpy(), axis=1)
        total_correct += np.sum(predicted_class == target_class)
    return total_correct / len(dataset_loader.dataset)


def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)


def makedirs(dirname):
    if not os.path.exists(dirname):
        os.makedirs(dirname)


def get_logger(logpath, filepath, package_files=[], displaying=True, saving=True, debug=False):
    logger = logging.getLogger()
    if debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logger.setLevel(level)
    if saving:
        info_file_handler = logging.FileHandler(logpath, mode="a")
        info_file_handler.setLevel(level)
        logger.addHandler(info_file_handler)
    if displaying:
        console_handler = logging.StreamHandler()
        console_handler.setLevel(level)
        logger.addHandler(console_handler)
    logger.info(filepath)
    with open(filepath, "r") as f:
        logger.info(f.read())

    for f in package_files:
        logger.info(f)
        with open(f, "r") as package_f:
            logger.info(package_f.read())

    return logger


if __name__ == '__main__':

    makedirs(args.save)
    logger = get_logger(logpath=os.path.join(args.save, 'logs'), filepath=os.path.abspath(__file__))
    logger.info(args)

    device = torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')

    is_odenet = args.network == 'odenet'

    downsampling_layers = [
        nn.Conv2d(3, 32, 3, 1),
        norm(32),
        nn.ReLU(inplace=True),
        nn.Conv2d(32, 16, 4, 2, 1),
        norm(16),
        nn.ReLU(inplace=True),
        Flatten(),
    ]

    feature_layers = [ODEBlock(ODEfunc(3600))] 
    fc_layers = [nn.Linear(3600, 10)]
    # feature_layers = [ODEBlock(ODEfunc(900))] 
    # fc_layers = [nn.Linear(900, 10)]

    model = nn.Sequential(*downsampling_layers, *feature_layers, *fc_layers).to(device)

    logger.info(model)
    logger.info('Number of parameters: {}'.format(count_parameters(model)))

    criterion = nn.CrossEntropyLoss().to(device)

    train_loader, test_loader, train_eval_loader = get_cifar_loaders(
        args.data_aug, args.batch_size, args.test_batch_size
    )

    data_gen = inf_generator(train_loader)
    batches_per_epoch = len(train_loader)

    lr_fn = learning_rate_with_decay(
        args.batch_size, batch_denom=128, batches_per_epoch=batches_per_epoch, boundary_epochs=[60, 100, 140],
        decay_rates=[1, 0.1, 0.01, 0.001]
    )

    optimizer = torch.optim.SGD(model.parameters(), lr=args.lr, momentum=0.9)

    best_acc = 0
    batch_time_meter = RunningAverageMeter()
    f_nfe_meter = RunningAverageMeter()
    b_nfe_meter = RunningAverageMeter()
    end = time.time()

    for itr in range(args.nepochs * batches_per_epoch):

        for param_group in optimizer.param_groups:
            param_group['lr'] = lr_fn(itr)

        optimizer.zero_grad()
        x, y = data_gen.__next__()
        x = x.to(device)
        y = y.to(device)
        logits = model(x)
        loss = criterion(logits, y)

        if is_odenet:
            nfe_forward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        loss.backward()
        optimizer.step()

        if is_odenet:
            nfe_backward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        batch_time_meter.update(time.time() - end)
        if is_odenet:
            f_nfe_meter.update(nfe_forward)
            b_nfe_meter.update(nfe_backward)
        end = time.time()

        if itr % batches_per_epoch == 0:
            with torch.no_grad():
                train_acc = accuracy(model, train_eval_loader)
                val_acc = accuracy(model, test_loader)
                if val_acc > best_acc:
                    torch.save({'state_dict': model.state_dict(), 'args': args}, os.path.join(args.save, 'model.pth'))
                    best_acc = val_acc
                if best_acc > 0.85 and train_acc > 0.85:
                    break
                logger.info(
                    "Epoch {:04d} | Time {:.3f} ({:.3f}) | NFE-F {:.1f} | NFE-B {:.1f} | "
                    "Train Acc {:.4f} | Test Acc {:.4f}".format(
                        itr // batches_per_epoch, batch_time_meter.val, batch_time_meter.avg, f_nfe_meter.avg,
                        b_nfe_meter.avg, train_acc, val_acc
                    )
                )
    names = []
    params = []
    for name,param in model.named_parameters():
        names.append(name)
        params.append(param.detach().numpy())
    nn1 = dict({'Wb':params,'names':names})
    for name,param in model.named_buffers():
        names.append(name)
        params.append(param.detach().numpy())
    savemat("odecnn_cifar_tiny.mat",nn1)
Namespace(adjoint=False, batch_size=128, data_aug=False, debug=False, downsampling_method='conv', gpu=0, lr=0.001, nepochs=200, network='odenet', save='../logs/cifartiny', test_batch_size=1000, tol=0.001)
Sequential(
  (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1))
  (1): BatchNorm2d(32, eps=32, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (4): BatchNorm2d(16, eps=16, momentum=0.1, affine=True, track_running_stats=True)
  (5): ReLU(inplace=True)
  (6): Flatten()
  (7): ODEBlock(
    (odefunc): ODEfunc(
      (fc1): Linear(in_features=3600, out_features=16, bias=True)
      (fc2): Linear(in_features=16, out_features=3600, bias=True)
    )
  )
  (8): Linear(in_features=3600, out_features=10, bias=True)
)
Number of parameters: 164026
Epoch 0000 | Time 0.993 (0.993) | NFE-F 20.0 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0001 | Time 0.563 (0.599) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0002 | Time 0.705 (0.426) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0003 | Time 0.722 (0.470) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0004 | Time 0.597 (0.456) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1567 | Test Acc 0.1596
Epoch 0005 | Time 0.499 (0.345) | NFE-F 14.8 | NFE-B 0.0 | Train Acc 0.2060 | Test Acc 0.2079
Epoch 0006 | Time 0.560 (0.338) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.2275 | Test Acc 0.2364
Epoch 0007 | Time 0.546 (0.356) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.2915 | Test Acc 0.2950
Epoch 0008 | Time 0.554 (0.352) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.3052 | Test Acc 0.3111
Epoch 0009 | Time 0.521 (0.338) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.3150 | Test Acc 0.3192
Epoch 0010 | Time 0.452 (0.320) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.3233 | Test Acc 0.3234
Epoch 0011 | Time 0.538 (0.355) | NFE-F 14.8 | NFE-B 0.0 | Train Acc 0.3736 | Test Acc 0.3797
Epoch 0012 | Time 0.536 (0.357) | NFE-F 15.9 | NFE-B 0.0 | Train Acc 0.3909 | Test Acc 0.3995
Epoch 0013 | Time 0.591 (0.390) | NFE-F 17.9 | NFE-B 0.0 | Train Acc 0.4110 | Test Acc 0.4128
Epoch 0014 | Time 0.795 (0.407) | NFE-F 22.2 | NFE-B 0.0 | Train Acc 0.4183 | Test Acc 0.4199
Epoch 0015 | Time 0.789 (0.439) | NFE-F 21.0 | NFE-B 0.0 | Train Acc 0.4203 | Test Acc 0.4189
Epoch 0016 | Time 0.713 (0.442) | NFE-F 22.5 | NFE-B 0.0 | Train Acc 0.4454 | Test Acc 0.4438
Epoch 0017 | Time 0.406 (0.314) | NFE-F 22.1 | NFE-B 0.0 | Train Acc 0.4363 | Test Acc 0.4327
Epoch 0018 | Time 0.418 (0.278) | NFE-F 19.4 | NFE-B 0.0 | Train Acc 0.4676 | Test Acc 0.4682
Epoch 0019 | Time 0.526 (0.258) | NFE-F 16.7 | NFE-B 0.0 | Train Acc 0.4750 | Test Acc 0.4661
Epoch 0020 | Time 0.394 (0.245) | NFE-F 15.1 | NFE-B 0.0 | Train Acc 0.4865 | Test Acc 0.4781
Epoch 0021 | Time 0.458 (0.260) | NFE-F 14.6 | NFE-B 0.0 | Train Acc 0.4982 | Test Acc 0.4939
Epoch 0022 | Time 0.405 (0.249) | NFE-F 14.4 | NFE-B 0.0 | Train Acc 0.4909 | Test Acc 0.4810
Epoch 0023 | Time 0.399 (0.239) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.4991 | Test Acc 0.4937
Epoch 0024 | Time 0.426 (0.248) | NFE-F 14.3 | NFE-B 0.0 | Train Acc 0.5016 | Test Acc 0.4881
Epoch 0025 | Time 0.407 (0.249) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5197 | Test Acc 0.5062
Epoch 0026 | Time 0.400 (0.245) | NFE-F 14.9 | NFE-B 0.0 | Train Acc 0.5195 | Test Acc 0.5105
Epoch 0027 | Time 0.395 (0.240) | NFE-F 14.5 | NFE-B 0.0 | Train Acc 0.5178 | Test Acc 0.5043
Epoch 0028 | Time 0.397 (0.239) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5320 | Test Acc 0.5201
Epoch 0029 | Time 0.406 (0.241) | NFE-F 14.5 | NFE-B 0.0 | Train Acc 0.5353 | Test Acc 0.5179
Epoch 0030 | Time 0.393 (0.243) | NFE-F 14.7 | NFE-B 0.0 | Train Acc 0.5473 | Test Acc 0.5317
Epoch 0031 | Time 0.397 (0.243) | NFE-F 14.3 | NFE-B 0.0 | Train Acc 0.5581 | Test Acc 0.5407
Epoch 0032 | Time 0.449 (0.243) | NFE-F 14.4 | NFE-B 0.0 | Train Acc 0.5640 | Test Acc 0.5448
Epoch 0033 | Time 0.422 (0.245) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5560 | Test Acc 0.5365
Epoch 0034 | Time 0.414 (0.265) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5710 | Test Acc 0.5465
Epoch 0035 | Time 0.404 (0.241) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5758 | Test Acc 0.5525
Epoch 0036 | Time 0.452 (0.252) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5884 | Test Acc 0.5690
Epoch 0037 | Time 0.405 (0.242) | NFE-F 14.4 | NFE-B 0.0 | Train Acc 0.5790 | Test Acc 0.5507
Epoch 0038 | Time 0.408 (0.241) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5809 | Test Acc 0.5580
Epoch 0039 | Time 0.424 (0.241) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5911 | Test Acc 0.5594
Epoch 0040 | Time 0.597 (0.244) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.6034 | Test Acc 0.5711
Epoch 0041 | Time 0.432 (0.269) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.6024 | Test Acc 0.5689
Epoch 0042 | Time 0.434 (0.256) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5917 | Test Acc 0.5604
Epoch 0043 | Time 0.441 (0.255) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.5918 | Test Acc 0.5582
Epoch 0044 | Time 0.425 (0.257) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.6103 | Test Acc 0.5741
Epoch 0045 | Time 0.432 (0.255) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.6160 | Test Acc 0.5760
/home/manzand/Documents/Python/neuralODE_examples/cifar/odenet_cifar_example_tiny.py
/home/manzand/Documents/Python/neuralODE_examples/cifar/odenet_cifar_example_tiny.py
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb  4 09:04:31 2021

@author: manzand
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 19 15:10:31 2021

@author: manzand
"""

import os
import argparse
import logging
import time
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms
from scipy.io import savemat

parser = argparse.ArgumentParser()
parser.add_argument('--network', type=str, choices=['resnet', 'odenet'], default='odenet')
parser.add_argument('--tol', type=float, default=1e-3)
parser.add_argument('--adjoint', type=eval, default=False, choices=[True, False])
parser.add_argument('--downsampling-method', type=str, default='conv', choices=['conv', 'res'])
parser.add_argument('--nepochs', type=int, default=200)
parser.add_argument('--data_aug', type=eval, default=False, choices=[True, False])
parser.add_argument('--lr', type=float, default=0.001)
parser.add_argument('--batch_size', type=int, default=128)
parser.add_argument('--test_batch_size', type=int, default=1000)

parser.add_argument('--save', type=str, default='../logs/cifartiny')
parser.add_argument('--debug', action='store_true')
parser.add_argument('--gpu', type=int, default=0)
args = parser.parse_args()

if args.adjoint:
    from torchdiffeq import odeint_adjoint as odeint
else:
    from torchdiffeq import odeint


def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


def norm(dim):
    return nn.BatchNorm2d(min(64, dim), dim)


class ConcatConv2d(nn.Module):

    def __init__(self, dim_in, dim_out, ksize=3, stride=1, padding=0, dilation=1, groups=1, bias=True, transpose=False):
        super(ConcatConv2d, self).__init__()
        module = nn.ConvTranspose2d if transpose else nn.Conv2d
        self._layer = module(
            dim_in + 1, dim_out, kernel_size=ksize, stride=stride, padding=padding, dilation=dilation, groups=groups,
            bias=bias
        )

    def forward(self, t, x):
        tt = torch.ones_like(x[:, :1, :, :]) * t
        ttx = torch.cat([tt, x], 1)
        return self._layer(ttx)


class ODEfunc(nn.Module):

    def __init__(self,dim):
        super(ODEfunc, self).__init__()
        self.fc1 = nn.Linear(dim,16)
        self.fc2 = nn.Linear(16, dim)
        self.nfe = 0

    def forward(self, t, x):
        self.nfe += 1
        # print('11111111111111111111')
        # print(x.size())
        out = self.fc1(x)
        # print('222222222222222222')
        # print(out.size())
        out = self.fc2(out)
        return out


class ODEBlock(nn.Module):

    def __init__(self, odefunc):
        super(ODEBlock, self).__init__()
        self.odefunc = odefunc
        self.integration_time = torch.tensor([0, 1]).float()

    def forward(self, x):
        self.integration_time = self.integration_time.type_as(x)
        out = odeint(self.odefunc, x, self.integration_time, rtol=args.tol, atol=args.tol)
        return out[1]

    @property
    def nfe(self):
        return self.odefunc.nfe

    @nfe.setter
    def nfe(self, value):
        self.odefunc.nfe = value


class Flatten(nn.Module):

    def __init__(self):
        super(Flatten, self).__init__()

    def forward(self, x):
        shape = torch.prod(torch.tensor(x.shape[1:])).item()
        xout = x.view(-1, shape)
        # print(xout.size())
        return xout


class RunningAverageMeter(object):
    """Computes and stores the average and current value"""

    def __init__(self, momentum=0.99):
        self.momentum = momentum
        self.reset()

    def reset(self):
        self.val = None
        self.avg = 0

    def update(self, val):
        if self.val is None:
            self.avg = val
        else:
            self.avg = self.avg * self.momentum + val * (1 - self.momentum)
        self.val = val


def get_cifar_loaders(data_aug=False, batch_size=32, test_batch_size=1000, perc=1.0):
    if data_aug:
        transform_train = transforms.Compose([
            transforms.RandomCrop(28, padding=4),
            transforms.ToTensor(),
        ])
    else:
        transform_train = transforms.Compose([
            transforms.ToTensor(),
        ])

    transform_test = transforms.Compose([
        transforms.ToTensor(),
    ])

    train_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_train), batch_size=batch_size,
        shuffle=True, num_workers=2, drop_last=True
    )

    train_eval_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    test_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=False, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    return train_loader, test_loader, train_eval_loader


def inf_generator(iterable):
    """Allows training with DataLoaders in a single infinite loop:
        for i, (x, y) in enumerate(inf_generator(train_loader)):
    """
    iterator = iterable.__iter__()
    while True:
        try:
            yield iterator.__next__()
        except StopIteration:
            iterator = iterable.__iter__()


def learning_rate_with_decay(batch_size, batch_denom, batches_per_epoch, boundary_epochs, decay_rates):
    initial_learning_rate = args.lr * batch_size / batch_denom

    boundaries = [int(batches_per_epoch * epoch) for epoch in boundary_epochs]
    vals = [initial_learning_rate * decay for decay in decay_rates]

    def learning_rate_fn(itr):
        lt = [itr < b for b in boundaries] + [True]
        i = np.argmax(lt)
        return vals[i]

    return learning_rate_fn


def one_hot(x, K):
    return np.array(x[:, None] == np.arange(K)[None, :], dtype=int)


def accuracy(model, dataset_loader):
    total_correct = 0
    for x, y in dataset_loader:
        x = x.to(device)
        y = one_hot(np.array(y.numpy()), 10)

        target_class = np.argmax(y, axis=1)
        predicted_class = np.argmax(model(x).cpu().detach().numpy(), axis=1)
        total_correct += np.sum(predicted_class == target_class)
    return total_correct / len(dataset_loader.dataset)


def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)


def makedirs(dirname):
    if not os.path.exists(dirname):
        os.makedirs(dirname)


def get_logger(logpath, filepath, package_files=[], displaying=True, saving=True, debug=False):
    logger = logging.getLogger()
    if debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logger.setLevel(level)
    if saving:
        info_file_handler = logging.FileHandler(logpath, mode="a")
        info_file_handler.setLevel(level)
        logger.addHandler(info_file_handler)
    if displaying:
        console_handler = logging.StreamHandler()
        console_handler.setLevel(level)
        logger.addHandler(console_handler)
    logger.info(filepath)
    with open(filepath, "r") as f:
        logger.info(f.read())

    for f in package_files:
        logger.info(f)
        with open(f, "r") as package_f:
            logger.info(package_f.read())

    return logger


if __name__ == '__main__':

    makedirs(args.save)
    logger = get_logger(logpath=os.path.join(args.save, 'logs'), filepath=os.path.abspath(__file__))
    logger.info(args)

    device = torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')

    is_odenet = args.network == 'odenet'

    downsampling_layers = [
        nn.Conv2d(3, 64, 3, 1),
        norm(64),
        nn.ReLU(inplace=True),
        nn.Conv2d(64, 64, 4, 2, 1),
        norm(64),
        nn.ReLU(inplace=True),
        Flatten(),
    ]

    feature_layers = [ODEBlock(ODEfunc(3600))] 
    fc_layers = [nn.Linear(3600, 10)]
    # feature_layers = [ODEBlock(ODEfunc(900))] 
    # fc_layers = [nn.Linear(900, 10)]

    model = nn.Sequential(*downsampling_layers, *feature_layers, *fc_layers).to(device)

    logger.info(model)
    logger.info('Number of parameters: {}'.format(count_parameters(model)))

    criterion = nn.CrossEntropyLoss().to(device)

    train_loader, test_loader, train_eval_loader = get_cifar_loaders(
        args.data_aug, args.batch_size, args.test_batch_size
    )

    data_gen = inf_generator(train_loader)
    batches_per_epoch = len(train_loader)

    lr_fn = learning_rate_with_decay(
        args.batch_size, batch_denom=128, batches_per_epoch=batches_per_epoch, boundary_epochs=[60, 100, 140],
        decay_rates=[1, 0.1, 0.01, 0.001]
    )

    optimizer = torch.optim.SGD(model.parameters(), lr=args.lr, momentum=0.9)

    best_acc = 0
    batch_time_meter = RunningAverageMeter()
    f_nfe_meter = RunningAverageMeter()
    b_nfe_meter = RunningAverageMeter()
    end = time.time()

    for itr in range(args.nepochs * batches_per_epoch):

        for param_group in optimizer.param_groups:
            param_group['lr'] = lr_fn(itr)

        optimizer.zero_grad()
        x, y = data_gen.__next__()
        x = x.to(device)
        y = y.to(device)
        logits = model(x)
        loss = criterion(logits, y)

        if is_odenet:
            nfe_forward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        loss.backward()
        optimizer.step()

        if is_odenet:
            nfe_backward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        batch_time_meter.update(time.time() - end)
        if is_odenet:
            f_nfe_meter.update(nfe_forward)
            b_nfe_meter.update(nfe_backward)
        end = time.time()

        if itr % batches_per_epoch == 0:
            with torch.no_grad():
                train_acc = accuracy(model, train_eval_loader)
                val_acc = accuracy(model, test_loader)
                if val_acc > best_acc:
                    torch.save({'state_dict': model.state_dict(), 'args': args}, os.path.join(args.save, 'model.pth'))
                    best_acc = val_acc
                if best_acc > 0.85 and train_acc > 0.85:
                    break
                logger.info(
                    "Epoch {:04d} | Time {:.3f} ({:.3f}) | NFE-F {:.1f} | NFE-B {:.1f} | "
                    "Train Acc {:.4f} | Test Acc {:.4f}".format(
                        itr // batches_per_epoch, batch_time_meter.val, batch_time_meter.avg, f_nfe_meter.avg,
                        b_nfe_meter.avg, train_acc, val_acc
                    )
                )
    names = []
    params = []
    for name,param in model.named_parameters():
        names.append(name)
        params.append(param.detach().numpy())
    nn1 = dict({'Wb':params,'names':names})
    for name,param in model.named_buffers():
        names.append(name)
        params.append(param.detach().numpy())
    savemat("odecnn_cifar_tiny.mat",nn1)
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb  4 09:04:31 2021

@author: manzand
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 19 15:10:31 2021

@author: manzand
"""

import os
import argparse
import logging
import time
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms
from scipy.io import savemat

parser = argparse.ArgumentParser()
parser.add_argument('--network', type=str, choices=['resnet', 'odenet'], default='odenet')
parser.add_argument('--tol', type=float, default=1e-3)
parser.add_argument('--adjoint', type=eval, default=False, choices=[True, False])
parser.add_argument('--downsampling-method', type=str, default='conv', choices=['conv', 'res'])
parser.add_argument('--nepochs', type=int, default=200)
parser.add_argument('--data_aug', type=eval, default=False, choices=[True, False])
parser.add_argument('--lr', type=float, default=0.001)
parser.add_argument('--batch_size', type=int, default=128)
parser.add_argument('--test_batch_size', type=int, default=1000)

parser.add_argument('--save', type=str, default='../logs/cifartiny')
parser.add_argument('--debug', action='store_true')
parser.add_argument('--gpu', type=int, default=0)
args = parser.parse_args()

if args.adjoint:
    from torchdiffeq import odeint_adjoint as odeint
else:
    from torchdiffeq import odeint


def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


def norm(dim):
    return nn.BatchNorm2d(min(64, dim), dim)


class ConcatConv2d(nn.Module):

    def __init__(self, dim_in, dim_out, ksize=3, stride=1, padding=0, dilation=1, groups=1, bias=True, transpose=False):
        super(ConcatConv2d, self).__init__()
        module = nn.ConvTranspose2d if transpose else nn.Conv2d
        self._layer = module(
            dim_in + 1, dim_out, kernel_size=ksize, stride=stride, padding=padding, dilation=dilation, groups=groups,
            bias=bias
        )

    def forward(self, t, x):
        tt = torch.ones_like(x[:, :1, :, :]) * t
        ttx = torch.cat([tt, x], 1)
        return self._layer(ttx)


class ODEfunc(nn.Module):

    def __init__(self,dim):
        super(ODEfunc, self).__init__()
        self.fc1 = nn.Linear(dim,16)
        self.fc2 = nn.Linear(16, dim)
        self.nfe = 0

    def forward(self, t, x):
        self.nfe += 1
        # print('11111111111111111111')
        # print(x.size())
        out = self.fc1(x)
        # print('222222222222222222')
        # print(out.size())
        out = self.fc2(out)
        return out


class ODEBlock(nn.Module):

    def __init__(self, odefunc):
        super(ODEBlock, self).__init__()
        self.odefunc = odefunc
        self.integration_time = torch.tensor([0, 1]).float()

    def forward(self, x):
        self.integration_time = self.integration_time.type_as(x)
        out = odeint(self.odefunc, x, self.integration_time, rtol=args.tol, atol=args.tol)
        return out[1]

    @property
    def nfe(self):
        return self.odefunc.nfe

    @nfe.setter
    def nfe(self, value):
        self.odefunc.nfe = value


class Flatten(nn.Module):

    def __init__(self):
        super(Flatten, self).__init__()

    def forward(self, x):
        shape = torch.prod(torch.tensor(x.shape[1:])).item()
        xout = x.view(-1, shape)
        # print(xout.size())
        return xout


class RunningAverageMeter(object):
    """Computes and stores the average and current value"""

    def __init__(self, momentum=0.99):
        self.momentum = momentum
        self.reset()

    def reset(self):
        self.val = None
        self.avg = 0

    def update(self, val):
        if self.val is None:
            self.avg = val
        else:
            self.avg = self.avg * self.momentum + val * (1 - self.momentum)
        self.val = val


def get_cifar_loaders(data_aug=False, batch_size=32, test_batch_size=1000, perc=1.0):
    if data_aug:
        transform_train = transforms.Compose([
            transforms.RandomCrop(28, padding=4),
            transforms.ToTensor(),
        ])
    else:
        transform_train = transforms.Compose([
            transforms.ToTensor(),
        ])

    transform_test = transforms.Compose([
        transforms.ToTensor(),
    ])

    train_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_train), batch_size=batch_size,
        shuffle=True, num_workers=2, drop_last=True
    )

    train_eval_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    test_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=False, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    return train_loader, test_loader, train_eval_loader


def inf_generator(iterable):
    """Allows training with DataLoaders in a single infinite loop:
        for i, (x, y) in enumerate(inf_generator(train_loader)):
    """
    iterator = iterable.__iter__()
    while True:
        try:
            yield iterator.__next__()
        except StopIteration:
            iterator = iterable.__iter__()


def learning_rate_with_decay(batch_size, batch_denom, batches_per_epoch, boundary_epochs, decay_rates):
    initial_learning_rate = args.lr * batch_size / batch_denom

    boundaries = [int(batches_per_epoch * epoch) for epoch in boundary_epochs]
    vals = [initial_learning_rate * decay for decay in decay_rates]

    def learning_rate_fn(itr):
        lt = [itr < b for b in boundaries] + [True]
        i = np.argmax(lt)
        return vals[i]

    return learning_rate_fn


def one_hot(x, K):
    return np.array(x[:, None] == np.arange(K)[None, :], dtype=int)


def accuracy(model, dataset_loader):
    total_correct = 0
    for x, y in dataset_loader:
        x = x.to(device)
        y = one_hot(np.array(y.numpy()), 10)

        target_class = np.argmax(y, axis=1)
        predicted_class = np.argmax(model(x).cpu().detach().numpy(), axis=1)
        total_correct += np.sum(predicted_class == target_class)
    return total_correct / len(dataset_loader.dataset)


def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)


def makedirs(dirname):
    if not os.path.exists(dirname):
        os.makedirs(dirname)


def get_logger(logpath, filepath, package_files=[], displaying=True, saving=True, debug=False):
    logger = logging.getLogger()
    if debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logger.setLevel(level)
    if saving:
        info_file_handler = logging.FileHandler(logpath, mode="a")
        info_file_handler.setLevel(level)
        logger.addHandler(info_file_handler)
    if displaying:
        console_handler = logging.StreamHandler()
        console_handler.setLevel(level)
        logger.addHandler(console_handler)
    logger.info(filepath)
    with open(filepath, "r") as f:
        logger.info(f.read())

    for f in package_files:
        logger.info(f)
        with open(f, "r") as package_f:
            logger.info(package_f.read())

    return logger


if __name__ == '__main__':

    makedirs(args.save)
    logger = get_logger(logpath=os.path.join(args.save, 'logs'), filepath=os.path.abspath(__file__))
    logger.info(args)

    device = torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')

    is_odenet = args.network == 'odenet'

    downsampling_layers = [
        nn.Conv2d(3, 64, 3, 1),
        norm(64),
        nn.ReLU(inplace=True),
        nn.Conv2d(64, 64, 4, 2, 1),
        norm(64),
        nn.ReLU(inplace=True),
        Flatten(),
    ]

    feature_layers = [ODEBlock(ODEfunc(3600))] 
    fc_layers = [nn.Linear(3600, 10)]
    # feature_layers = [ODEBlock(ODEfunc(900))] 
    # fc_layers = [nn.Linear(900, 10)]

    model = nn.Sequential(*downsampling_layers, *feature_layers, *fc_layers).to(device)

    logger.info(model)
    logger.info('Number of parameters: {}'.format(count_parameters(model)))

    criterion = nn.CrossEntropyLoss().to(device)

    train_loader, test_loader, train_eval_loader = get_cifar_loaders(
        args.data_aug, args.batch_size, args.test_batch_size
    )

    data_gen = inf_generator(train_loader)
    batches_per_epoch = len(train_loader)

    lr_fn = learning_rate_with_decay(
        args.batch_size, batch_denom=128, batches_per_epoch=batches_per_epoch, boundary_epochs=[60, 100, 140],
        decay_rates=[1, 0.1, 0.01, 0.001]
    )

    optimizer = torch.optim.SGD(model.parameters(), lr=args.lr, momentum=0.9)

    best_acc = 0
    batch_time_meter = RunningAverageMeter()
    f_nfe_meter = RunningAverageMeter()
    b_nfe_meter = RunningAverageMeter()
    end = time.time()

    for itr in range(args.nepochs * batches_per_epoch):

        for param_group in optimizer.param_groups:
            param_group['lr'] = lr_fn(itr)

        optimizer.zero_grad()
        x, y = data_gen.__next__()
        x = x.to(device)
        y = y.to(device)
        logits = model(x)
        loss = criterion(logits, y)

        if is_odenet:
            nfe_forward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        loss.backward()
        optimizer.step()

        if is_odenet:
            nfe_backward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        batch_time_meter.update(time.time() - end)
        if is_odenet:
            f_nfe_meter.update(nfe_forward)
            b_nfe_meter.update(nfe_backward)
        end = time.time()

        if itr % batches_per_epoch == 0:
            with torch.no_grad():
                train_acc = accuracy(model, train_eval_loader)
                val_acc = accuracy(model, test_loader)
                if val_acc > best_acc:
                    torch.save({'state_dict': model.state_dict(), 'args': args}, os.path.join(args.save, 'model.pth'))
                    best_acc = val_acc
                if best_acc > 0.85 and train_acc > 0.85:
                    break
                logger.info(
                    "Epoch {:04d} | Time {:.3f} ({:.3f}) | NFE-F {:.1f} | NFE-B {:.1f} | "
                    "Train Acc {:.4f} | Test Acc {:.4f}".format(
                        itr // batches_per_epoch, batch_time_meter.val, batch_time_meter.avg, f_nfe_meter.avg,
                        b_nfe_meter.avg, train_acc, val_acc
                    )
                )
    names = []
    params = []
    for name,param in model.named_parameters():
        names.append(name)
        params.append(param.detach().numpy())
    nn1 = dict({'Wb':params,'names':names})
    for name,param in model.named_buffers():
        names.append(name)
        params.append(param.detach().numpy())
    savemat("odecnn_cifar_tiny.mat",nn1)
Namespace(adjoint=False, batch_size=128, data_aug=False, debug=False, downsampling_method='conv', gpu=0, lr=0.001, nepochs=200, network='odenet', save='../logs/cifartiny', test_batch_size=1000, tol=0.001)
Namespace(adjoint=False, batch_size=128, data_aug=False, debug=False, downsampling_method='conv', gpu=0, lr=0.001, nepochs=200, network='odenet', save='../logs/cifartiny', test_batch_size=1000, tol=0.001)
Sequential(
  (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1))
  (1): BatchNorm2d(64, eps=64, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (4): BatchNorm2d(64, eps=64, momentum=0.1, affine=True, track_running_stats=True)
  (5): ReLU(inplace=True)
  (6): Flatten()
  (7): ODEBlock(
    (odefunc): ODEfunc(
      (fc1): Linear(in_features=3600, out_features=16, bias=True)
      (fc2): Linear(in_features=16, out_features=3600, bias=True)
    )
  )
  (8): Linear(in_features=3600, out_features=10, bias=True)
)
Sequential(
  (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1))
  (1): BatchNorm2d(64, eps=64, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (4): BatchNorm2d(64, eps=64, momentum=0.1, affine=True, track_running_stats=True)
  (5): ReLU(inplace=True)
  (6): Flatten()
  (7): ODEBlock(
    (odefunc): ODEfunc(
      (fc1): Linear(in_features=3600, out_features=16, bias=True)
      (fc2): Linear(in_features=16, out_features=3600, bias=True)
    )
  )
  (8): Linear(in_features=3600, out_features=10, bias=True)
)
Number of parameters: 222474
Number of parameters: 222474
/home/manzand/Documents/Python/neuralODE_examples/cifar/odenet_cifar_example_tiny.py
/home/manzand/Documents/Python/neuralODE_examples/cifar/odenet_cifar_example_tiny.py
/home/manzand/Documents/Python/neuralODE_examples/cifar/odenet_cifar_example_tiny.py
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb  4 09:04:31 2021

@author: manzand
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 19 15:10:31 2021

@author: manzand
"""

import os
import argparse
import logging
import time
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms
from scipy.io import savemat

parser = argparse.ArgumentParser()
parser.add_argument('--network', type=str, choices=['resnet', 'odenet'], default='odenet')
parser.add_argument('--tol', type=float, default=1e-3)
parser.add_argument('--adjoint', type=eval, default=False, choices=[True, False])
parser.add_argument('--downsampling-method', type=str, default='conv', choices=['conv', 'res'])
parser.add_argument('--nepochs', type=int, default=200)
parser.add_argument('--data_aug', type=eval, default=False, choices=[True, False])
parser.add_argument('--lr', type=float, default=0.001)
parser.add_argument('--batch_size', type=int, default=128)
parser.add_argument('--test_batch_size', type=int, default=1000)

parser.add_argument('--save', type=str, default='../logs/cifartiny')
parser.add_argument('--debug', action='store_true')
parser.add_argument('--gpu', type=int, default=0)
args = parser.parse_args()

if args.adjoint:
    from torchdiffeq import odeint_adjoint as odeint
else:
    from torchdiffeq import odeint


def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


def norm(dim):
    return nn.BatchNorm2d(min(64, dim), dim)


class ConcatConv2d(nn.Module):

    def __init__(self, dim_in, dim_out, ksize=3, stride=1, padding=0, dilation=1, groups=1, bias=True, transpose=False):
        super(ConcatConv2d, self).__init__()
        module = nn.ConvTranspose2d if transpose else nn.Conv2d
        self._layer = module(
            dim_in + 1, dim_out, kernel_size=ksize, stride=stride, padding=padding, dilation=dilation, groups=groups,
            bias=bias
        )

    def forward(self, t, x):
        tt = torch.ones_like(x[:, :1, :, :]) * t
        ttx = torch.cat([tt, x], 1)
        return self._layer(ttx)


class ODEfunc(nn.Module):

    def __init__(self,dim):
        super(ODEfunc, self).__init__()
        self.fc1 = nn.Linear(dim,16)
        self.fc2 = nn.Linear(16, dim)
        self.nfe = 0

    def forward(self, t, x):
        self.nfe += 1
        # print('11111111111111111111')
        # print(x.size())
        out = self.fc1(x)
        # print('222222222222222222')
        # print(out.size())
        out = self.fc2(out)
        return out


class ODEBlock(nn.Module):

    def __init__(self, odefunc):
        super(ODEBlock, self).__init__()
        self.odefunc = odefunc
        self.integration_time = torch.tensor([0, 1]).float()

    def forward(self, x):
        self.integration_time = self.integration_time.type_as(x)
        out = odeint(self.odefunc, x, self.integration_time, rtol=args.tol, atol=args.tol)
        return out[1]

    @property
    def nfe(self):
        return self.odefunc.nfe

    @nfe.setter
    def nfe(self, value):
        self.odefunc.nfe = value


class Flatten(nn.Module):

    def __init__(self):
        super(Flatten, self).__init__()

    def forward(self, x):
        shape = torch.prod(torch.tensor(x.shape[1:])).item()
        xout = x.view(-1, shape)
        # print(xout.size())
        return xout


class RunningAverageMeter(object):
    """Computes and stores the average and current value"""

    def __init__(self, momentum=0.99):
        self.momentum = momentum
        self.reset()

    def reset(self):
        self.val = None
        self.avg = 0

    def update(self, val):
        if self.val is None:
            self.avg = val
        else:
            self.avg = self.avg * self.momentum + val * (1 - self.momentum)
        self.val = val


def get_cifar_loaders(data_aug=False, batch_size=32, test_batch_size=1000, perc=1.0):
    if data_aug:
        transform_train = transforms.Compose([
            transforms.RandomCrop(28, padding=4),
            transforms.ToTensor(),
        ])
    else:
        transform_train = transforms.Compose([
            transforms.ToTensor(),
        ])

    transform_test = transforms.Compose([
        transforms.ToTensor(),
    ])

    train_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_train), batch_size=batch_size,
        shuffle=True, num_workers=2, drop_last=True
    )

    train_eval_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    test_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=False, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    return train_loader, test_loader, train_eval_loader


def inf_generator(iterable):
    """Allows training with DataLoaders in a single infinite loop:
        for i, (x, y) in enumerate(inf_generator(train_loader)):
    """
    iterator = iterable.__iter__()
    while True:
        try:
            yield iterator.__next__()
        except StopIteration:
            iterator = iterable.__iter__()


def learning_rate_with_decay(batch_size, batch_denom, batches_per_epoch, boundary_epochs, decay_rates):
    initial_learning_rate = args.lr * batch_size / batch_denom

    boundaries = [int(batches_per_epoch * epoch) for epoch in boundary_epochs]
    vals = [initial_learning_rate * decay for decay in decay_rates]

    def learning_rate_fn(itr):
        lt = [itr < b for b in boundaries] + [True]
        i = np.argmax(lt)
        return vals[i]

    return learning_rate_fn


def one_hot(x, K):
    return np.array(x[:, None] == np.arange(K)[None, :], dtype=int)


def accuracy(model, dataset_loader):
    total_correct = 0
    for x, y in dataset_loader:
        x = x.to(device)
        y = one_hot(np.array(y.numpy()), 10)

        target_class = np.argmax(y, axis=1)
        predicted_class = np.argmax(model(x).cpu().detach().numpy(), axis=1)
        total_correct += np.sum(predicted_class == target_class)
    return total_correct / len(dataset_loader.dataset)


def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)


def makedirs(dirname):
    if not os.path.exists(dirname):
        os.makedirs(dirname)


def get_logger(logpath, filepath, package_files=[], displaying=True, saving=True, debug=False):
    logger = logging.getLogger()
    if debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logger.setLevel(level)
    if saving:
        info_file_handler = logging.FileHandler(logpath, mode="a")
        info_file_handler.setLevel(level)
        logger.addHandler(info_file_handler)
    if displaying:
        console_handler = logging.StreamHandler()
        console_handler.setLevel(level)
        logger.addHandler(console_handler)
    logger.info(filepath)
    with open(filepath, "r") as f:
        logger.info(f.read())

    for f in package_files:
        logger.info(f)
        with open(f, "r") as package_f:
            logger.info(package_f.read())

    return logger


if __name__ == '__main__':

    makedirs(args.save)
    logger = get_logger(logpath=os.path.join(args.save, 'logs'), filepath=os.path.abspath(__file__))
    logger.info(args)

    device = torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')

    is_odenet = args.network == 'odenet'

    downsampling_layers = [
        nn.Conv2d(3, 64, 3, 1),
        norm(64),
        nn.ReLU(inplace=True),
        nn.Conv2d(64, 64, 4, 2, 1),
        norm(64),
        nn.ReLU(inplace=True),
        Flatten(),
    ]

    feature_layers = [ODEBlock(ODEfunc(14400))] 
    fc_layers = [nn.Linear(14400, 10)]
    # feature_layers = [ODEBlock(ODEfunc(900))] 
    # fc_layers = [nn.Linear(900, 10)]

    model = nn.Sequential(*downsampling_layers, *feature_layers, *fc_layers).to(device)

    logger.info(model)
    logger.info('Number of parameters: {}'.format(count_parameters(model)))

    criterion = nn.CrossEntropyLoss().to(device)

    train_loader, test_loader, train_eval_loader = get_cifar_loaders(
        args.data_aug, args.batch_size, args.test_batch_size
    )

    data_gen = inf_generator(train_loader)
    batches_per_epoch = len(train_loader)

    lr_fn = learning_rate_with_decay(
        args.batch_size, batch_denom=128, batches_per_epoch=batches_per_epoch, boundary_epochs=[60, 100, 140],
        decay_rates=[1, 0.1, 0.01, 0.001]
    )

    optimizer = torch.optim.SGD(model.parameters(), lr=args.lr, momentum=0.9)

    best_acc = 0
    batch_time_meter = RunningAverageMeter()
    f_nfe_meter = RunningAverageMeter()
    b_nfe_meter = RunningAverageMeter()
    end = time.time()

    for itr in range(args.nepochs * batches_per_epoch):

        for param_group in optimizer.param_groups:
            param_group['lr'] = lr_fn(itr)

        optimizer.zero_grad()
        x, y = data_gen.__next__()
        x = x.to(device)
        y = y.to(device)
        logits = model(x)
        loss = criterion(logits, y)

        if is_odenet:
            nfe_forward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        loss.backward()
        optimizer.step()

        if is_odenet:
            nfe_backward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        batch_time_meter.update(time.time() - end)
        if is_odenet:
            f_nfe_meter.update(nfe_forward)
            b_nfe_meter.update(nfe_backward)
        end = time.time()

        if itr % batches_per_epoch == 0:
            with torch.no_grad():
                train_acc = accuracy(model, train_eval_loader)
                val_acc = accuracy(model, test_loader)
                if val_acc > best_acc:
                    torch.save({'state_dict': model.state_dict(), 'args': args}, os.path.join(args.save, 'model.pth'))
                    best_acc = val_acc
                if best_acc > 0.85 and train_acc > 0.85:
                    break
                logger.info(
                    "Epoch {:04d} | Time {:.3f} ({:.3f}) | NFE-F {:.1f} | NFE-B {:.1f} | "
                    "Train Acc {:.4f} | Test Acc {:.4f}".format(
                        itr // batches_per_epoch, batch_time_meter.val, batch_time_meter.avg, f_nfe_meter.avg,
                        b_nfe_meter.avg, train_acc, val_acc
                    )
                )
    names = []
    params = []
    for name,param in model.named_parameters():
        names.append(name)
        params.append(param.detach().numpy())
    nn1 = dict({'Wb':params,'names':names})
    for name,param in model.named_buffers():
        names.append(name)
        params.append(param.detach().numpy())
    savemat("odecnn_cifar_tiny.mat",nn1)
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb  4 09:04:31 2021

@author: manzand
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 19 15:10:31 2021

@author: manzand
"""

import os
import argparse
import logging
import time
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms
from scipy.io import savemat

parser = argparse.ArgumentParser()
parser.add_argument('--network', type=str, choices=['resnet', 'odenet'], default='odenet')
parser.add_argument('--tol', type=float, default=1e-3)
parser.add_argument('--adjoint', type=eval, default=False, choices=[True, False])
parser.add_argument('--downsampling-method', type=str, default='conv', choices=['conv', 'res'])
parser.add_argument('--nepochs', type=int, default=200)
parser.add_argument('--data_aug', type=eval, default=False, choices=[True, False])
parser.add_argument('--lr', type=float, default=0.001)
parser.add_argument('--batch_size', type=int, default=128)
parser.add_argument('--test_batch_size', type=int, default=1000)

parser.add_argument('--save', type=str, default='../logs/cifartiny')
parser.add_argument('--debug', action='store_true')
parser.add_argument('--gpu', type=int, default=0)
args = parser.parse_args()

if args.adjoint:
    from torchdiffeq import odeint_adjoint as odeint
else:
    from torchdiffeq import odeint


def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


def norm(dim):
    return nn.BatchNorm2d(min(64, dim), dim)


class ConcatConv2d(nn.Module):

    def __init__(self, dim_in, dim_out, ksize=3, stride=1, padding=0, dilation=1, groups=1, bias=True, transpose=False):
        super(ConcatConv2d, self).__init__()
        module = nn.ConvTranspose2d if transpose else nn.Conv2d
        self._layer = module(
            dim_in + 1, dim_out, kernel_size=ksize, stride=stride, padding=padding, dilation=dilation, groups=groups,
            bias=bias
        )

    def forward(self, t, x):
        tt = torch.ones_like(x[:, :1, :, :]) * t
        ttx = torch.cat([tt, x], 1)
        return self._layer(ttx)


class ODEfunc(nn.Module):

    def __init__(self,dim):
        super(ODEfunc, self).__init__()
        self.fc1 = nn.Linear(dim,16)
        self.fc2 = nn.Linear(16, dim)
        self.nfe = 0

    def forward(self, t, x):
        self.nfe += 1
        # print('11111111111111111111')
        # print(x.size())
        out = self.fc1(x)
        # print('222222222222222222')
        # print(out.size())
        out = self.fc2(out)
        return out


class ODEBlock(nn.Module):

    def __init__(self, odefunc):
        super(ODEBlock, self).__init__()
        self.odefunc = odefunc
        self.integration_time = torch.tensor([0, 1]).float()

    def forward(self, x):
        self.integration_time = self.integration_time.type_as(x)
        out = odeint(self.odefunc, x, self.integration_time, rtol=args.tol, atol=args.tol)
        return out[1]

    @property
    def nfe(self):
        return self.odefunc.nfe

    @nfe.setter
    def nfe(self, value):
        self.odefunc.nfe = value


class Flatten(nn.Module):

    def __init__(self):
        super(Flatten, self).__init__()

    def forward(self, x):
        shape = torch.prod(torch.tensor(x.shape[1:])).item()
        xout = x.view(-1, shape)
        # print(xout.size())
        return xout


class RunningAverageMeter(object):
    """Computes and stores the average and current value"""

    def __init__(self, momentum=0.99):
        self.momentum = momentum
        self.reset()

    def reset(self):
        self.val = None
        self.avg = 0

    def update(self, val):
        if self.val is None:
            self.avg = val
        else:
            self.avg = self.avg * self.momentum + val * (1 - self.momentum)
        self.val = val


def get_cifar_loaders(data_aug=False, batch_size=32, test_batch_size=1000, perc=1.0):
    if data_aug:
        transform_train = transforms.Compose([
            transforms.RandomCrop(28, padding=4),
            transforms.ToTensor(),
        ])
    else:
        transform_train = transforms.Compose([
            transforms.ToTensor(),
        ])

    transform_test = transforms.Compose([
        transforms.ToTensor(),
    ])

    train_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_train), batch_size=batch_size,
        shuffle=True, num_workers=2, drop_last=True
    )

    train_eval_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    test_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=False, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    return train_loader, test_loader, train_eval_loader


def inf_generator(iterable):
    """Allows training with DataLoaders in a single infinite loop:
        for i, (x, y) in enumerate(inf_generator(train_loader)):
    """
    iterator = iterable.__iter__()
    while True:
        try:
            yield iterator.__next__()
        except StopIteration:
            iterator = iterable.__iter__()


def learning_rate_with_decay(batch_size, batch_denom, batches_per_epoch, boundary_epochs, decay_rates):
    initial_learning_rate = args.lr * batch_size / batch_denom

    boundaries = [int(batches_per_epoch * epoch) for epoch in boundary_epochs]
    vals = [initial_learning_rate * decay for decay in decay_rates]

    def learning_rate_fn(itr):
        lt = [itr < b for b in boundaries] + [True]
        i = np.argmax(lt)
        return vals[i]

    return learning_rate_fn


def one_hot(x, K):
    return np.array(x[:, None] == np.arange(K)[None, :], dtype=int)


def accuracy(model, dataset_loader):
    total_correct = 0
    for x, y in dataset_loader:
        x = x.to(device)
        y = one_hot(np.array(y.numpy()), 10)

        target_class = np.argmax(y, axis=1)
        predicted_class = np.argmax(model(x).cpu().detach().numpy(), axis=1)
        total_correct += np.sum(predicted_class == target_class)
    return total_correct / len(dataset_loader.dataset)


def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)


def makedirs(dirname):
    if not os.path.exists(dirname):
        os.makedirs(dirname)


def get_logger(logpath, filepath, package_files=[], displaying=True, saving=True, debug=False):
    logger = logging.getLogger()
    if debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logger.setLevel(level)
    if saving:
        info_file_handler = logging.FileHandler(logpath, mode="a")
        info_file_handler.setLevel(level)
        logger.addHandler(info_file_handler)
    if displaying:
        console_handler = logging.StreamHandler()
        console_handler.setLevel(level)
        logger.addHandler(console_handler)
    logger.info(filepath)
    with open(filepath, "r") as f:
        logger.info(f.read())

    for f in package_files:
        logger.info(f)
        with open(f, "r") as package_f:
            logger.info(package_f.read())

    return logger


if __name__ == '__main__':

    makedirs(args.save)
    logger = get_logger(logpath=os.path.join(args.save, 'logs'), filepath=os.path.abspath(__file__))
    logger.info(args)

    device = torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')

    is_odenet = args.network == 'odenet'

    downsampling_layers = [
        nn.Conv2d(3, 64, 3, 1),
        norm(64),
        nn.ReLU(inplace=True),
        nn.Conv2d(64, 64, 4, 2, 1),
        norm(64),
        nn.ReLU(inplace=True),
        Flatten(),
    ]

    feature_layers = [ODEBlock(ODEfunc(14400))] 
    fc_layers = [nn.Linear(14400, 10)]
    # feature_layers = [ODEBlock(ODEfunc(900))] 
    # fc_layers = [nn.Linear(900, 10)]

    model = nn.Sequential(*downsampling_layers, *feature_layers, *fc_layers).to(device)

    logger.info(model)
    logger.info('Number of parameters: {}'.format(count_parameters(model)))

    criterion = nn.CrossEntropyLoss().to(device)

    train_loader, test_loader, train_eval_loader = get_cifar_loaders(
        args.data_aug, args.batch_size, args.test_batch_size
    )

    data_gen = inf_generator(train_loader)
    batches_per_epoch = len(train_loader)

    lr_fn = learning_rate_with_decay(
        args.batch_size, batch_denom=128, batches_per_epoch=batches_per_epoch, boundary_epochs=[60, 100, 140],
        decay_rates=[1, 0.1, 0.01, 0.001]
    )

    optimizer = torch.optim.SGD(model.parameters(), lr=args.lr, momentum=0.9)

    best_acc = 0
    batch_time_meter = RunningAverageMeter()
    f_nfe_meter = RunningAverageMeter()
    b_nfe_meter = RunningAverageMeter()
    end = time.time()

    for itr in range(args.nepochs * batches_per_epoch):

        for param_group in optimizer.param_groups:
            param_group['lr'] = lr_fn(itr)

        optimizer.zero_grad()
        x, y = data_gen.__next__()
        x = x.to(device)
        y = y.to(device)
        logits = model(x)
        loss = criterion(logits, y)

        if is_odenet:
            nfe_forward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        loss.backward()
        optimizer.step()

        if is_odenet:
            nfe_backward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        batch_time_meter.update(time.time() - end)
        if is_odenet:
            f_nfe_meter.update(nfe_forward)
            b_nfe_meter.update(nfe_backward)
        end = time.time()

        if itr % batches_per_epoch == 0:
            with torch.no_grad():
                train_acc = accuracy(model, train_eval_loader)
                val_acc = accuracy(model, test_loader)
                if val_acc > best_acc:
                    torch.save({'state_dict': model.state_dict(), 'args': args}, os.path.join(args.save, 'model.pth'))
                    best_acc = val_acc
                if best_acc > 0.85 and train_acc > 0.85:
                    break
                logger.info(
                    "Epoch {:04d} | Time {:.3f} ({:.3f}) | NFE-F {:.1f} | NFE-B {:.1f} | "
                    "Train Acc {:.4f} | Test Acc {:.4f}".format(
                        itr // batches_per_epoch, batch_time_meter.val, batch_time_meter.avg, f_nfe_meter.avg,
                        b_nfe_meter.avg, train_acc, val_acc
                    )
                )
    names = []
    params = []
    for name,param in model.named_parameters():
        names.append(name)
        params.append(param.detach().numpy())
    nn1 = dict({'Wb':params,'names':names})
    for name,param in model.named_buffers():
        names.append(name)
        params.append(param.detach().numpy())
    savemat("odecnn_cifar_tiny.mat",nn1)
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb  4 09:04:31 2021

@author: manzand
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 19 15:10:31 2021

@author: manzand
"""

import os
import argparse
import logging
import time
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms
from scipy.io import savemat

parser = argparse.ArgumentParser()
parser.add_argument('--network', type=str, choices=['resnet', 'odenet'], default='odenet')
parser.add_argument('--tol', type=float, default=1e-3)
parser.add_argument('--adjoint', type=eval, default=False, choices=[True, False])
parser.add_argument('--downsampling-method', type=str, default='conv', choices=['conv', 'res'])
parser.add_argument('--nepochs', type=int, default=200)
parser.add_argument('--data_aug', type=eval, default=False, choices=[True, False])
parser.add_argument('--lr', type=float, default=0.001)
parser.add_argument('--batch_size', type=int, default=128)
parser.add_argument('--test_batch_size', type=int, default=1000)

parser.add_argument('--save', type=str, default='../logs/cifartiny')
parser.add_argument('--debug', action='store_true')
parser.add_argument('--gpu', type=int, default=0)
args = parser.parse_args()

if args.adjoint:
    from torchdiffeq import odeint_adjoint as odeint
else:
    from torchdiffeq import odeint


def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


def norm(dim):
    return nn.BatchNorm2d(min(64, dim), dim)


class ConcatConv2d(nn.Module):

    def __init__(self, dim_in, dim_out, ksize=3, stride=1, padding=0, dilation=1, groups=1, bias=True, transpose=False):
        super(ConcatConv2d, self).__init__()
        module = nn.ConvTranspose2d if transpose else nn.Conv2d
        self._layer = module(
            dim_in + 1, dim_out, kernel_size=ksize, stride=stride, padding=padding, dilation=dilation, groups=groups,
            bias=bias
        )

    def forward(self, t, x):
        tt = torch.ones_like(x[:, :1, :, :]) * t
        ttx = torch.cat([tt, x], 1)
        return self._layer(ttx)


class ODEfunc(nn.Module):

    def __init__(self,dim):
        super(ODEfunc, self).__init__()
        self.fc1 = nn.Linear(dim,16)
        self.fc2 = nn.Linear(16, dim)
        self.nfe = 0

    def forward(self, t, x):
        self.nfe += 1
        # print('11111111111111111111')
        # print(x.size())
        out = self.fc1(x)
        # print('222222222222222222')
        # print(out.size())
        out = self.fc2(out)
        return out


class ODEBlock(nn.Module):

    def __init__(self, odefunc):
        super(ODEBlock, self).__init__()
        self.odefunc = odefunc
        self.integration_time = torch.tensor([0, 1]).float()

    def forward(self, x):
        self.integration_time = self.integration_time.type_as(x)
        out = odeint(self.odefunc, x, self.integration_time, rtol=args.tol, atol=args.tol)
        return out[1]

    @property
    def nfe(self):
        return self.odefunc.nfe

    @nfe.setter
    def nfe(self, value):
        self.odefunc.nfe = value


class Flatten(nn.Module):

    def __init__(self):
        super(Flatten, self).__init__()

    def forward(self, x):
        shape = torch.prod(torch.tensor(x.shape[1:])).item()
        xout = x.view(-1, shape)
        # print(xout.size())
        return xout


class RunningAverageMeter(object):
    """Computes and stores the average and current value"""

    def __init__(self, momentum=0.99):
        self.momentum = momentum
        self.reset()

    def reset(self):
        self.val = None
        self.avg = 0

    def update(self, val):
        if self.val is None:
            self.avg = val
        else:
            self.avg = self.avg * self.momentum + val * (1 - self.momentum)
        self.val = val


def get_cifar_loaders(data_aug=False, batch_size=32, test_batch_size=1000, perc=1.0):
    if data_aug:
        transform_train = transforms.Compose([
            transforms.RandomCrop(28, padding=4),
            transforms.ToTensor(),
        ])
    else:
        transform_train = transforms.Compose([
            transforms.ToTensor(),
        ])

    transform_test = transforms.Compose([
        transforms.ToTensor(),
    ])

    train_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_train), batch_size=batch_size,
        shuffle=True, num_workers=2, drop_last=True
    )

    train_eval_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=True, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    test_loader = DataLoader(
        datasets.CIFAR10(root='.data/cifar10', train=False, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    return train_loader, test_loader, train_eval_loader


def inf_generator(iterable):
    """Allows training with DataLoaders in a single infinite loop:
        for i, (x, y) in enumerate(inf_generator(train_loader)):
    """
    iterator = iterable.__iter__()
    while True:
        try:
            yield iterator.__next__()
        except StopIteration:
            iterator = iterable.__iter__()


def learning_rate_with_decay(batch_size, batch_denom, batches_per_epoch, boundary_epochs, decay_rates):
    initial_learning_rate = args.lr * batch_size / batch_denom

    boundaries = [int(batches_per_epoch * epoch) for epoch in boundary_epochs]
    vals = [initial_learning_rate * decay for decay in decay_rates]

    def learning_rate_fn(itr):
        lt = [itr < b for b in boundaries] + [True]
        i = np.argmax(lt)
        return vals[i]

    return learning_rate_fn


def one_hot(x, K):
    return np.array(x[:, None] == np.arange(K)[None, :], dtype=int)


def accuracy(model, dataset_loader):
    total_correct = 0
    for x, y in dataset_loader:
        x = x.to(device)
        y = one_hot(np.array(y.numpy()), 10)

        target_class = np.argmax(y, axis=1)
        predicted_class = np.argmax(model(x).cpu().detach().numpy(), axis=1)
        total_correct += np.sum(predicted_class == target_class)
    return total_correct / len(dataset_loader.dataset)


def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)


def makedirs(dirname):
    if not os.path.exists(dirname):
        os.makedirs(dirname)


def get_logger(logpath, filepath, package_files=[], displaying=True, saving=True, debug=False):
    logger = logging.getLogger()
    if debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logger.setLevel(level)
    if saving:
        info_file_handler = logging.FileHandler(logpath, mode="a")
        info_file_handler.setLevel(level)
        logger.addHandler(info_file_handler)
    if displaying:
        console_handler = logging.StreamHandler()
        console_handler.setLevel(level)
        logger.addHandler(console_handler)
    logger.info(filepath)
    with open(filepath, "r") as f:
        logger.info(f.read())

    for f in package_files:
        logger.info(f)
        with open(f, "r") as package_f:
            logger.info(package_f.read())

    return logger


if __name__ == '__main__':

    makedirs(args.save)
    logger = get_logger(logpath=os.path.join(args.save, 'logs'), filepath=os.path.abspath(__file__))
    logger.info(args)

    device = torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')

    is_odenet = args.network == 'odenet'

    downsampling_layers = [
        nn.Conv2d(3, 64, 3, 1),
        norm(64),
        nn.ReLU(inplace=True),
        nn.Conv2d(64, 64, 4, 2, 1),
        norm(64),
        nn.ReLU(inplace=True),
        Flatten(),
    ]

    feature_layers = [ODEBlock(ODEfunc(14400))] 
    fc_layers = [nn.Linear(14400, 10)]
    # feature_layers = [ODEBlock(ODEfunc(900))] 
    # fc_layers = [nn.Linear(900, 10)]

    model = nn.Sequential(*downsampling_layers, *feature_layers, *fc_layers).to(device)

    logger.info(model)
    logger.info('Number of parameters: {}'.format(count_parameters(model)))

    criterion = nn.CrossEntropyLoss().to(device)

    train_loader, test_loader, train_eval_loader = get_cifar_loaders(
        args.data_aug, args.batch_size, args.test_batch_size
    )

    data_gen = inf_generator(train_loader)
    batches_per_epoch = len(train_loader)

    lr_fn = learning_rate_with_decay(
        args.batch_size, batch_denom=128, batches_per_epoch=batches_per_epoch, boundary_epochs=[60, 100, 140],
        decay_rates=[1, 0.1, 0.01, 0.001]
    )

    optimizer = torch.optim.SGD(model.parameters(), lr=args.lr, momentum=0.9)

    best_acc = 0
    batch_time_meter = RunningAverageMeter()
    f_nfe_meter = RunningAverageMeter()
    b_nfe_meter = RunningAverageMeter()
    end = time.time()

    for itr in range(args.nepochs * batches_per_epoch):

        for param_group in optimizer.param_groups:
            param_group['lr'] = lr_fn(itr)

        optimizer.zero_grad()
        x, y = data_gen.__next__()
        x = x.to(device)
        y = y.to(device)
        logits = model(x)
        loss = criterion(logits, y)

        if is_odenet:
            nfe_forward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        loss.backward()
        optimizer.step()

        if is_odenet:
            nfe_backward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        batch_time_meter.update(time.time() - end)
        if is_odenet:
            f_nfe_meter.update(nfe_forward)
            b_nfe_meter.update(nfe_backward)
        end = time.time()

        if itr % batches_per_epoch == 0:
            with torch.no_grad():
                train_acc = accuracy(model, train_eval_loader)
                val_acc = accuracy(model, test_loader)
                if val_acc > best_acc:
                    torch.save({'state_dict': model.state_dict(), 'args': args}, os.path.join(args.save, 'model.pth'))
                    best_acc = val_acc
                if best_acc > 0.85 and train_acc > 0.85:
                    break
                logger.info(
                    "Epoch {:04d} | Time {:.3f} ({:.3f}) | NFE-F {:.1f} | NFE-B {:.1f} | "
                    "Train Acc {:.4f} | Test Acc {:.4f}".format(
                        itr // batches_per_epoch, batch_time_meter.val, batch_time_meter.avg, f_nfe_meter.avg,
                        b_nfe_meter.avg, train_acc, val_acc
                    )
                )
    names = []
    params = []
    for name,param in model.named_parameters():
        names.append(name)
        params.append(param.detach().numpy())
    nn1 = dict({'Wb':params,'names':names})
    for name,param in model.named_buffers():
        names.append(name)
        params.append(param.detach().numpy())
    savemat("odecnn_cifar_tiny.mat",nn1)
Namespace(adjoint=False, batch_size=128, data_aug=False, debug=False, downsampling_method='conv', gpu=0, lr=0.001, nepochs=200, network='odenet', save='../logs/cifartiny', test_batch_size=1000, tol=0.001)
Namespace(adjoint=False, batch_size=128, data_aug=False, debug=False, downsampling_method='conv', gpu=0, lr=0.001, nepochs=200, network='odenet', save='../logs/cifartiny', test_batch_size=1000, tol=0.001)
Namespace(adjoint=False, batch_size=128, data_aug=False, debug=False, downsampling_method='conv', gpu=0, lr=0.001, nepochs=200, network='odenet', save='../logs/cifartiny', test_batch_size=1000, tol=0.001)
Sequential(
  (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1))
  (1): BatchNorm2d(64, eps=64, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (4): BatchNorm2d(64, eps=64, momentum=0.1, affine=True, track_running_stats=True)
  (5): ReLU(inplace=True)
  (6): Flatten()
  (7): ODEBlock(
    (odefunc): ODEfunc(
      (fc1): Linear(in_features=14400, out_features=16, bias=True)
      (fc2): Linear(in_features=16, out_features=14400, bias=True)
    )
  )
  (8): Linear(in_features=14400, out_features=10, bias=True)
)
Sequential(
  (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1))
  (1): BatchNorm2d(64, eps=64, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (4): BatchNorm2d(64, eps=64, momentum=0.1, affine=True, track_running_stats=True)
  (5): ReLU(inplace=True)
  (6): Flatten()
  (7): ODEBlock(
    (odefunc): ODEfunc(
      (fc1): Linear(in_features=14400, out_features=16, bias=True)
      (fc2): Linear(in_features=16, out_features=14400, bias=True)
    )
  )
  (8): Linear(in_features=14400, out_features=10, bias=True)
)
Sequential(
  (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1))
  (1): BatchNorm2d(64, eps=64, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (4): BatchNorm2d(64, eps=64, momentum=0.1, affine=True, track_running_stats=True)
  (5): ReLU(inplace=True)
  (6): Flatten()
  (7): ODEBlock(
    (odefunc): ODEfunc(
      (fc1): Linear(in_features=14400, out_features=16, bias=True)
      (fc2): Linear(in_features=16, out_features=14400, bias=True)
    )
  )
  (8): Linear(in_features=14400, out_features=10, bias=True)
)
Number of parameters: 686874
Number of parameters: 686874
Number of parameters: 686874
Epoch 0000 | Time 1.805 (1.805) | NFE-F 26.0 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0000 | Time 1.805 (1.805) | NFE-F 26.0 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0000 | Time 1.805 (1.805) | NFE-F 26.0 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0001 | Time 1.970 (1.570) | NFE-F 25.1 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0001 | Time 1.970 (1.570) | NFE-F 25.1 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0001 | Time 1.970 (1.570) | NFE-F 25.1 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0002 | Time 1.740 (1.293) | NFE-F 20.3 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0002 | Time 1.740 (1.293) | NFE-F 20.3 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0002 | Time 1.740 (1.293) | NFE-F 20.3 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0003 | Time 1.676 (1.279) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0003 | Time 1.676 (1.279) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0003 | Time 1.676 (1.279) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0004 | Time 1.729 (1.281) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0004 | Time 1.729 (1.281) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0004 | Time 1.729 (1.281) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0005 | Time 1.687 (1.283) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0005 | Time 1.687 (1.283) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0005 | Time 1.687 (1.283) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0006 | Time 1.716 (1.282) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1484 | Test Acc 0.1511
Epoch 0006 | Time 1.716 (1.282) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1484 | Test Acc 0.1511
Epoch 0006 | Time 1.716 (1.282) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1484 | Test Acc 0.1511
Epoch 0007 | Time 1.695 (1.282) | NFE-F 20.3 | NFE-B 0.0 | Train Acc 0.1891 | Test Acc 0.1884
Epoch 0007 | Time 1.695 (1.282) | NFE-F 20.3 | NFE-B 0.0 | Train Acc 0.1891 | Test Acc 0.1884
Epoch 0007 | Time 1.695 (1.282) | NFE-F 20.3 | NFE-B 0.0 | Train Acc 0.1891 | Test Acc 0.1884
Epoch 0008 | Time 1.694 (1.280) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1953 | Test Acc 0.1957
Epoch 0008 | Time 1.694 (1.280) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1953 | Test Acc 0.1957
Epoch 0008 | Time 1.694 (1.280) | NFE-F 20.2 | NFE-B 0.0 | Train Acc 0.1953 | Test Acc 0.1957
Epoch 0009 | Time 1.699 (1.303) | NFE-F 21.5 | NFE-B 0.0 | Train Acc 0.2588 | Test Acc 0.2663
Epoch 0009 | Time 1.699 (1.303) | NFE-F 21.5 | NFE-B 0.0 | Train Acc 0.2588 | Test Acc 0.2663
Epoch 0009 | Time 1.699 (1.303) | NFE-F 21.5 | NFE-B 0.0 | Train Acc 0.2588 | Test Acc 0.2663
Epoch 0010 | Time 1.348 (1.246) | NFE-F 22.4 | NFE-B 0.0 | Train Acc 0.2884 | Test Acc 0.2929
Epoch 0010 | Time 1.348 (1.246) | NFE-F 22.4 | NFE-B 0.0 | Train Acc 0.2884 | Test Acc 0.2929
Epoch 0010 | Time 1.348 (1.246) | NFE-F 22.4 | NFE-B 0.0 | Train Acc 0.2884 | Test Acc 0.2929
Epoch 0011 | Time 1.288 (1.014) | NFE-F 16.1 | NFE-B 0.0 | Train Acc 0.2678 | Test Acc 0.2667
Epoch 0011 | Time 1.288 (1.014) | NFE-F 16.1 | NFE-B 0.0 | Train Acc 0.2678 | Test Acc 0.2667
Epoch 0011 | Time 1.288 (1.014) | NFE-F 16.1 | NFE-B 0.0 | Train Acc 0.2678 | Test Acc 0.2667
Epoch 0012 | Time 1.363 (0.980) | NFE-F 14.6 | NFE-B 0.0 | Train Acc 0.3062 | Test Acc 0.3021
Epoch 0012 | Time 1.363 (0.980) | NFE-F 14.6 | NFE-B 0.0 | Train Acc 0.3062 | Test Acc 0.3021
Epoch 0012 | Time 1.363 (0.980) | NFE-F 14.6 | NFE-B 0.0 | Train Acc 0.3062 | Test Acc 0.3021
Epoch 0013 | Time 1.339 (0.953) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.2957 | Test Acc 0.2973
Epoch 0013 | Time 1.339 (0.953) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.2957 | Test Acc 0.2973
Epoch 0013 | Time 1.339 (0.953) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.2957 | Test Acc 0.2973
Epoch 0014 | Time 1.359 (0.953) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.3311 | Test Acc 0.3387
Epoch 0014 | Time 1.359 (0.953) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.3311 | Test Acc 0.3387
Epoch 0014 | Time 1.359 (0.953) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.3311 | Test Acc 0.3387
Epoch 0015 | Time 1.332 (0.961) | NFE-F 14.4 | NFE-B 0.0 | Train Acc 0.3552 | Test Acc 0.3618
Epoch 0015 | Time 1.332 (0.961) | NFE-F 14.4 | NFE-B 0.0 | Train Acc 0.3552 | Test Acc 0.3618
Epoch 0015 | Time 1.332 (0.961) | NFE-F 14.4 | NFE-B 0.0 | Train Acc 0.3552 | Test Acc 0.3618
Epoch 0016 | Time 1.347 (0.968) | NFE-F 14.6 | NFE-B 0.0 | Train Acc 0.3502 | Test Acc 0.3557
Epoch 0016 | Time 1.347 (0.968) | NFE-F 14.6 | NFE-B 0.0 | Train Acc 0.3502 | Test Acc 0.3557
Epoch 0016 | Time 1.347 (0.968) | NFE-F 14.6 | NFE-B 0.0 | Train Acc 0.3502 | Test Acc 0.3557
Epoch 0017 | Time 1.391 (0.957) | NFE-F 14.3 | NFE-B 0.0 | Train Acc 0.3558 | Test Acc 0.3594
Epoch 0017 | Time 1.391 (0.957) | NFE-F 14.3 | NFE-B 0.0 | Train Acc 0.3558 | Test Acc 0.3594
Epoch 0017 | Time 1.391 (0.957) | NFE-F 14.3 | NFE-B 0.0 | Train Acc 0.3558 | Test Acc 0.3594
Epoch 0018 | Time 1.332 (0.954) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.3650 | Test Acc 0.3689
Epoch 0018 | Time 1.332 (0.954) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.3650 | Test Acc 0.3689
Epoch 0018 | Time 1.332 (0.954) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.3650 | Test Acc 0.3689
Epoch 0019 | Time 1.320 (0.955) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.3585 | Test Acc 0.3559
Epoch 0019 | Time 1.320 (0.955) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.3585 | Test Acc 0.3559
Epoch 0019 | Time 1.320 (0.955) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.3585 | Test Acc 0.3559
Epoch 0020 | Time 1.325 (0.957) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.3743 | Test Acc 0.3703
Epoch 0020 | Time 1.325 (0.957) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.3743 | Test Acc 0.3703
Epoch 0020 | Time 1.325 (0.957) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.3743 | Test Acc 0.3703
Epoch 0021 | Time 1.369 (0.956) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.3973 | Test Acc 0.4019
Epoch 0021 | Time 1.369 (0.956) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.3973 | Test Acc 0.4019
Epoch 0021 | Time 1.369 (0.956) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.3973 | Test Acc 0.4019
Epoch 0022 | Time 1.451 (0.969) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.3895 | Test Acc 0.3875
Epoch 0022 | Time 1.451 (0.969) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.3895 | Test Acc 0.3875
Epoch 0022 | Time 1.451 (0.969) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.3895 | Test Acc 0.3875
Epoch 0023 | Time 1.327 (0.954) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.3995 | Test Acc 0.3983
Epoch 0023 | Time 1.327 (0.954) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.3995 | Test Acc 0.3983
Epoch 0023 | Time 1.327 (0.954) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.3995 | Test Acc 0.3983
Epoch 0024 | Time 1.342 (0.958) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.3917 | Test Acc 0.3885
Epoch 0024 | Time 1.342 (0.958) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.3917 | Test Acc 0.3885
Epoch 0024 | Time 1.342 (0.958) | NFE-F 14.2 | NFE-B 0.0 | Train Acc 0.3917 | Test Acc 0.3885
Epoch 0025 | Time 1.367 (0.988) | NFE-F 14.8 | NFE-B 0.0 | Train Acc 0.4211 | Test Acc 0.4199
Epoch 0025 | Time 1.367 (0.988) | NFE-F 14.8 | NFE-B 0.0 | Train Acc 0.4211 | Test Acc 0.4199
Epoch 0025 | Time 1.367 (0.988) | NFE-F 14.8 | NFE-B 0.0 | Train Acc 0.4211 | Test Acc 0.4199
Epoch 0026 | Time 1.355 (1.026) | NFE-F 15.9 | NFE-B 0.0 | Train Acc 0.4058 | Test Acc 0.4019
Epoch 0026 | Time 1.355 (1.026) | NFE-F 15.9 | NFE-B 0.0 | Train Acc 0.4058 | Test Acc 0.4019
Epoch 0026 | Time 1.355 (1.026) | NFE-F 15.9 | NFE-B 0.0 | Train Acc 0.4058 | Test Acc 0.4019
Epoch 0027 | Time 1.805 (1.181) | NFE-F 20.3 | NFE-B 0.0 | Train Acc 0.4168 | Test Acc 0.4111
Epoch 0027 | Time 1.805 (1.181) | NFE-F 20.3 | NFE-B 0.0 | Train Acc 0.4168 | Test Acc 0.4111
Epoch 0027 | Time 1.805 (1.181) | NFE-F 20.3 | NFE-B 0.0 | Train Acc 0.4168 | Test Acc 0.4111
Epoch 0028 | Time 1.847 (1.342) | NFE-F 24.4 | NFE-B 0.0 | Train Acc 0.4192 | Test Acc 0.4149
Epoch 0028 | Time 1.847 (1.342) | NFE-F 24.4 | NFE-B 0.0 | Train Acc 0.4192 | Test Acc 0.4149
Epoch 0028 | Time 1.847 (1.342) | NFE-F 24.4 | NFE-B 0.0 | Train Acc 0.4192 | Test Acc 0.4149
Epoch 0029 | Time 1.848 (1.397) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.4474 | Test Acc 0.4438
Epoch 0029 | Time 1.848 (1.397) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.4474 | Test Acc 0.4438
Epoch 0029 | Time 1.848 (1.397) | NFE-F 26.2 | NFE-B 0.0 | Train Acc 0.4474 | Test Acc 0.4438
Epoch 0030 | Time 1.847 (1.406) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.4518 | Test Acc 0.4496
Epoch 0030 | Time 1.847 (1.406) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.4518 | Test Acc 0.4496
Epoch 0030 | Time 1.847 (1.406) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.4518 | Test Acc 0.4496
Epoch 0031 | Time 1.835 (1.411) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.4449 | Test Acc 0.4375
Epoch 0031 | Time 1.835 (1.411) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.4449 | Test Acc 0.4375
Epoch 0031 | Time 1.835 (1.411) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.4449 | Test Acc 0.4375
Epoch 0032 | Time 1.877 (1.404) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.4415 | Test Acc 0.4388
Epoch 0032 | Time 1.877 (1.404) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.4415 | Test Acc 0.4388
Epoch 0032 | Time 1.877 (1.404) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.4415 | Test Acc 0.4388
Epoch 0033 | Time 1.859 (1.405) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.4678 | Test Acc 0.4620
Epoch 0033 | Time 1.859 (1.405) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.4678 | Test Acc 0.4620
Epoch 0033 | Time 1.859 (1.405) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.4678 | Test Acc 0.4620
Epoch 0034 | Time 1.845 (1.414) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.4468 | Test Acc 0.4399
Epoch 0034 | Time 1.845 (1.414) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.4468 | Test Acc 0.4399
Epoch 0034 | Time 1.845 (1.414) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.4468 | Test Acc 0.4399
Epoch 0035 | Time 1.872 (1.412) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.4681 | Test Acc 0.4631
Epoch 0035 | Time 1.872 (1.412) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.4681 | Test Acc 0.4631
Epoch 0035 | Time 1.872 (1.412) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.4681 | Test Acc 0.4631
Epoch 0036 | Time 1.857 (1.405) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.4682 | Test Acc 0.4604
Epoch 0036 | Time 1.857 (1.405) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.4682 | Test Acc 0.4604
Epoch 0036 | Time 1.857 (1.405) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.4682 | Test Acc 0.4604
Epoch 0037 | Time 1.889 (1.412) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.4852 | Test Acc 0.4752
Epoch 0037 | Time 1.889 (1.412) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.4852 | Test Acc 0.4752
Epoch 0037 | Time 1.889 (1.412) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.4852 | Test Acc 0.4752
Epoch 0038 | Time 1.824 (1.414) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.4839 | Test Acc 0.4727
Epoch 0038 | Time 1.824 (1.414) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.4839 | Test Acc 0.4727
Epoch 0038 | Time 1.824 (1.414) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.4839 | Test Acc 0.4727
Epoch 0039 | Time 1.809 (1.401) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.4728 | Test Acc 0.4640
Epoch 0039 | Time 1.809 (1.401) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.4728 | Test Acc 0.4640
Epoch 0039 | Time 1.809 (1.401) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.4728 | Test Acc 0.4640
Epoch 0040 | Time 1.828 (1.402) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.4820 | Test Acc 0.4713
Epoch 0040 | Time 1.828 (1.402) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.4820 | Test Acc 0.4713
Epoch 0040 | Time 1.828 (1.402) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.4820 | Test Acc 0.4713
Epoch 0041 | Time 1.844 (1.407) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.4649 | Test Acc 0.4553
Epoch 0041 | Time 1.844 (1.407) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.4649 | Test Acc 0.4553
Epoch 0041 | Time 1.844 (1.407) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.4649 | Test Acc 0.4553
Epoch 0042 | Time 1.828 (1.407) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.5022 | Test Acc 0.4894
Epoch 0042 | Time 1.828 (1.407) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.5022 | Test Acc 0.4894
Epoch 0042 | Time 1.828 (1.407) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.5022 | Test Acc 0.4894
Epoch 0043 | Time 2.007 (1.416) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.4887 | Test Acc 0.4774
Epoch 0043 | Time 2.007 (1.416) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.4887 | Test Acc 0.4774
Epoch 0043 | Time 2.007 (1.416) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.4887 | Test Acc 0.4774
Epoch 0044 | Time 1.857 (1.413) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.4973 | Test Acc 0.4877
Epoch 0044 | Time 1.857 (1.413) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.4973 | Test Acc 0.4877
Epoch 0044 | Time 1.857 (1.413) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.4973 | Test Acc 0.4877
Epoch 0045 | Time 1.834 (1.403) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.5090 | Test Acc 0.4935
Epoch 0045 | Time 1.834 (1.403) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.5090 | Test Acc 0.4935
Epoch 0045 | Time 1.834 (1.403) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.5090 | Test Acc 0.4935
Epoch 0046 | Time 1.861 (1.405) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.5040 | Test Acc 0.4861
Epoch 0046 | Time 1.861 (1.405) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.5040 | Test Acc 0.4861
Epoch 0046 | Time 1.861 (1.405) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.5040 | Test Acc 0.4861
Epoch 0047 | Time 1.882 (1.402) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.4986 | Test Acc 0.4848
Epoch 0047 | Time 1.882 (1.402) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.4986 | Test Acc 0.4848
Epoch 0047 | Time 1.882 (1.402) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.4986 | Test Acc 0.4848
Epoch 0048 | Time 1.905 (1.404) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.5063 | Test Acc 0.4928
Epoch 0048 | Time 1.905 (1.404) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.5063 | Test Acc 0.4928
Epoch 0048 | Time 1.905 (1.404) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.5063 | Test Acc 0.4928
Epoch 0049 | Time 2.069 (1.406) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.5008 | Test Acc 0.4848
Epoch 0049 | Time 2.069 (1.406) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.5008 | Test Acc 0.4848
Epoch 0049 | Time 2.069 (1.406) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.5008 | Test Acc 0.4848
Epoch 0050 | Time 1.850 (1.415) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.5157 | Test Acc 0.4962
Epoch 0050 | Time 1.850 (1.415) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.5157 | Test Acc 0.4962
Epoch 0050 | Time 1.850 (1.415) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.5157 | Test Acc 0.4962
Epoch 0051 | Time 2.052 (1.413) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.4965 | Test Acc 0.4788
Epoch 0051 | Time 2.052 (1.413) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.4965 | Test Acc 0.4788
Epoch 0051 | Time 2.052 (1.413) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.4965 | Test Acc 0.4788
Epoch 0052 | Time 1.891 (1.405) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.5162 | Test Acc 0.5028
Epoch 0052 | Time 1.891 (1.405) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.5162 | Test Acc 0.5028
Epoch 0052 | Time 1.891 (1.405) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.5162 | Test Acc 0.5028
Epoch 0053 | Time 2.094 (1.404) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.5299 | Test Acc 0.5090
Epoch 0053 | Time 2.094 (1.404) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.5299 | Test Acc 0.5090
Epoch 0053 | Time 2.094 (1.404) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.5299 | Test Acc 0.5090
Epoch 0054 | Time 1.854 (1.402) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.5249 | Test Acc 0.5086
Epoch 0054 | Time 1.854 (1.402) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.5249 | Test Acc 0.5086
Epoch 0054 | Time 1.854 (1.402) | NFE-F 26.3 | NFE-B 0.0 | Train Acc 0.5249 | Test Acc 0.5086
Epoch 0055 | Time 1.849 (1.442) | NFE-F 26.9 | NFE-B 0.0 | Train Acc 0.5270 | Test Acc 0.5047
Epoch 0055 | Time 1.849 (1.442) | NFE-F 26.9 | NFE-B 0.0 | Train Acc 0.5270 | Test Acc 0.5047
Epoch 0055 | Time 1.849 (1.442) | NFE-F 26.9 | NFE-B 0.0 | Train Acc 0.5270 | Test Acc 0.5047
Epoch 0056 | Time 2.245 (1.503) | NFE-F 29.2 | NFE-B 0.0 | Train Acc 0.5227 | Test Acc 0.5072
Epoch 0056 | Time 2.245 (1.503) | NFE-F 29.2 | NFE-B 0.0 | Train Acc 0.5227 | Test Acc 0.5072
Epoch 0056 | Time 2.245 (1.503) | NFE-F 29.2 | NFE-B 0.0 | Train Acc 0.5227 | Test Acc 0.5072
Epoch 0057 | Time 1.884 (1.700) | NFE-F 34.5 | NFE-B 0.0 | Train Acc 0.5404 | Test Acc 0.5193
Epoch 0057 | Time 1.884 (1.700) | NFE-F 34.5 | NFE-B 0.0 | Train Acc 0.5404 | Test Acc 0.5193
Epoch 0057 | Time 1.884 (1.700) | NFE-F 34.5 | NFE-B 0.0 | Train Acc 0.5404 | Test Acc 0.5193
Epoch 0058 | Time 2.375 (1.756) | NFE-F 36.7 | NFE-B 0.0 | Train Acc 0.5420 | Test Acc 0.5180
Epoch 0058 | Time 2.375 (1.756) | NFE-F 36.7 | NFE-B 0.0 | Train Acc 0.5420 | Test Acc 0.5180
Epoch 0058 | Time 2.375 (1.756) | NFE-F 36.7 | NFE-B 0.0 | Train Acc 0.5420 | Test Acc 0.5180
Epoch 0059 | Time 1.890 (1.819) | NFE-F 38.1 | NFE-B 0.0 | Train Acc 0.5425 | Test Acc 0.5155
Epoch 0059 | Time 1.890 (1.819) | NFE-F 38.1 | NFE-B 0.0 | Train Acc 0.5425 | Test Acc 0.5155
Epoch 0059 | Time 1.890 (1.819) | NFE-F 38.1 | NFE-B 0.0 | Train Acc 0.5425 | Test Acc 0.5155
Epoch 0060 | Time 2.355 (1.834) | NFE-F 38.4 | NFE-B 0.0 | Train Acc 0.5490 | Test Acc 0.5274
Epoch 0060 | Time 2.355 (1.834) | NFE-F 38.4 | NFE-B 0.0 | Train Acc 0.5490 | Test Acc 0.5274
Epoch 0060 | Time 2.355 (1.834) | NFE-F 38.4 | NFE-B 0.0 | Train Acc 0.5490 | Test Acc 0.5274
Epoch 0061 | Time 2.322 (1.834) | NFE-F 38.5 | NFE-B 0.0 | Train Acc 0.5694 | Test Acc 0.5407
Epoch 0061 | Time 2.322 (1.834) | NFE-F 38.5 | NFE-B 0.0 | Train Acc 0.5694 | Test Acc 0.5407
Epoch 0061 | Time 2.322 (1.834) | NFE-F 38.5 | NFE-B 0.0 | Train Acc 0.5694 | Test Acc 0.5407
Epoch 0062 | Time 2.295 (1.854) | NFE-F 38.5 | NFE-B 0.0 | Train Acc 0.5707 | Test Acc 0.5442
Epoch 0062 | Time 2.295 (1.854) | NFE-F 38.5 | NFE-B 0.0 | Train Acc 0.5707 | Test Acc 0.5442
Epoch 0062 | Time 2.295 (1.854) | NFE-F 38.5 | NFE-B 0.0 | Train Acc 0.5707 | Test Acc 0.5442
Epoch 0063 | Time 2.313 (1.832) | NFE-F 38.5 | NFE-B 0.0 | Train Acc 0.5723 | Test Acc 0.5420
Epoch 0063 | Time 2.313 (1.832) | NFE-F 38.5 | NFE-B 0.0 | Train Acc 0.5723 | Test Acc 0.5420
Epoch 0063 | Time 2.313 (1.832) | NFE-F 38.5 | NFE-B 0.0 | Train Acc 0.5723 | Test Acc 0.5420
Epoch 0064 | Time 2.364 (1.832) | NFE-F 38.5 | NFE-B 0.0 | Train Acc 0.5717 | Test Acc 0.5392
Epoch 0064 | Time 2.364 (1.832) | NFE-F 38.5 | NFE-B 0.0 | Train Acc 0.5717 | Test Acc 0.5392
Epoch 0064 | Time 2.364 (1.832) | NFE-F 38.5 | NFE-B 0.0 | Train Acc 0.5717 | Test Acc 0.5392
Epoch 0065 | Time 2.348 (1.832) | NFE-F 38.5 | NFE-B 0.0 | Train Acc 0.5737 | Test Acc 0.5440
Epoch 0065 | Time 2.348 (1.832) | NFE-F 38.5 | NFE-B 0.0 | Train Acc 0.5737 | Test Acc 0.5440
Epoch 0065 | Time 2.348 (1.832) | NFE-F 38.5 | NFE-B 0.0 | Train Acc 0.5737 | Test Acc 0.5440
Epoch 0066 | Time 2.381 (1.832) | NFE-F 38.5 | NFE-B 0.0 | Train Acc 0.5705 | Test Acc 0.5429
Epoch 0066 | Time 2.381 (1.832) | NFE-F 38.5 | NFE-B 0.0 | Train Acc 0.5705 | Test Acc 0.5429
Epoch 0066 | Time 2.381 (1.832) | NFE-F 38.5 | NFE-B 0.0 | Train Acc 0.5705 | Test Acc 0.5429
Epoch 0067 | Time 2.357 (1.842) | NFE-F 38.5 | NFE-B 0.0 | Train Acc 0.5735 | Test Acc 0.5433
Epoch 0067 | Time 2.357 (1.842) | NFE-F 38.5 | NFE-B 0.0 | Train Acc 0.5735 | Test Acc 0.5433
Epoch 0067 | Time 2.357 (1.842) | NFE-F 38.5 | NFE-B 0.0 | Train Acc 0.5735 | Test Acc 0.5433
Epoch 0068 | Time 2.319 (1.839) | NFE-F 38.5 | NFE-B 0.0 | Train Acc 0.5752 | Test Acc 0.5450
Epoch 0068 | Time 2.319 (1.839) | NFE-F 38.5 | NFE-B 0.0 | Train Acc 0.5752 | Test Acc 0.5450
Epoch 0068 | Time 2.319 (1.839) | NFE-F 38.5 | NFE-B 0.0 | Train Acc 0.5752 | Test Acc 0.5450
Epoch 0069 | Time 2.322 (1.834) | NFE-F 38.5 | NFE-B 0.0 | Train Acc 0.5741 | Test Acc 0.5449
Epoch 0069 | Time 2.322 (1.834) | NFE-F 38.5 | NFE-B 0.0 | Train Acc 0.5741 | Test Acc 0.5449
Epoch 0069 | Time 2.322 (1.834) | NFE-F 38.5 | NFE-B 0.0 | Train Acc 0.5741 | Test Acc 0.5449
Epoch 0070 | Time 2.385 (1.835) | NFE-F 38.5 | NFE-B 0.0 | Train Acc 0.5779 | Test Acc 0.5449
Epoch 0070 | Time 2.385 (1.835) | NFE-F 38.5 | NFE-B 0.0 | Train Acc 0.5779 | Test Acc 0.5449
Epoch 0070 | Time 2.385 (1.835) | NFE-F 38.5 | NFE-B 0.0 | Train Acc 0.5779 | Test Acc 0.5449
/home/manzand/Documents/Python/neuralODE_examples/gtsrb/odenet_gtsrb_example_small.py
/home/manzand/Documents/Python/neuralODE_examples/gtsrb/odenet_gtsrb_example_small.py
/home/manzand/Documents/Python/neuralODE_examples/gtsrb/odenet_gtsrb_example_small.py
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb  4 09:04:31 2021

@author: manzand
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 19 15:10:31 2021

@author: manzand
"""

import os
import argparse
import logging
import time
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms
from scipy.io import savemat
import gtsrb_dataset as dataset


parser = argparse.ArgumentParser()
parser.add_argument('--network', type=str, choices=['resnet', 'odenet'], default='odenet')
parser.add_argument('--tol', type=float, default=1e-3)
parser.add_argument('--adjoint', type=eval, default=False, choices=[True, False])
parser.add_argument('--downsampling-method', type=str, default='conv', choices=['conv', 'res'])
parser.add_argument('--nepochs', type=int, default=100)
parser.add_argument('--data_aug', type=eval, default=False, choices=[True, False])
parser.add_argument('--lr', type=float, default=0.01)
parser.add_argument('--batch_size', type=int, default=128)
parser.add_argument('--test_batch_size', type=int, default=1000)

parser.add_argument('--save', type=str, default='./experiment1')
parser.add_argument('--debug', action='store_true')
parser.add_argument('--gpu', type=int, default=0)
args = parser.parse_args()

if args.adjoint:
    from torchdiffeq import odeint_adjoint as odeint
else:
    from torchdiffeq import odeint


def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


def norm(dim):
    return nn.BatchNorm2d(min(64, dim), dim)


class ConcatConv2d(nn.Module):

    def __init__(self, dim_in, dim_out, ksize=3, stride=1, padding=0, dilation=1, groups=1, bias=True, transpose=False):
        super(ConcatConv2d, self).__init__()
        module = nn.ConvTranspose2d if transpose else nn.Conv2d
        self._layer = module(
            dim_in + 1, dim_out, kernel_size=ksize, stride=stride, padding=padding, dilation=dilation, groups=groups,
            bias=bias
        )

    def forward(self, t, x):
        tt = torch.ones_like(x[:, :1, :, :]) * t
        ttx = torch.cat([tt, x], 1)
        return self._layer(ttx)


class ODEfunc(nn.Module):

    def __init__(self,dim):
        super(ODEfunc, self).__init__()
        self.fc1 = nn.Linear(dim,10)
        self.fc2 = nn.Linear(10, dim)
        self.nfe = 0

    def forward(self, t, x):
        self.nfe += 1
        out = self.fc1(x)
        out = self.fc2(out)
        return out


class ODEBlock(nn.Module):

    def __init__(self, odefunc):
        super(ODEBlock, self).__init__()
        self.odefunc = odefunc
        self.integration_time = torch.tensor([0, 1]).float()

    def forward(self, x):
        self.integration_time = self.integration_time.type_as(x)
        out = odeint(self.odefunc, x, self.integration_time, rtol=args.tol, atol=args.tol)
        return out[1]

    @property
    def nfe(self):
        return self.odefunc.nfe

    @nfe.setter
    def nfe(self, value):
        self.odefunc.nfe = value


class Flatten(nn.Module):

    def __init__(self):
        super(Flatten, self).__init__()

    def forward(self, x):
        shape = torch.prod(torch.tensor(x.shape[1:])).item()
        return x.view(-1, shape)


class RunningAverageMeter(object):
    """Computes and stores the average and current value"""

    def __init__(self, momentum=0.99):
        self.momentum = momentum
        self.reset()

    def reset(self):
        self.val = None
        self.avg = 0

    def update(self, val):
        if self.val is None:
            self.avg = val
        else:
            self.avg = self.avg * self.momentum + val * (1 - self.momentum)
        self.val = val


def get_data_loaders(data_aug=False, batch_size=32, test_batch_size=1000, perc=1.0):
    # Create Transforms
    transform = transforms.Compose([
        transforms.Resize((32, 32)),
        transforms.ToTensor(),
        transforms.Normalize((0.3403, 0.3121, 0.3214),
                             (0.2724, 0.2608, 0.2669))
    ])
    
    root_dir = 'home/manzand/Documents/MATLAB/NeuralODEs/gtrsb/data'
    
    # Create Datasets
    trainset = dataset.GTSRB(
        root_dir=root_dir, train=True,  transform=transform)
    testset = dataset.GTSRB(
        root_dir=root_dir, train=False,  transform=transform)
    
    # Load Datasets
    train_loader = torch.utils.data.DataLoader(
        trainset, batch_size=batch_size, shuffle=True, num_workers=2)
    train_eval_loader = torch.utils.data.DataLoader(
        trainset, batch_size=batch_size, shuffle=False, num_workers=2)
    test_loader = torch.utils.data.DataLoader(
        testset, batch_size=batch_size, shuffle=False, num_workers=2)

    return train_loader, test_loader, train_eval_loader


def inf_generator(iterable):
    """Allows training with DataLoaders in a single infinite loop:
        for i, (x, y) in enumerate(inf_generator(train_loader)):
    """
    iterator = iterable.__iter__()
    while True:
        try:
            yield iterator.__next__()
        except StopIteration:
            iterator = iterable.__iter__()


def learning_rate_with_decay(batch_size, batch_denom, batches_per_epoch, boundary_epochs, decay_rates):
    initial_learning_rate = args.lr * batch_size / batch_denom

    boundaries = [int(batches_per_epoch * epoch) for epoch in boundary_epochs]
    vals = [initial_learning_rate * decay for decay in decay_rates]

    def learning_rate_fn(itr):
        lt = [itr < b for b in boundaries] + [True]
        i = np.argmax(lt)
        return vals[i]

    return learning_rate_fn


def one_hot(x, K):
    return np.array(x[:, None] == np.arange(K)[None, :], dtype=int)


def accuracy(model, dataset_loader):
    total_correct = 0
    for x, y in dataset_loader:
        x = x.to(device)
        y = one_hot(np.array(y.numpy()), 10)

        target_class = np.argmax(y, axis=1)
        predicted_class = np.argmax(model(x).cpu().detach().numpy(), axis=1)
        total_correct += np.sum(predicted_class == target_class)
    return total_correct / len(dataset_loader.dataset)


def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)


def makedirs(dirname):
    if not os.path.exists(dirname):
        os.makedirs(dirname)


def get_logger(logpath, filepath, package_files=[], displaying=True, saving=True, debug=False):
    logger = logging.getLogger()
    if debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logger.setLevel(level)
    if saving:
        info_file_handler = logging.FileHandler(logpath, mode="a")
        info_file_handler.setLevel(level)
        logger.addHandler(info_file_handler)
    if displaying:
        console_handler = logging.StreamHandler()
        console_handler.setLevel(level)
        logger.addHandler(console_handler)
    logger.info(filepath)
    with open(filepath, "r") as f:
        logger.info(f.read())

    for f in package_files:
        logger.info(f)
        with open(f, "r") as package_f:
            logger.info(package_f.read())

    return logger


if __name__ == '__main__':

    makedirs(args.save)
    logger = get_logger(logpath=os.path.join(args.save, 'logs'), filepath=os.path.abspath(__file__))
    logger.info(args)

    device = torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')

    is_odenet = args.network == 'odenet'

    downsampling_layers = [
        nn.Conv2d(1, 16, 3, 1),
        norm(16),
        nn.ReLU(inplace=True),
        nn.Conv2d(16, 16, 4, 2, 1),
        norm(16),
        nn.ReLU(inplace=True),
        Flatten(),
    ]


    feature_layers = [ODEBlock(ODEfunc(2704))] 
    fc_layers = [nn.Linear(2704, 10)]

    model = nn.Sequential(*downsampling_layers, *feature_layers, *fc_layers).to(device)

    logger.info(model)
    logger.info('Number of parameters: {}'.format(count_parameters(model)))

    criterion = nn.CrossEntropyLoss().to(device)

    train_loader, test_loader, train_eval_loader = get_data_loaders(
        args.data_aug, args.batch_size, args.test_batch_size
    )

    data_gen = inf_generator(train_loader)
    batches_per_epoch = len(train_loader)

    lr_fn = learning_rate_with_decay(
        args.batch_size, batch_denom=128, batches_per_epoch=batches_per_epoch, boundary_epochs=[60, 100, 140],
        decay_rates=[1, 0.1, 0.01, 0.001]
    )

    optimizer = torch.optim.SGD(model.parameters(), lr=args.lr, momentum=0.9)

    best_acc = 0
    batch_time_meter = RunningAverageMeter()
    f_nfe_meter = RunningAverageMeter()
    b_nfe_meter = RunningAverageMeter()
    end = time.time()

    for itr in range(args.nepochs * batches_per_epoch):

        for param_group in optimizer.param_groups:
            param_group['lr'] = lr_fn(itr)

        optimizer.zero_grad()
        x, y = data_gen.__next__()
        x = x.to(device)
        y = y.to(device)
        logits = model(x)
        loss = criterion(logits, y)

        if is_odenet:
            nfe_forward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        loss.backward()
        optimizer.step()

        if is_odenet:
            nfe_backward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        batch_time_meter.update(time.time() - end)
        if is_odenet:
            f_nfe_meter.update(nfe_forward)
            b_nfe_meter.update(nfe_backward)
        end = time.time()

        if itr % batches_per_epoch == 0:
            with torch.no_grad():
                train_acc = accuracy(model, train_eval_loader)
                val_acc = accuracy(model, test_loader)
                if val_acc > best_acc:
                    torch.save({'state_dict': model.state_dict(), 'args': args}, os.path.join(args.save, 'model.pth'))
                    best_acc = val_acc
                if best_acc > 0.96:
                    break
                logger.info(
                    "Epoch {:04d} | Time {:.3f} ({:.3f}) | NFE-F {:.1f} | NFE-B {:.1f} | "
                    "Train Acc {:.4f} | Test Acc {:.4f}".format(
                        itr // batches_per_epoch, batch_time_meter.val, batch_time_meter.avg, f_nfe_meter.avg,
                        b_nfe_meter.avg, train_acc, val_acc
                    )
                )
    names = []
    params = []
    for name,param in model.named_parameters():
        names.append(name)
        params.append(param.detach().numpy())
    nn1 = dict({'Wb':params,'names':names})
    for name,param in model.named_buffers():
        names.append(name)
        params.append(param.detach().numpy())
    savemat("odecnn_gtsrb_small.mat",nn1)
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb  4 09:04:31 2021

@author: manzand
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 19 15:10:31 2021

@author: manzand
"""

import os
import argparse
import logging
import time
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms
from scipy.io import savemat
import gtsrb_dataset as dataset


parser = argparse.ArgumentParser()
parser.add_argument('--network', type=str, choices=['resnet', 'odenet'], default='odenet')
parser.add_argument('--tol', type=float, default=1e-3)
parser.add_argument('--adjoint', type=eval, default=False, choices=[True, False])
parser.add_argument('--downsampling-method', type=str, default='conv', choices=['conv', 'res'])
parser.add_argument('--nepochs', type=int, default=100)
parser.add_argument('--data_aug', type=eval, default=False, choices=[True, False])
parser.add_argument('--lr', type=float, default=0.01)
parser.add_argument('--batch_size', type=int, default=128)
parser.add_argument('--test_batch_size', type=int, default=1000)

parser.add_argument('--save', type=str, default='./experiment1')
parser.add_argument('--debug', action='store_true')
parser.add_argument('--gpu', type=int, default=0)
args = parser.parse_args()

if args.adjoint:
    from torchdiffeq import odeint_adjoint as odeint
else:
    from torchdiffeq import odeint


def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


def norm(dim):
    return nn.BatchNorm2d(min(64, dim), dim)


class ConcatConv2d(nn.Module):

    def __init__(self, dim_in, dim_out, ksize=3, stride=1, padding=0, dilation=1, groups=1, bias=True, transpose=False):
        super(ConcatConv2d, self).__init__()
        module = nn.ConvTranspose2d if transpose else nn.Conv2d
        self._layer = module(
            dim_in + 1, dim_out, kernel_size=ksize, stride=stride, padding=padding, dilation=dilation, groups=groups,
            bias=bias
        )

    def forward(self, t, x):
        tt = torch.ones_like(x[:, :1, :, :]) * t
        ttx = torch.cat([tt, x], 1)
        return self._layer(ttx)


class ODEfunc(nn.Module):

    def __init__(self,dim):
        super(ODEfunc, self).__init__()
        self.fc1 = nn.Linear(dim,10)
        self.fc2 = nn.Linear(10, dim)
        self.nfe = 0

    def forward(self, t, x):
        self.nfe += 1
        out = self.fc1(x)
        out = self.fc2(out)
        return out


class ODEBlock(nn.Module):

    def __init__(self, odefunc):
        super(ODEBlock, self).__init__()
        self.odefunc = odefunc
        self.integration_time = torch.tensor([0, 1]).float()

    def forward(self, x):
        self.integration_time = self.integration_time.type_as(x)
        out = odeint(self.odefunc, x, self.integration_time, rtol=args.tol, atol=args.tol)
        return out[1]

    @property
    def nfe(self):
        return self.odefunc.nfe

    @nfe.setter
    def nfe(self, value):
        self.odefunc.nfe = value


class Flatten(nn.Module):

    def __init__(self):
        super(Flatten, self).__init__()

    def forward(self, x):
        shape = torch.prod(torch.tensor(x.shape[1:])).item()
        return x.view(-1, shape)


class RunningAverageMeter(object):
    """Computes and stores the average and current value"""

    def __init__(self, momentum=0.99):
        self.momentum = momentum
        self.reset()

    def reset(self):
        self.val = None
        self.avg = 0

    def update(self, val):
        if self.val is None:
            self.avg = val
        else:
            self.avg = self.avg * self.momentum + val * (1 - self.momentum)
        self.val = val


def get_data_loaders(data_aug=False, batch_size=32, test_batch_size=1000, perc=1.0):
    # Create Transforms
    transform = transforms.Compose([
        transforms.Resize((32, 32)),
        transforms.ToTensor(),
        transforms.Normalize((0.3403, 0.3121, 0.3214),
                             (0.2724, 0.2608, 0.2669))
    ])
    
    root_dir = 'home/manzand/Documents/MATLAB/NeuralODEs/gtrsb/data'
    
    # Create Datasets
    trainset = dataset.GTSRB(
        root_dir=root_dir, train=True,  transform=transform)
    testset = dataset.GTSRB(
        root_dir=root_dir, train=False,  transform=transform)
    
    # Load Datasets
    train_loader = torch.utils.data.DataLoader(
        trainset, batch_size=batch_size, shuffle=True, num_workers=2)
    train_eval_loader = torch.utils.data.DataLoader(
        trainset, batch_size=batch_size, shuffle=False, num_workers=2)
    test_loader = torch.utils.data.DataLoader(
        testset, batch_size=batch_size, shuffle=False, num_workers=2)

    return train_loader, test_loader, train_eval_loader


def inf_generator(iterable):
    """Allows training with DataLoaders in a single infinite loop:
        for i, (x, y) in enumerate(inf_generator(train_loader)):
    """
    iterator = iterable.__iter__()
    while True:
        try:
            yield iterator.__next__()
        except StopIteration:
            iterator = iterable.__iter__()


def learning_rate_with_decay(batch_size, batch_denom, batches_per_epoch, boundary_epochs, decay_rates):
    initial_learning_rate = args.lr * batch_size / batch_denom

    boundaries = [int(batches_per_epoch * epoch) for epoch in boundary_epochs]
    vals = [initial_learning_rate * decay for decay in decay_rates]

    def learning_rate_fn(itr):
        lt = [itr < b for b in boundaries] + [True]
        i = np.argmax(lt)
        return vals[i]

    return learning_rate_fn


def one_hot(x, K):
    return np.array(x[:, None] == np.arange(K)[None, :], dtype=int)


def accuracy(model, dataset_loader):
    total_correct = 0
    for x, y in dataset_loader:
        x = x.to(device)
        y = one_hot(np.array(y.numpy()), 10)

        target_class = np.argmax(y, axis=1)
        predicted_class = np.argmax(model(x).cpu().detach().numpy(), axis=1)
        total_correct += np.sum(predicted_class == target_class)
    return total_correct / len(dataset_loader.dataset)


def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)


def makedirs(dirname):
    if not os.path.exists(dirname):
        os.makedirs(dirname)


def get_logger(logpath, filepath, package_files=[], displaying=True, saving=True, debug=False):
    logger = logging.getLogger()
    if debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logger.setLevel(level)
    if saving:
        info_file_handler = logging.FileHandler(logpath, mode="a")
        info_file_handler.setLevel(level)
        logger.addHandler(info_file_handler)
    if displaying:
        console_handler = logging.StreamHandler()
        console_handler.setLevel(level)
        logger.addHandler(console_handler)
    logger.info(filepath)
    with open(filepath, "r") as f:
        logger.info(f.read())

    for f in package_files:
        logger.info(f)
        with open(f, "r") as package_f:
            logger.info(package_f.read())

    return logger


if __name__ == '__main__':

    makedirs(args.save)
    logger = get_logger(logpath=os.path.join(args.save, 'logs'), filepath=os.path.abspath(__file__))
    logger.info(args)

    device = torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')

    is_odenet = args.network == 'odenet'

    downsampling_layers = [
        nn.Conv2d(1, 16, 3, 1),
        norm(16),
        nn.ReLU(inplace=True),
        nn.Conv2d(16, 16, 4, 2, 1),
        norm(16),
        nn.ReLU(inplace=True),
        Flatten(),
    ]


    feature_layers = [ODEBlock(ODEfunc(2704))] 
    fc_layers = [nn.Linear(2704, 10)]

    model = nn.Sequential(*downsampling_layers, *feature_layers, *fc_layers).to(device)

    logger.info(model)
    logger.info('Number of parameters: {}'.format(count_parameters(model)))

    criterion = nn.CrossEntropyLoss().to(device)

    train_loader, test_loader, train_eval_loader = get_data_loaders(
        args.data_aug, args.batch_size, args.test_batch_size
    )

    data_gen = inf_generator(train_loader)
    batches_per_epoch = len(train_loader)

    lr_fn = learning_rate_with_decay(
        args.batch_size, batch_denom=128, batches_per_epoch=batches_per_epoch, boundary_epochs=[60, 100, 140],
        decay_rates=[1, 0.1, 0.01, 0.001]
    )

    optimizer = torch.optim.SGD(model.parameters(), lr=args.lr, momentum=0.9)

    best_acc = 0
    batch_time_meter = RunningAverageMeter()
    f_nfe_meter = RunningAverageMeter()
    b_nfe_meter = RunningAverageMeter()
    end = time.time()

    for itr in range(args.nepochs * batches_per_epoch):

        for param_group in optimizer.param_groups:
            param_group['lr'] = lr_fn(itr)

        optimizer.zero_grad()
        x, y = data_gen.__next__()
        x = x.to(device)
        y = y.to(device)
        logits = model(x)
        loss = criterion(logits, y)

        if is_odenet:
            nfe_forward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        loss.backward()
        optimizer.step()

        if is_odenet:
            nfe_backward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        batch_time_meter.update(time.time() - end)
        if is_odenet:
            f_nfe_meter.update(nfe_forward)
            b_nfe_meter.update(nfe_backward)
        end = time.time()

        if itr % batches_per_epoch == 0:
            with torch.no_grad():
                train_acc = accuracy(model, train_eval_loader)
                val_acc = accuracy(model, test_loader)
                if val_acc > best_acc:
                    torch.save({'state_dict': model.state_dict(), 'args': args}, os.path.join(args.save, 'model.pth'))
                    best_acc = val_acc
                if best_acc > 0.96:
                    break
                logger.info(
                    "Epoch {:04d} | Time {:.3f} ({:.3f}) | NFE-F {:.1f} | NFE-B {:.1f} | "
                    "Train Acc {:.4f} | Test Acc {:.4f}".format(
                        itr // batches_per_epoch, batch_time_meter.val, batch_time_meter.avg, f_nfe_meter.avg,
                        b_nfe_meter.avg, train_acc, val_acc
                    )
                )
    names = []
    params = []
    for name,param in model.named_parameters():
        names.append(name)
        params.append(param.detach().numpy())
    nn1 = dict({'Wb':params,'names':names})
    for name,param in model.named_buffers():
        names.append(name)
        params.append(param.detach().numpy())
    savemat("odecnn_gtsrb_small.mat",nn1)
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb  4 09:04:31 2021

@author: manzand
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 19 15:10:31 2021

@author: manzand
"""

import os
import argparse
import logging
import time
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms
from scipy.io import savemat
import gtsrb_dataset as dataset


parser = argparse.ArgumentParser()
parser.add_argument('--network', type=str, choices=['resnet', 'odenet'], default='odenet')
parser.add_argument('--tol', type=float, default=1e-3)
parser.add_argument('--adjoint', type=eval, default=False, choices=[True, False])
parser.add_argument('--downsampling-method', type=str, default='conv', choices=['conv', 'res'])
parser.add_argument('--nepochs', type=int, default=100)
parser.add_argument('--data_aug', type=eval, default=False, choices=[True, False])
parser.add_argument('--lr', type=float, default=0.01)
parser.add_argument('--batch_size', type=int, default=128)
parser.add_argument('--test_batch_size', type=int, default=1000)

parser.add_argument('--save', type=str, default='./experiment1')
parser.add_argument('--debug', action='store_true')
parser.add_argument('--gpu', type=int, default=0)
args = parser.parse_args()

if args.adjoint:
    from torchdiffeq import odeint_adjoint as odeint
else:
    from torchdiffeq import odeint


def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


def norm(dim):
    return nn.BatchNorm2d(min(64, dim), dim)


class ConcatConv2d(nn.Module):

    def __init__(self, dim_in, dim_out, ksize=3, stride=1, padding=0, dilation=1, groups=1, bias=True, transpose=False):
        super(ConcatConv2d, self).__init__()
        module = nn.ConvTranspose2d if transpose else nn.Conv2d
        self._layer = module(
            dim_in + 1, dim_out, kernel_size=ksize, stride=stride, padding=padding, dilation=dilation, groups=groups,
            bias=bias
        )

    def forward(self, t, x):
        tt = torch.ones_like(x[:, :1, :, :]) * t
        ttx = torch.cat([tt, x], 1)
        return self._layer(ttx)


class ODEfunc(nn.Module):

    def __init__(self,dim):
        super(ODEfunc, self).__init__()
        self.fc1 = nn.Linear(dim,10)
        self.fc2 = nn.Linear(10, dim)
        self.nfe = 0

    def forward(self, t, x):
        self.nfe += 1
        out = self.fc1(x)
        out = self.fc2(out)
        return out


class ODEBlock(nn.Module):

    def __init__(self, odefunc):
        super(ODEBlock, self).__init__()
        self.odefunc = odefunc
        self.integration_time = torch.tensor([0, 1]).float()

    def forward(self, x):
        self.integration_time = self.integration_time.type_as(x)
        out = odeint(self.odefunc, x, self.integration_time, rtol=args.tol, atol=args.tol)
        return out[1]

    @property
    def nfe(self):
        return self.odefunc.nfe

    @nfe.setter
    def nfe(self, value):
        self.odefunc.nfe = value


class Flatten(nn.Module):

    def __init__(self):
        super(Flatten, self).__init__()

    def forward(self, x):
        shape = torch.prod(torch.tensor(x.shape[1:])).item()
        return x.view(-1, shape)


class RunningAverageMeter(object):
    """Computes and stores the average and current value"""

    def __init__(self, momentum=0.99):
        self.momentum = momentum
        self.reset()

    def reset(self):
        self.val = None
        self.avg = 0

    def update(self, val):
        if self.val is None:
            self.avg = val
        else:
            self.avg = self.avg * self.momentum + val * (1 - self.momentum)
        self.val = val


def get_data_loaders(data_aug=False, batch_size=32, test_batch_size=1000, perc=1.0):
    # Create Transforms
    transform = transforms.Compose([
        transforms.Resize((32, 32)),
        transforms.ToTensor(),
        transforms.Normalize((0.3403, 0.3121, 0.3214),
                             (0.2724, 0.2608, 0.2669))
    ])
    
    root_dir = 'home/manzand/Documents/MATLAB/NeuralODEs/gtrsb/data'
    
    # Create Datasets
    trainset = dataset.GTSRB(
        root_dir=root_dir, train=True,  transform=transform)
    testset = dataset.GTSRB(
        root_dir=root_dir, train=False,  transform=transform)
    
    # Load Datasets
    train_loader = torch.utils.data.DataLoader(
        trainset, batch_size=batch_size, shuffle=True, num_workers=2)
    train_eval_loader = torch.utils.data.DataLoader(
        trainset, batch_size=batch_size, shuffle=False, num_workers=2)
    test_loader = torch.utils.data.DataLoader(
        testset, batch_size=batch_size, shuffle=False, num_workers=2)

    return train_loader, test_loader, train_eval_loader


def inf_generator(iterable):
    """Allows training with DataLoaders in a single infinite loop:
        for i, (x, y) in enumerate(inf_generator(train_loader)):
    """
    iterator = iterable.__iter__()
    while True:
        try:
            yield iterator.__next__()
        except StopIteration:
            iterator = iterable.__iter__()


def learning_rate_with_decay(batch_size, batch_denom, batches_per_epoch, boundary_epochs, decay_rates):
    initial_learning_rate = args.lr * batch_size / batch_denom

    boundaries = [int(batches_per_epoch * epoch) for epoch in boundary_epochs]
    vals = [initial_learning_rate * decay for decay in decay_rates]

    def learning_rate_fn(itr):
        lt = [itr < b for b in boundaries] + [True]
        i = np.argmax(lt)
        return vals[i]

    return learning_rate_fn


def one_hot(x, K):
    return np.array(x[:, None] == np.arange(K)[None, :], dtype=int)


def accuracy(model, dataset_loader):
    total_correct = 0
    for x, y in dataset_loader:
        x = x.to(device)
        y = one_hot(np.array(y.numpy()), 10)

        target_class = np.argmax(y, axis=1)
        predicted_class = np.argmax(model(x).cpu().detach().numpy(), axis=1)
        total_correct += np.sum(predicted_class == target_class)
    return total_correct / len(dataset_loader.dataset)


def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)


def makedirs(dirname):
    if not os.path.exists(dirname):
        os.makedirs(dirname)


def get_logger(logpath, filepath, package_files=[], displaying=True, saving=True, debug=False):
    logger = logging.getLogger()
    if debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logger.setLevel(level)
    if saving:
        info_file_handler = logging.FileHandler(logpath, mode="a")
        info_file_handler.setLevel(level)
        logger.addHandler(info_file_handler)
    if displaying:
        console_handler = logging.StreamHandler()
        console_handler.setLevel(level)
        logger.addHandler(console_handler)
    logger.info(filepath)
    with open(filepath, "r") as f:
        logger.info(f.read())

    for f in package_files:
        logger.info(f)
        with open(f, "r") as package_f:
            logger.info(package_f.read())

    return logger


if __name__ == '__main__':

    makedirs(args.save)
    logger = get_logger(logpath=os.path.join(args.save, 'logs'), filepath=os.path.abspath(__file__))
    logger.info(args)

    device = torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')

    is_odenet = args.network == 'odenet'

    downsampling_layers = [
        nn.Conv2d(1, 16, 3, 1),
        norm(16),
        nn.ReLU(inplace=True),
        nn.Conv2d(16, 16, 4, 2, 1),
        norm(16),
        nn.ReLU(inplace=True),
        Flatten(),
    ]


    feature_layers = [ODEBlock(ODEfunc(2704))] 
    fc_layers = [nn.Linear(2704, 10)]

    model = nn.Sequential(*downsampling_layers, *feature_layers, *fc_layers).to(device)

    logger.info(model)
    logger.info('Number of parameters: {}'.format(count_parameters(model)))

    criterion = nn.CrossEntropyLoss().to(device)

    train_loader, test_loader, train_eval_loader = get_data_loaders(
        args.data_aug, args.batch_size, args.test_batch_size
    )

    data_gen = inf_generator(train_loader)
    batches_per_epoch = len(train_loader)

    lr_fn = learning_rate_with_decay(
        args.batch_size, batch_denom=128, batches_per_epoch=batches_per_epoch, boundary_epochs=[60, 100, 140],
        decay_rates=[1, 0.1, 0.01, 0.001]
    )

    optimizer = torch.optim.SGD(model.parameters(), lr=args.lr, momentum=0.9)

    best_acc = 0
    batch_time_meter = RunningAverageMeter()
    f_nfe_meter = RunningAverageMeter()
    b_nfe_meter = RunningAverageMeter()
    end = time.time()

    for itr in range(args.nepochs * batches_per_epoch):

        for param_group in optimizer.param_groups:
            param_group['lr'] = lr_fn(itr)

        optimizer.zero_grad()
        x, y = data_gen.__next__()
        x = x.to(device)
        y = y.to(device)
        logits = model(x)
        loss = criterion(logits, y)

        if is_odenet:
            nfe_forward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        loss.backward()
        optimizer.step()

        if is_odenet:
            nfe_backward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        batch_time_meter.update(time.time() - end)
        if is_odenet:
            f_nfe_meter.update(nfe_forward)
            b_nfe_meter.update(nfe_backward)
        end = time.time()

        if itr % batches_per_epoch == 0:
            with torch.no_grad():
                train_acc = accuracy(model, train_eval_loader)
                val_acc = accuracy(model, test_loader)
                if val_acc > best_acc:
                    torch.save({'state_dict': model.state_dict(), 'args': args}, os.path.join(args.save, 'model.pth'))
                    best_acc = val_acc
                if best_acc > 0.96:
                    break
                logger.info(
                    "Epoch {:04d} | Time {:.3f} ({:.3f}) | NFE-F {:.1f} | NFE-B {:.1f} | "
                    "Train Acc {:.4f} | Test Acc {:.4f}".format(
                        itr // batches_per_epoch, batch_time_meter.val, batch_time_meter.avg, f_nfe_meter.avg,
                        b_nfe_meter.avg, train_acc, val_acc
                    )
                )
    names = []
    params = []
    for name,param in model.named_parameters():
        names.append(name)
        params.append(param.detach().numpy())
    nn1 = dict({'Wb':params,'names':names})
    for name,param in model.named_buffers():
        names.append(name)
        params.append(param.detach().numpy())
    savemat("odecnn_gtsrb_small.mat",nn1)
Namespace(adjoint=False, batch_size=128, data_aug=False, debug=False, downsampling_method='conv', gpu=0, lr=0.01, nepochs=100, network='odenet', save='./experiment1', test_batch_size=1000, tol=0.001)
Namespace(adjoint=False, batch_size=128, data_aug=False, debug=False, downsampling_method='conv', gpu=0, lr=0.01, nepochs=100, network='odenet', save='./experiment1', test_batch_size=1000, tol=0.001)
Namespace(adjoint=False, batch_size=128, data_aug=False, debug=False, downsampling_method='conv', gpu=0, lr=0.01, nepochs=100, network='odenet', save='./experiment1', test_batch_size=1000, tol=0.001)
Sequential(
  (0): Conv2d(1, 16, kernel_size=(3, 3), stride=(1, 1))
  (1): BatchNorm2d(16, eps=16, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (4): BatchNorm2d(16, eps=16, momentum=0.1, affine=True, track_running_stats=True)
  (5): ReLU(inplace=True)
  (6): Flatten()
  (7): ODEBlock(
    (odefunc): ODEfunc(
      (fc1): Linear(in_features=2704, out_features=10, bias=True)
      (fc2): Linear(in_features=10, out_features=2704, bias=True)
    )
  )
  (8): Linear(in_features=2704, out_features=10, bias=True)
)
Sequential(
  (0): Conv2d(1, 16, kernel_size=(3, 3), stride=(1, 1))
  (1): BatchNorm2d(16, eps=16, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (4): BatchNorm2d(16, eps=16, momentum=0.1, affine=True, track_running_stats=True)
  (5): ReLU(inplace=True)
  (6): Flatten()
  (7): ODEBlock(
    (odefunc): ODEfunc(
      (fc1): Linear(in_features=2704, out_features=10, bias=True)
      (fc2): Linear(in_features=10, out_features=2704, bias=True)
    )
  )
  (8): Linear(in_features=2704, out_features=10, bias=True)
)
Sequential(
  (0): Conv2d(1, 16, kernel_size=(3, 3), stride=(1, 1))
  (1): BatchNorm2d(16, eps=16, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (4): BatchNorm2d(16, eps=16, momentum=0.1, affine=True, track_running_stats=True)
  (5): ReLU(inplace=True)
  (6): Flatten()
  (7): ODEBlock(
    (odefunc): ODEfunc(
      (fc1): Linear(in_features=2704, out_features=10, bias=True)
      (fc2): Linear(in_features=10, out_features=2704, bias=True)
    )
  )
  (8): Linear(in_features=2704, out_features=10, bias=True)
)
Number of parameters: 88180
Number of parameters: 88180
Number of parameters: 88180
/home/manzand/Documents/Python/neuralODE_examples/gtsrb/odenet_gtsrb_example_small.py
/home/manzand/Documents/Python/neuralODE_examples/gtsrb/odenet_gtsrb_example_small.py
/home/manzand/Documents/Python/neuralODE_examples/gtsrb/odenet_gtsrb_example_small.py
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb  4 09:04:31 2021

@author: manzand
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 19 15:10:31 2021

@author: manzand
"""

import os
import argparse
import logging
import time
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms
from scipy.io import savemat
from readTrafficSigns import readTrafficSigns


parser = argparse.ArgumentParser()
parser.add_argument('--network', type=str, choices=['resnet', 'odenet'], default='odenet')
parser.add_argument('--tol', type=float, default=1e-3)
parser.add_argument('--adjoint', type=eval, default=False, choices=[True, False])
parser.add_argument('--downsampling-method', type=str, default='conv', choices=['conv', 'res'])
parser.add_argument('--nepochs', type=int, default=100)
parser.add_argument('--data_aug', type=eval, default=False, choices=[True, False])
parser.add_argument('--lr', type=float, default=0.01)
parser.add_argument('--batch_size', type=int, default=128)
parser.add_argument('--test_batch_size', type=int, default=1000)

parser.add_argument('--save', type=str, default='./experiment1')
parser.add_argument('--debug', action='store_true')
parser.add_argument('--gpu', type=int, default=0)
args = parser.parse_args()

if args.adjoint:
    from torchdiffeq import odeint_adjoint as odeint
else:
    from torchdiffeq import odeint


def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


def norm(dim):
    return nn.BatchNorm2d(min(64, dim), dim)


class ConcatConv2d(nn.Module):

    def __init__(self, dim_in, dim_out, ksize=3, stride=1, padding=0, dilation=1, groups=1, bias=True, transpose=False):
        super(ConcatConv2d, self).__init__()
        module = nn.ConvTranspose2d if transpose else nn.Conv2d
        self._layer = module(
            dim_in + 1, dim_out, kernel_size=ksize, stride=stride, padding=padding, dilation=dilation, groups=groups,
            bias=bias
        )

    def forward(self, t, x):
        tt = torch.ones_like(x[:, :1, :, :]) * t
        ttx = torch.cat([tt, x], 1)
        return self._layer(ttx)


class ODEfunc(nn.Module):

    def __init__(self,dim):
        super(ODEfunc, self).__init__()
        self.fc1 = nn.Linear(dim,10)
        self.fc2 = nn.Linear(10, dim)
        self.nfe = 0

    def forward(self, t, x):
        self.nfe += 1
        out = self.fc1(x)
        out = self.fc2(out)
        return out


class ODEBlock(nn.Module):

    def __init__(self, odefunc):
        super(ODEBlock, self).__init__()
        self.odefunc = odefunc
        self.integration_time = torch.tensor([0, 1]).float()

    def forward(self, x):
        self.integration_time = self.integration_time.type_as(x)
        out = odeint(self.odefunc, x, self.integration_time, rtol=args.tol, atol=args.tol)
        return out[1]

    @property
    def nfe(self):
        return self.odefunc.nfe

    @nfe.setter
    def nfe(self, value):
        self.odefunc.nfe = value


class Flatten(nn.Module):

    def __init__(self):
        super(Flatten, self).__init__()

    def forward(self, x):
        shape = torch.prod(torch.tensor(x.shape[1:])).item()
        return x.view(-1, shape)


class RunningAverageMeter(object):
    """Computes and stores the average and current value"""

    def __init__(self, momentum=0.99):
        self.momentum = momentum
        self.reset()

    def reset(self):
        self.val = None
        self.avg = 0

    def update(self, val):
        if self.val is None:
            self.avg = val
        else:
            self.avg = self.avg * self.momentum + val * (1 - self.momentum)
        self.val = val


def get_data_loaders(data_aug=False, batch_size=32, test_batch_size=1000, perc=1.0):
    # Create Transforms
    transform = transforms.Compose([
        transforms.Resize((32, 32)),
        transforms.ToTensor(),
        transforms.Normalize((0.3403, 0.3121, 0.3214),
                             (0.2724, 0.2608, 0.2669))
    ])
    
    root_dir1 = 'home/manzand/Documents/MATLAB/NeuralODEs/gtrsb/data/GTSRB/Final_Training'
    root_dir2 = 'home/manzand/Documents/MATLAB/NeuralODEs/gtrsb/data/GTSRB/Final_Test'

    
    # Create Datasets
    trainset = readTrafficSigns(root_dir1)
    testset = readTrafficSigns(root_dir2)

    
    # Load Datasets
    train_loader = torch.utils.data.DataLoader(
        trainset, batch_size=batch_size, shuffle=True, num_workers=2)
    train_eval_loader = torch.utils.data.DataLoader(
        trainset, batch_size=batch_size, shuffle=False, num_workers=2)
    test_loader = torch.utils.data.DataLoader(
        testset, batch_size=batch_size, shuffle=False, num_workers=2)

    return train_loader, test_loader, train_eval_loader


def inf_generator(iterable):
    """Allows training with DataLoaders in a single infinite loop:
        for i, (x, y) in enumerate(inf_generator(train_loader)):
    """
    iterator = iterable.__iter__()
    while True:
        try:
            yield iterator.__next__()
        except StopIteration:
            iterator = iterable.__iter__()


def learning_rate_with_decay(batch_size, batch_denom, batches_per_epoch, boundary_epochs, decay_rates):
    initial_learning_rate = args.lr * batch_size / batch_denom

    boundaries = [int(batches_per_epoch * epoch) for epoch in boundary_epochs]
    vals = [initial_learning_rate * decay for decay in decay_rates]

    def learning_rate_fn(itr):
        lt = [itr < b for b in boundaries] + [True]
        i = np.argmax(lt)
        return vals[i]

    return learning_rate_fn


def one_hot(x, K):
    return np.array(x[:, None] == np.arange(K)[None, :], dtype=int)


def accuracy(model, dataset_loader):
    total_correct = 0
    for x, y in dataset_loader:
        x = x.to(device)
        y = one_hot(np.array(y.numpy()), 10)

        target_class = np.argmax(y, axis=1)
        predicted_class = np.argmax(model(x).cpu().detach().numpy(), axis=1)
        total_correct += np.sum(predicted_class == target_class)
    return total_correct / len(dataset_loader.dataset)


def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)


def makedirs(dirname):
    if not os.path.exists(dirname):
        os.makedirs(dirname)


def get_logger(logpath, filepath, package_files=[], displaying=True, saving=True, debug=False):
    logger = logging.getLogger()
    if debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logger.setLevel(level)
    if saving:
        info_file_handler = logging.FileHandler(logpath, mode="a")
        info_file_handler.setLevel(level)
        logger.addHandler(info_file_handler)
    if displaying:
        console_handler = logging.StreamHandler()
        console_handler.setLevel(level)
        logger.addHandler(console_handler)
    logger.info(filepath)
    with open(filepath, "r") as f:
        logger.info(f.read())

    for f in package_files:
        logger.info(f)
        with open(f, "r") as package_f:
            logger.info(package_f.read())

    return logger


if __name__ == '__main__':

    makedirs(args.save)
    logger = get_logger(logpath=os.path.join(args.save, 'logs'), filepath=os.path.abspath(__file__))
    logger.info(args)

    device = torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')

    is_odenet = args.network == 'odenet'

    downsampling_layers = [
        nn.Conv2d(1, 16, 3, 1),
        norm(16),
        nn.ReLU(inplace=True),
        nn.Conv2d(16, 16, 4, 2, 1),
        norm(16),
        nn.ReLU(inplace=True),
        Flatten(),
    ]


    feature_layers = [ODEBlock(ODEfunc(2704))] 
    fc_layers = [nn.Linear(2704, 10)]

    model = nn.Sequential(*downsampling_layers, *feature_layers, *fc_layers).to(device)

    logger.info(model)
    logger.info('Number of parameters: {}'.format(count_parameters(model)))

    criterion = nn.CrossEntropyLoss().to(device)

    train_loader, test_loader, train_eval_loader = get_data_loaders(
        args.data_aug, args.batch_size, args.test_batch_size
    )

    data_gen = inf_generator(train_loader)
    batches_per_epoch = len(train_loader)

    lr_fn = learning_rate_with_decay(
        args.batch_size, batch_denom=128, batches_per_epoch=batches_per_epoch, boundary_epochs=[60, 100, 140],
        decay_rates=[1, 0.1, 0.01, 0.001]
    )

    optimizer = torch.optim.SGD(model.parameters(), lr=args.lr, momentum=0.9)

    best_acc = 0
    batch_time_meter = RunningAverageMeter()
    f_nfe_meter = RunningAverageMeter()
    b_nfe_meter = RunningAverageMeter()
    end = time.time()

    for itr in range(args.nepochs * batches_per_epoch):

        for param_group in optimizer.param_groups:
            param_group['lr'] = lr_fn(itr)

        optimizer.zero_grad()
        x, y = data_gen.__next__()
        x = x.to(device)
        y = y.to(device)
        logits = model(x)
        loss = criterion(logits, y)

        if is_odenet:
            nfe_forward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        loss.backward()
        optimizer.step()

        if is_odenet:
            nfe_backward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        batch_time_meter.update(time.time() - end)
        if is_odenet:
            f_nfe_meter.update(nfe_forward)
            b_nfe_meter.update(nfe_backward)
        end = time.time()

        if itr % batches_per_epoch == 0:
            with torch.no_grad():
                train_acc = accuracy(model, train_eval_loader)
                val_acc = accuracy(model, test_loader)
                if val_acc > best_acc:
                    torch.save({'state_dict': model.state_dict(), 'args': args}, os.path.join(args.save, 'model.pth'))
                    best_acc = val_acc
                if best_acc > 0.96:
                    break
                logger.info(
                    "Epoch {:04d} | Time {:.3f} ({:.3f}) | NFE-F {:.1f} | NFE-B {:.1f} | "
                    "Train Acc {:.4f} | Test Acc {:.4f}".format(
                        itr // batches_per_epoch, batch_time_meter.val, batch_time_meter.avg, f_nfe_meter.avg,
                        b_nfe_meter.avg, train_acc, val_acc
                    )
                )
    names = []
    params = []
    for name,param in model.named_parameters():
        names.append(name)
        params.append(param.detach().numpy())
    nn1 = dict({'Wb':params,'names':names})
    for name,param in model.named_buffers():
        names.append(name)
        params.append(param.detach().numpy())
    savemat("odecnn_gtsrb_small.mat",nn1)
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb  4 09:04:31 2021

@author: manzand
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 19 15:10:31 2021

@author: manzand
"""

import os
import argparse
import logging
import time
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms
from scipy.io import savemat
from readTrafficSigns import readTrafficSigns


parser = argparse.ArgumentParser()
parser.add_argument('--network', type=str, choices=['resnet', 'odenet'], default='odenet')
parser.add_argument('--tol', type=float, default=1e-3)
parser.add_argument('--adjoint', type=eval, default=False, choices=[True, False])
parser.add_argument('--downsampling-method', type=str, default='conv', choices=['conv', 'res'])
parser.add_argument('--nepochs', type=int, default=100)
parser.add_argument('--data_aug', type=eval, default=False, choices=[True, False])
parser.add_argument('--lr', type=float, default=0.01)
parser.add_argument('--batch_size', type=int, default=128)
parser.add_argument('--test_batch_size', type=int, default=1000)

parser.add_argument('--save', type=str, default='./experiment1')
parser.add_argument('--debug', action='store_true')
parser.add_argument('--gpu', type=int, default=0)
args = parser.parse_args()

if args.adjoint:
    from torchdiffeq import odeint_adjoint as odeint
else:
    from torchdiffeq import odeint


def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


def norm(dim):
    return nn.BatchNorm2d(min(64, dim), dim)


class ConcatConv2d(nn.Module):

    def __init__(self, dim_in, dim_out, ksize=3, stride=1, padding=0, dilation=1, groups=1, bias=True, transpose=False):
        super(ConcatConv2d, self).__init__()
        module = nn.ConvTranspose2d if transpose else nn.Conv2d
        self._layer = module(
            dim_in + 1, dim_out, kernel_size=ksize, stride=stride, padding=padding, dilation=dilation, groups=groups,
            bias=bias
        )

    def forward(self, t, x):
        tt = torch.ones_like(x[:, :1, :, :]) * t
        ttx = torch.cat([tt, x], 1)
        return self._layer(ttx)


class ODEfunc(nn.Module):

    def __init__(self,dim):
        super(ODEfunc, self).__init__()
        self.fc1 = nn.Linear(dim,10)
        self.fc2 = nn.Linear(10, dim)
        self.nfe = 0

    def forward(self, t, x):
        self.nfe += 1
        out = self.fc1(x)
        out = self.fc2(out)
        return out


class ODEBlock(nn.Module):

    def __init__(self, odefunc):
        super(ODEBlock, self).__init__()
        self.odefunc = odefunc
        self.integration_time = torch.tensor([0, 1]).float()

    def forward(self, x):
        self.integration_time = self.integration_time.type_as(x)
        out = odeint(self.odefunc, x, self.integration_time, rtol=args.tol, atol=args.tol)
        return out[1]

    @property
    def nfe(self):
        return self.odefunc.nfe

    @nfe.setter
    def nfe(self, value):
        self.odefunc.nfe = value


class Flatten(nn.Module):

    def __init__(self):
        super(Flatten, self).__init__()

    def forward(self, x):
        shape = torch.prod(torch.tensor(x.shape[1:])).item()
        return x.view(-1, shape)


class RunningAverageMeter(object):
    """Computes and stores the average and current value"""

    def __init__(self, momentum=0.99):
        self.momentum = momentum
        self.reset()

    def reset(self):
        self.val = None
        self.avg = 0

    def update(self, val):
        if self.val is None:
            self.avg = val
        else:
            self.avg = self.avg * self.momentum + val * (1 - self.momentum)
        self.val = val


def get_data_loaders(data_aug=False, batch_size=32, test_batch_size=1000, perc=1.0):
    # Create Transforms
    transform = transforms.Compose([
        transforms.Resize((32, 32)),
        transforms.ToTensor(),
        transforms.Normalize((0.3403, 0.3121, 0.3214),
                             (0.2724, 0.2608, 0.2669))
    ])
    
    root_dir1 = 'home/manzand/Documents/MATLAB/NeuralODEs/gtrsb/data/GTSRB/Final_Training'
    root_dir2 = 'home/manzand/Documents/MATLAB/NeuralODEs/gtrsb/data/GTSRB/Final_Test'

    
    # Create Datasets
    trainset = readTrafficSigns(root_dir1)
    testset = readTrafficSigns(root_dir2)

    
    # Load Datasets
    train_loader = torch.utils.data.DataLoader(
        trainset, batch_size=batch_size, shuffle=True, num_workers=2)
    train_eval_loader = torch.utils.data.DataLoader(
        trainset, batch_size=batch_size, shuffle=False, num_workers=2)
    test_loader = torch.utils.data.DataLoader(
        testset, batch_size=batch_size, shuffle=False, num_workers=2)

    return train_loader, test_loader, train_eval_loader


def inf_generator(iterable):
    """Allows training with DataLoaders in a single infinite loop:
        for i, (x, y) in enumerate(inf_generator(train_loader)):
    """
    iterator = iterable.__iter__()
    while True:
        try:
            yield iterator.__next__()
        except StopIteration:
            iterator = iterable.__iter__()


def learning_rate_with_decay(batch_size, batch_denom, batches_per_epoch, boundary_epochs, decay_rates):
    initial_learning_rate = args.lr * batch_size / batch_denom

    boundaries = [int(batches_per_epoch * epoch) for epoch in boundary_epochs]
    vals = [initial_learning_rate * decay for decay in decay_rates]

    def learning_rate_fn(itr):
        lt = [itr < b for b in boundaries] + [True]
        i = np.argmax(lt)
        return vals[i]

    return learning_rate_fn


def one_hot(x, K):
    return np.array(x[:, None] == np.arange(K)[None, :], dtype=int)


def accuracy(model, dataset_loader):
    total_correct = 0
    for x, y in dataset_loader:
        x = x.to(device)
        y = one_hot(np.array(y.numpy()), 10)

        target_class = np.argmax(y, axis=1)
        predicted_class = np.argmax(model(x).cpu().detach().numpy(), axis=1)
        total_correct += np.sum(predicted_class == target_class)
    return total_correct / len(dataset_loader.dataset)


def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)


def makedirs(dirname):
    if not os.path.exists(dirname):
        os.makedirs(dirname)


def get_logger(logpath, filepath, package_files=[], displaying=True, saving=True, debug=False):
    logger = logging.getLogger()
    if debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logger.setLevel(level)
    if saving:
        info_file_handler = logging.FileHandler(logpath, mode="a")
        info_file_handler.setLevel(level)
        logger.addHandler(info_file_handler)
    if displaying:
        console_handler = logging.StreamHandler()
        console_handler.setLevel(level)
        logger.addHandler(console_handler)
    logger.info(filepath)
    with open(filepath, "r") as f:
        logger.info(f.read())

    for f in package_files:
        logger.info(f)
        with open(f, "r") as package_f:
            logger.info(package_f.read())

    return logger


if __name__ == '__main__':

    makedirs(args.save)
    logger = get_logger(logpath=os.path.join(args.save, 'logs'), filepath=os.path.abspath(__file__))
    logger.info(args)

    device = torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')

    is_odenet = args.network == 'odenet'

    downsampling_layers = [
        nn.Conv2d(1, 16, 3, 1),
        norm(16),
        nn.ReLU(inplace=True),
        nn.Conv2d(16, 16, 4, 2, 1),
        norm(16),
        nn.ReLU(inplace=True),
        Flatten(),
    ]


    feature_layers = [ODEBlock(ODEfunc(2704))] 
    fc_layers = [nn.Linear(2704, 10)]

    model = nn.Sequential(*downsampling_layers, *feature_layers, *fc_layers).to(device)

    logger.info(model)
    logger.info('Number of parameters: {}'.format(count_parameters(model)))

    criterion = nn.CrossEntropyLoss().to(device)

    train_loader, test_loader, train_eval_loader = get_data_loaders(
        args.data_aug, args.batch_size, args.test_batch_size
    )

    data_gen = inf_generator(train_loader)
    batches_per_epoch = len(train_loader)

    lr_fn = learning_rate_with_decay(
        args.batch_size, batch_denom=128, batches_per_epoch=batches_per_epoch, boundary_epochs=[60, 100, 140],
        decay_rates=[1, 0.1, 0.01, 0.001]
    )

    optimizer = torch.optim.SGD(model.parameters(), lr=args.lr, momentum=0.9)

    best_acc = 0
    batch_time_meter = RunningAverageMeter()
    f_nfe_meter = RunningAverageMeter()
    b_nfe_meter = RunningAverageMeter()
    end = time.time()

    for itr in range(args.nepochs * batches_per_epoch):

        for param_group in optimizer.param_groups:
            param_group['lr'] = lr_fn(itr)

        optimizer.zero_grad()
        x, y = data_gen.__next__()
        x = x.to(device)
        y = y.to(device)
        logits = model(x)
        loss = criterion(logits, y)

        if is_odenet:
            nfe_forward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        loss.backward()
        optimizer.step()

        if is_odenet:
            nfe_backward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        batch_time_meter.update(time.time() - end)
        if is_odenet:
            f_nfe_meter.update(nfe_forward)
            b_nfe_meter.update(nfe_backward)
        end = time.time()

        if itr % batches_per_epoch == 0:
            with torch.no_grad():
                train_acc = accuracy(model, train_eval_loader)
                val_acc = accuracy(model, test_loader)
                if val_acc > best_acc:
                    torch.save({'state_dict': model.state_dict(), 'args': args}, os.path.join(args.save, 'model.pth'))
                    best_acc = val_acc
                if best_acc > 0.96:
                    break
                logger.info(
                    "Epoch {:04d} | Time {:.3f} ({:.3f}) | NFE-F {:.1f} | NFE-B {:.1f} | "
                    "Train Acc {:.4f} | Test Acc {:.4f}".format(
                        itr // batches_per_epoch, batch_time_meter.val, batch_time_meter.avg, f_nfe_meter.avg,
                        b_nfe_meter.avg, train_acc, val_acc
                    )
                )
    names = []
    params = []
    for name,param in model.named_parameters():
        names.append(name)
        params.append(param.detach().numpy())
    nn1 = dict({'Wb':params,'names':names})
    for name,param in model.named_buffers():
        names.append(name)
        params.append(param.detach().numpy())
    savemat("odecnn_gtsrb_small.mat",nn1)
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb  4 09:04:31 2021

@author: manzand
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 19 15:10:31 2021

@author: manzand
"""

import os
import argparse
import logging
import time
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms
from scipy.io import savemat
from readTrafficSigns import readTrafficSigns


parser = argparse.ArgumentParser()
parser.add_argument('--network', type=str, choices=['resnet', 'odenet'], default='odenet')
parser.add_argument('--tol', type=float, default=1e-3)
parser.add_argument('--adjoint', type=eval, default=False, choices=[True, False])
parser.add_argument('--downsampling-method', type=str, default='conv', choices=['conv', 'res'])
parser.add_argument('--nepochs', type=int, default=100)
parser.add_argument('--data_aug', type=eval, default=False, choices=[True, False])
parser.add_argument('--lr', type=float, default=0.01)
parser.add_argument('--batch_size', type=int, default=128)
parser.add_argument('--test_batch_size', type=int, default=1000)

parser.add_argument('--save', type=str, default='./experiment1')
parser.add_argument('--debug', action='store_true')
parser.add_argument('--gpu', type=int, default=0)
args = parser.parse_args()

if args.adjoint:
    from torchdiffeq import odeint_adjoint as odeint
else:
    from torchdiffeq import odeint


def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


def norm(dim):
    return nn.BatchNorm2d(min(64, dim), dim)


class ConcatConv2d(nn.Module):

    def __init__(self, dim_in, dim_out, ksize=3, stride=1, padding=0, dilation=1, groups=1, bias=True, transpose=False):
        super(ConcatConv2d, self).__init__()
        module = nn.ConvTranspose2d if transpose else nn.Conv2d
        self._layer = module(
            dim_in + 1, dim_out, kernel_size=ksize, stride=stride, padding=padding, dilation=dilation, groups=groups,
            bias=bias
        )

    def forward(self, t, x):
        tt = torch.ones_like(x[:, :1, :, :]) * t
        ttx = torch.cat([tt, x], 1)
        return self._layer(ttx)


class ODEfunc(nn.Module):

    def __init__(self,dim):
        super(ODEfunc, self).__init__()
        self.fc1 = nn.Linear(dim,10)
        self.fc2 = nn.Linear(10, dim)
        self.nfe = 0

    def forward(self, t, x):
        self.nfe += 1
        out = self.fc1(x)
        out = self.fc2(out)
        return out


class ODEBlock(nn.Module):

    def __init__(self, odefunc):
        super(ODEBlock, self).__init__()
        self.odefunc = odefunc
        self.integration_time = torch.tensor([0, 1]).float()

    def forward(self, x):
        self.integration_time = self.integration_time.type_as(x)
        out = odeint(self.odefunc, x, self.integration_time, rtol=args.tol, atol=args.tol)
        return out[1]

    @property
    def nfe(self):
        return self.odefunc.nfe

    @nfe.setter
    def nfe(self, value):
        self.odefunc.nfe = value


class Flatten(nn.Module):

    def __init__(self):
        super(Flatten, self).__init__()

    def forward(self, x):
        shape = torch.prod(torch.tensor(x.shape[1:])).item()
        return x.view(-1, shape)


class RunningAverageMeter(object):
    """Computes and stores the average and current value"""

    def __init__(self, momentum=0.99):
        self.momentum = momentum
        self.reset()

    def reset(self):
        self.val = None
        self.avg = 0

    def update(self, val):
        if self.val is None:
            self.avg = val
        else:
            self.avg = self.avg * self.momentum + val * (1 - self.momentum)
        self.val = val


def get_data_loaders(data_aug=False, batch_size=32, test_batch_size=1000, perc=1.0):
    # Create Transforms
    transform = transforms.Compose([
        transforms.Resize((32, 32)),
        transforms.ToTensor(),
        transforms.Normalize((0.3403, 0.3121, 0.3214),
                             (0.2724, 0.2608, 0.2669))
    ])
    
    root_dir1 = 'home/manzand/Documents/MATLAB/NeuralODEs/gtrsb/data/GTSRB/Final_Training'
    root_dir2 = 'home/manzand/Documents/MATLAB/NeuralODEs/gtrsb/data/GTSRB/Final_Test'

    
    # Create Datasets
    trainset = readTrafficSigns(root_dir1)
    testset = readTrafficSigns(root_dir2)

    
    # Load Datasets
    train_loader = torch.utils.data.DataLoader(
        trainset, batch_size=batch_size, shuffle=True, num_workers=2)
    train_eval_loader = torch.utils.data.DataLoader(
        trainset, batch_size=batch_size, shuffle=False, num_workers=2)
    test_loader = torch.utils.data.DataLoader(
        testset, batch_size=batch_size, shuffle=False, num_workers=2)

    return train_loader, test_loader, train_eval_loader


def inf_generator(iterable):
    """Allows training with DataLoaders in a single infinite loop:
        for i, (x, y) in enumerate(inf_generator(train_loader)):
    """
    iterator = iterable.__iter__()
    while True:
        try:
            yield iterator.__next__()
        except StopIteration:
            iterator = iterable.__iter__()


def learning_rate_with_decay(batch_size, batch_denom, batches_per_epoch, boundary_epochs, decay_rates):
    initial_learning_rate = args.lr * batch_size / batch_denom

    boundaries = [int(batches_per_epoch * epoch) for epoch in boundary_epochs]
    vals = [initial_learning_rate * decay for decay in decay_rates]

    def learning_rate_fn(itr):
        lt = [itr < b for b in boundaries] + [True]
        i = np.argmax(lt)
        return vals[i]

    return learning_rate_fn


def one_hot(x, K):
    return np.array(x[:, None] == np.arange(K)[None, :], dtype=int)


def accuracy(model, dataset_loader):
    total_correct = 0
    for x, y in dataset_loader:
        x = x.to(device)
        y = one_hot(np.array(y.numpy()), 10)

        target_class = np.argmax(y, axis=1)
        predicted_class = np.argmax(model(x).cpu().detach().numpy(), axis=1)
        total_correct += np.sum(predicted_class == target_class)
    return total_correct / len(dataset_loader.dataset)


def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)


def makedirs(dirname):
    if not os.path.exists(dirname):
        os.makedirs(dirname)


def get_logger(logpath, filepath, package_files=[], displaying=True, saving=True, debug=False):
    logger = logging.getLogger()
    if debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logger.setLevel(level)
    if saving:
        info_file_handler = logging.FileHandler(logpath, mode="a")
        info_file_handler.setLevel(level)
        logger.addHandler(info_file_handler)
    if displaying:
        console_handler = logging.StreamHandler()
        console_handler.setLevel(level)
        logger.addHandler(console_handler)
    logger.info(filepath)
    with open(filepath, "r") as f:
        logger.info(f.read())

    for f in package_files:
        logger.info(f)
        with open(f, "r") as package_f:
            logger.info(package_f.read())

    return logger


if __name__ == '__main__':

    makedirs(args.save)
    logger = get_logger(logpath=os.path.join(args.save, 'logs'), filepath=os.path.abspath(__file__))
    logger.info(args)

    device = torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')

    is_odenet = args.network == 'odenet'

    downsampling_layers = [
        nn.Conv2d(1, 16, 3, 1),
        norm(16),
        nn.ReLU(inplace=True),
        nn.Conv2d(16, 16, 4, 2, 1),
        norm(16),
        nn.ReLU(inplace=True),
        Flatten(),
    ]


    feature_layers = [ODEBlock(ODEfunc(2704))] 
    fc_layers = [nn.Linear(2704, 10)]

    model = nn.Sequential(*downsampling_layers, *feature_layers, *fc_layers).to(device)

    logger.info(model)
    logger.info('Number of parameters: {}'.format(count_parameters(model)))

    criterion = nn.CrossEntropyLoss().to(device)

    train_loader, test_loader, train_eval_loader = get_data_loaders(
        args.data_aug, args.batch_size, args.test_batch_size
    )

    data_gen = inf_generator(train_loader)
    batches_per_epoch = len(train_loader)

    lr_fn = learning_rate_with_decay(
        args.batch_size, batch_denom=128, batches_per_epoch=batches_per_epoch, boundary_epochs=[60, 100, 140],
        decay_rates=[1, 0.1, 0.01, 0.001]
    )

    optimizer = torch.optim.SGD(model.parameters(), lr=args.lr, momentum=0.9)

    best_acc = 0
    batch_time_meter = RunningAverageMeter()
    f_nfe_meter = RunningAverageMeter()
    b_nfe_meter = RunningAverageMeter()
    end = time.time()

    for itr in range(args.nepochs * batches_per_epoch):

        for param_group in optimizer.param_groups:
            param_group['lr'] = lr_fn(itr)

        optimizer.zero_grad()
        x, y = data_gen.__next__()
        x = x.to(device)
        y = y.to(device)
        logits = model(x)
        loss = criterion(logits, y)

        if is_odenet:
            nfe_forward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        loss.backward()
        optimizer.step()

        if is_odenet:
            nfe_backward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        batch_time_meter.update(time.time() - end)
        if is_odenet:
            f_nfe_meter.update(nfe_forward)
            b_nfe_meter.update(nfe_backward)
        end = time.time()

        if itr % batches_per_epoch == 0:
            with torch.no_grad():
                train_acc = accuracy(model, train_eval_loader)
                val_acc = accuracy(model, test_loader)
                if val_acc > best_acc:
                    torch.save({'state_dict': model.state_dict(), 'args': args}, os.path.join(args.save, 'model.pth'))
                    best_acc = val_acc
                if best_acc > 0.96:
                    break
                logger.info(
                    "Epoch {:04d} | Time {:.3f} ({:.3f}) | NFE-F {:.1f} | NFE-B {:.1f} | "
                    "Train Acc {:.4f} | Test Acc {:.4f}".format(
                        itr // batches_per_epoch, batch_time_meter.val, batch_time_meter.avg, f_nfe_meter.avg,
                        b_nfe_meter.avg, train_acc, val_acc
                    )
                )
    names = []
    params = []
    for name,param in model.named_parameters():
        names.append(name)
        params.append(param.detach().numpy())
    nn1 = dict({'Wb':params,'names':names})
    for name,param in model.named_buffers():
        names.append(name)
        params.append(param.detach().numpy())
    savemat("odecnn_gtsrb_small.mat",nn1)
Namespace(adjoint=False, batch_size=128, data_aug=False, debug=False, downsampling_method='conv', gpu=0, lr=0.01, nepochs=100, network='odenet', save='./experiment1', test_batch_size=1000, tol=0.001)
Namespace(adjoint=False, batch_size=128, data_aug=False, debug=False, downsampling_method='conv', gpu=0, lr=0.01, nepochs=100, network='odenet', save='./experiment1', test_batch_size=1000, tol=0.001)
Namespace(adjoint=False, batch_size=128, data_aug=False, debug=False, downsampling_method='conv', gpu=0, lr=0.01, nepochs=100, network='odenet', save='./experiment1', test_batch_size=1000, tol=0.001)
Sequential(
  (0): Conv2d(1, 16, kernel_size=(3, 3), stride=(1, 1))
  (1): BatchNorm2d(16, eps=16, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (4): BatchNorm2d(16, eps=16, momentum=0.1, affine=True, track_running_stats=True)
  (5): ReLU(inplace=True)
  (6): Flatten()
  (7): ODEBlock(
    (odefunc): ODEfunc(
      (fc1): Linear(in_features=2704, out_features=10, bias=True)
      (fc2): Linear(in_features=10, out_features=2704, bias=True)
    )
  )
  (8): Linear(in_features=2704, out_features=10, bias=True)
)
Sequential(
  (0): Conv2d(1, 16, kernel_size=(3, 3), stride=(1, 1))
  (1): BatchNorm2d(16, eps=16, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (4): BatchNorm2d(16, eps=16, momentum=0.1, affine=True, track_running_stats=True)
  (5): ReLU(inplace=True)
  (6): Flatten()
  (7): ODEBlock(
    (odefunc): ODEfunc(
      (fc1): Linear(in_features=2704, out_features=10, bias=True)
      (fc2): Linear(in_features=10, out_features=2704, bias=True)
    )
  )
  (8): Linear(in_features=2704, out_features=10, bias=True)
)
Sequential(
  (0): Conv2d(1, 16, kernel_size=(3, 3), stride=(1, 1))
  (1): BatchNorm2d(16, eps=16, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (4): BatchNorm2d(16, eps=16, momentum=0.1, affine=True, track_running_stats=True)
  (5): ReLU(inplace=True)
  (6): Flatten()
  (7): ODEBlock(
    (odefunc): ODEfunc(
      (fc1): Linear(in_features=2704, out_features=10, bias=True)
      (fc2): Linear(in_features=10, out_features=2704, bias=True)
    )
  )
  (8): Linear(in_features=2704, out_features=10, bias=True)
)
Number of parameters: 88180
Number of parameters: 88180
Number of parameters: 88180
/home/manzand/Documents/Python/neuralODE_examples/gtsrb/odenet_gtsrb_example_small.py
/home/manzand/Documents/Python/neuralODE_examples/gtsrb/odenet_gtsrb_example_small.py
/home/manzand/Documents/Python/neuralODE_examples/gtsrb/odenet_gtsrb_example_small.py
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb  4 09:04:31 2021

@author: manzand
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 19 15:10:31 2021

@author: manzand
"""

import os
import argparse
import logging
import time
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms
from scipy.io import savemat
import gtsrb_dataset as dataset


parser = argparse.ArgumentParser()
parser.add_argument('--network', type=str, choices=['resnet', 'odenet'], default='odenet')
parser.add_argument('--tol', type=float, default=1e-3)
parser.add_argument('--adjoint', type=eval, default=False, choices=[True, False])
parser.add_argument('--downsampling-method', type=str, default='conv', choices=['conv', 'res'])
parser.add_argument('--nepochs', type=int, default=100)
parser.add_argument('--data_aug', type=eval, default=False, choices=[True, False])
parser.add_argument('--lr', type=float, default=0.01)
parser.add_argument('--batch_size', type=int, default=128)
parser.add_argument('--test_batch_size', type=int, default=1000)

parser.add_argument('--save', type=str, default='./experiment1')
parser.add_argument('--debug', action='store_true')
parser.add_argument('--gpu', type=int, default=0)
args = parser.parse_args()

if args.adjoint:
    from torchdiffeq import odeint_adjoint as odeint
else:
    from torchdiffeq import odeint


def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


def norm(dim):
    return nn.BatchNorm2d(min(64, dim), dim)


class ConcatConv2d(nn.Module):

    def __init__(self, dim_in, dim_out, ksize=3, stride=1, padding=0, dilation=1, groups=1, bias=True, transpose=False):
        super(ConcatConv2d, self).__init__()
        module = nn.ConvTranspose2d if transpose else nn.Conv2d
        self._layer = module(
            dim_in + 1, dim_out, kernel_size=ksize, stride=stride, padding=padding, dilation=dilation, groups=groups,
            bias=bias
        )

    def forward(self, t, x):
        tt = torch.ones_like(x[:, :1, :, :]) * t
        ttx = torch.cat([tt, x], 1)
        return self._layer(ttx)


class ODEfunc(nn.Module):

    def __init__(self,dim):
        super(ODEfunc, self).__init__()
        self.fc1 = nn.Linear(dim,10)
        self.fc2 = nn.Linear(10, dim)
        self.nfe = 0

    def forward(self, t, x):
        self.nfe += 1
        out = self.fc1(x)
        out = self.fc2(out)
        return out


class ODEBlock(nn.Module):

    def __init__(self, odefunc):
        super(ODEBlock, self).__init__()
        self.odefunc = odefunc
        self.integration_time = torch.tensor([0, 1]).float()

    def forward(self, x):
        self.integration_time = self.integration_time.type_as(x)
        out = odeint(self.odefunc, x, self.integration_time, rtol=args.tol, atol=args.tol)
        return out[1]

    @property
    def nfe(self):
        return self.odefunc.nfe

    @nfe.setter
    def nfe(self, value):
        self.odefunc.nfe = value


class Flatten(nn.Module):

    def __init__(self):
        super(Flatten, self).__init__()

    def forward(self, x):
        shape = torch.prod(torch.tensor(x.shape[1:])).item()
        return x.view(-1, shape)


class RunningAverageMeter(object):
    """Computes and stores the average and current value"""

    def __init__(self, momentum=0.99):
        self.momentum = momentum
        self.reset()

    def reset(self):
        self.val = None
        self.avg = 0

    def update(self, val):
        if self.val is None:
            self.avg = val
        else:
            self.avg = self.avg * self.momentum + val * (1 - self.momentum)
        self.val = val


def get_data_loaders(data_aug=False, batch_size=32, test_batch_size=1000, perc=1.0):
    # Create Transforms
    transform = transforms.Compose([
        transforms.Resize((32, 32)),
        transforms.ToTensor(),
        transforms.Normalize((0.3403, 0.3121, 0.3214),
                             (0.2724, 0.2608, 0.2669))
    ])
    
    root_dir = '/home/manzand/Documents/MATLAB/NeuralODEs/gtsrb/data'
    
    # Create Datasets
    trainset = dataset.GTSRB(
        root_dir=root_dir, train=True,  transform=transform)
    testset = dataset.GTSRB(
        root_dir=root_dir, train=False,  transform=transform)
    
    # Load Datasets
    train_loader = torch.utils.data.DataLoader(
        trainset, batch_size=128, shuffle=True, num_workers=2)
    train_eval_loader = torch.utils.data.DataLoader(
        trainset, batch_size=128, shuffle=False, num_workers=2)
    test_loader = torch.utils.data.DataLoader(
        testset, batch_size=128, shuffle=False, num_workers=2)

    return train_loader, test_loader, train_eval_loader


def inf_generator(iterable):
    """Allows training with DataLoaders in a single infinite loop:
        for i, (x, y) in enumerate(inf_generator(train_loader)):
    """
    iterator = iterable.__iter__()
    while True:
        try:
            yield iterator.__next__()
        except StopIteration:
            iterator = iterable.__iter__()


def learning_rate_with_decay(batch_size, batch_denom, batches_per_epoch, boundary_epochs, decay_rates):
    initial_learning_rate = args.lr * batch_size / batch_denom

    boundaries = [int(batches_per_epoch * epoch) for epoch in boundary_epochs]
    vals = [initial_learning_rate * decay for decay in decay_rates]

    def learning_rate_fn(itr):
        lt = [itr < b for b in boundaries] + [True]
        i = np.argmax(lt)
        return vals[i]

    return learning_rate_fn


def one_hot(x, K):
    return np.array(x[:, None] == np.arange(K)[None, :], dtype=int)


def accuracy(model, dataset_loader):
    total_correct = 0
    for x, y in dataset_loader:
        x = x.to(device)
        y = one_hot(np.array(y.numpy()), 10)

        target_class = np.argmax(y, axis=1)
        predicted_class = np.argmax(model(x).cpu().detach().numpy(), axis=1)
        total_correct += np.sum(predicted_class == target_class)
    return total_correct / len(dataset_loader.dataset)


def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)


def makedirs(dirname):
    if not os.path.exists(dirname):
        os.makedirs(dirname)


def get_logger(logpath, filepath, package_files=[], displaying=True, saving=True, debug=False):
    logger = logging.getLogger()
    if debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logger.setLevel(level)
    if saving:
        info_file_handler = logging.FileHandler(logpath, mode="a")
        info_file_handler.setLevel(level)
        logger.addHandler(info_file_handler)
    if displaying:
        console_handler = logging.StreamHandler()
        console_handler.setLevel(level)
        logger.addHandler(console_handler)
    logger.info(filepath)
    with open(filepath, "r") as f:
        logger.info(f.read())

    for f in package_files:
        logger.info(f)
        with open(f, "r") as package_f:
            logger.info(package_f.read())

    return logger


if __name__ == '__main__':

    makedirs(args.save)
    logger = get_logger(logpath=os.path.join(args.save, 'logs'), filepath=os.path.abspath(__file__))
    logger.info(args)

    device = torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')

    is_odenet = args.network == 'odenet'

    downsampling_layers = [
        nn.Conv2d(1, 16, 3, 1),
        norm(16),
        nn.ReLU(inplace=True),
        nn.Conv2d(16, 16, 4, 2, 1),
        norm(16),
        nn.ReLU(inplace=True),
        Flatten(),
    ]


    feature_layers = [ODEBlock(ODEfunc(2704))] 
    fc_layers = [nn.Linear(2704, 10)]

    model = nn.Sequential(*downsampling_layers, *feature_layers, *fc_layers).to(device)

    logger.info(model)
    logger.info('Number of parameters: {}'.format(count_parameters(model)))

    criterion = nn.CrossEntropyLoss().to(device)

    train_loader, test_loader, train_eval_loader = get_data_loaders(
        args.data_aug, args.batch_size, args.test_batch_size
    )

    data_gen = inf_generator(train_loader)
    batches_per_epoch = len(train_loader)

    lr_fn = learning_rate_with_decay(
        args.batch_size, batch_denom=128, batches_per_epoch=batches_per_epoch, boundary_epochs=[60, 100, 140],
        decay_rates=[1, 0.1, 0.01, 0.001]
    )

    optimizer = torch.optim.SGD(model.parameters(), lr=args.lr, momentum=0.9)

    best_acc = 0
    batch_time_meter = RunningAverageMeter()
    f_nfe_meter = RunningAverageMeter()
    b_nfe_meter = RunningAverageMeter()
    end = time.time()

    for itr in range(args.nepochs * batches_per_epoch):

        for param_group in optimizer.param_groups:
            param_group['lr'] = lr_fn(itr)

        optimizer.zero_grad()
        x, y = data_gen.__next__()
        x = x.to(device)
        y = y.to(device)
        logits = model(x)
        loss = criterion(logits, y)

        if is_odenet:
            nfe_forward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        loss.backward()
        optimizer.step()

        if is_odenet:
            nfe_backward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        batch_time_meter.update(time.time() - end)
        if is_odenet:
            f_nfe_meter.update(nfe_forward)
            b_nfe_meter.update(nfe_backward)
        end = time.time()

        if itr % batches_per_epoch == 0:
            with torch.no_grad():
                train_acc = accuracy(model, train_eval_loader)
                val_acc = accuracy(model, test_loader)
                if val_acc > best_acc:
                    torch.save({'state_dict': model.state_dict(), 'args': args}, os.path.join(args.save, 'model.pth'))
                    best_acc = val_acc
                if best_acc > 0.96:
                    break
                logger.info(
                    "Epoch {:04d} | Time {:.3f} ({:.3f}) | NFE-F {:.1f} | NFE-B {:.1f} | "
                    "Train Acc {:.4f} | Test Acc {:.4f}".format(
                        itr // batches_per_epoch, batch_time_meter.val, batch_time_meter.avg, f_nfe_meter.avg,
                        b_nfe_meter.avg, train_acc, val_acc
                    )
                )
    names = []
    params = []
    for name,param in model.named_parameters():
        names.append(name)
        params.append(param.detach().numpy())
    nn1 = dict({'Wb':params,'names':names})
    for name,param in model.named_buffers():
        names.append(name)
        params.append(param.detach().numpy())
    savemat("odecnn_gtsrb_small.mat",nn1)
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb  4 09:04:31 2021

@author: manzand
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 19 15:10:31 2021

@author: manzand
"""

import os
import argparse
import logging
import time
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms
from scipy.io import savemat
import gtsrb_dataset as dataset


parser = argparse.ArgumentParser()
parser.add_argument('--network', type=str, choices=['resnet', 'odenet'], default='odenet')
parser.add_argument('--tol', type=float, default=1e-3)
parser.add_argument('--adjoint', type=eval, default=False, choices=[True, False])
parser.add_argument('--downsampling-method', type=str, default='conv', choices=['conv', 'res'])
parser.add_argument('--nepochs', type=int, default=100)
parser.add_argument('--data_aug', type=eval, default=False, choices=[True, False])
parser.add_argument('--lr', type=float, default=0.01)
parser.add_argument('--batch_size', type=int, default=128)
parser.add_argument('--test_batch_size', type=int, default=1000)

parser.add_argument('--save', type=str, default='./experiment1')
parser.add_argument('--debug', action='store_true')
parser.add_argument('--gpu', type=int, default=0)
args = parser.parse_args()

if args.adjoint:
    from torchdiffeq import odeint_adjoint as odeint
else:
    from torchdiffeq import odeint


def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


def norm(dim):
    return nn.BatchNorm2d(min(64, dim), dim)


class ConcatConv2d(nn.Module):

    def __init__(self, dim_in, dim_out, ksize=3, stride=1, padding=0, dilation=1, groups=1, bias=True, transpose=False):
        super(ConcatConv2d, self).__init__()
        module = nn.ConvTranspose2d if transpose else nn.Conv2d
        self._layer = module(
            dim_in + 1, dim_out, kernel_size=ksize, stride=stride, padding=padding, dilation=dilation, groups=groups,
            bias=bias
        )

    def forward(self, t, x):
        tt = torch.ones_like(x[:, :1, :, :]) * t
        ttx = torch.cat([tt, x], 1)
        return self._layer(ttx)


class ODEfunc(nn.Module):

    def __init__(self,dim):
        super(ODEfunc, self).__init__()
        self.fc1 = nn.Linear(dim,10)
        self.fc2 = nn.Linear(10, dim)
        self.nfe = 0

    def forward(self, t, x):
        self.nfe += 1
        out = self.fc1(x)
        out = self.fc2(out)
        return out


class ODEBlock(nn.Module):

    def __init__(self, odefunc):
        super(ODEBlock, self).__init__()
        self.odefunc = odefunc
        self.integration_time = torch.tensor([0, 1]).float()

    def forward(self, x):
        self.integration_time = self.integration_time.type_as(x)
        out = odeint(self.odefunc, x, self.integration_time, rtol=args.tol, atol=args.tol)
        return out[1]

    @property
    def nfe(self):
        return self.odefunc.nfe

    @nfe.setter
    def nfe(self, value):
        self.odefunc.nfe = value


class Flatten(nn.Module):

    def __init__(self):
        super(Flatten, self).__init__()

    def forward(self, x):
        shape = torch.prod(torch.tensor(x.shape[1:])).item()
        return x.view(-1, shape)


class RunningAverageMeter(object):
    """Computes and stores the average and current value"""

    def __init__(self, momentum=0.99):
        self.momentum = momentum
        self.reset()

    def reset(self):
        self.val = None
        self.avg = 0

    def update(self, val):
        if self.val is None:
            self.avg = val
        else:
            self.avg = self.avg * self.momentum + val * (1 - self.momentum)
        self.val = val


def get_data_loaders(data_aug=False, batch_size=32, test_batch_size=1000, perc=1.0):
    # Create Transforms
    transform = transforms.Compose([
        transforms.Resize((32, 32)),
        transforms.ToTensor(),
        transforms.Normalize((0.3403, 0.3121, 0.3214),
                             (0.2724, 0.2608, 0.2669))
    ])
    
    root_dir = '/home/manzand/Documents/MATLAB/NeuralODEs/gtsrb/data'
    
    # Create Datasets
    trainset = dataset.GTSRB(
        root_dir=root_dir, train=True,  transform=transform)
    testset = dataset.GTSRB(
        root_dir=root_dir, train=False,  transform=transform)
    
    # Load Datasets
    train_loader = torch.utils.data.DataLoader(
        trainset, batch_size=128, shuffle=True, num_workers=2)
    train_eval_loader = torch.utils.data.DataLoader(
        trainset, batch_size=128, shuffle=False, num_workers=2)
    test_loader = torch.utils.data.DataLoader(
        testset, batch_size=128, shuffle=False, num_workers=2)

    return train_loader, test_loader, train_eval_loader


def inf_generator(iterable):
    """Allows training with DataLoaders in a single infinite loop:
        for i, (x, y) in enumerate(inf_generator(train_loader)):
    """
    iterator = iterable.__iter__()
    while True:
        try:
            yield iterator.__next__()
        except StopIteration:
            iterator = iterable.__iter__()


def learning_rate_with_decay(batch_size, batch_denom, batches_per_epoch, boundary_epochs, decay_rates):
    initial_learning_rate = args.lr * batch_size / batch_denom

    boundaries = [int(batches_per_epoch * epoch) for epoch in boundary_epochs]
    vals = [initial_learning_rate * decay for decay in decay_rates]

    def learning_rate_fn(itr):
        lt = [itr < b for b in boundaries] + [True]
        i = np.argmax(lt)
        return vals[i]

    return learning_rate_fn


def one_hot(x, K):
    return np.array(x[:, None] == np.arange(K)[None, :], dtype=int)


def accuracy(model, dataset_loader):
    total_correct = 0
    for x, y in dataset_loader:
        x = x.to(device)
        y = one_hot(np.array(y.numpy()), 10)

        target_class = np.argmax(y, axis=1)
        predicted_class = np.argmax(model(x).cpu().detach().numpy(), axis=1)
        total_correct += np.sum(predicted_class == target_class)
    return total_correct / len(dataset_loader.dataset)


def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)


def makedirs(dirname):
    if not os.path.exists(dirname):
        os.makedirs(dirname)


def get_logger(logpath, filepath, package_files=[], displaying=True, saving=True, debug=False):
    logger = logging.getLogger()
    if debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logger.setLevel(level)
    if saving:
        info_file_handler = logging.FileHandler(logpath, mode="a")
        info_file_handler.setLevel(level)
        logger.addHandler(info_file_handler)
    if displaying:
        console_handler = logging.StreamHandler()
        console_handler.setLevel(level)
        logger.addHandler(console_handler)
    logger.info(filepath)
    with open(filepath, "r") as f:
        logger.info(f.read())

    for f in package_files:
        logger.info(f)
        with open(f, "r") as package_f:
            logger.info(package_f.read())

    return logger


if __name__ == '__main__':

    makedirs(args.save)
    logger = get_logger(logpath=os.path.join(args.save, 'logs'), filepath=os.path.abspath(__file__))
    logger.info(args)

    device = torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')

    is_odenet = args.network == 'odenet'

    downsampling_layers = [
        nn.Conv2d(1, 16, 3, 1),
        norm(16),
        nn.ReLU(inplace=True),
        nn.Conv2d(16, 16, 4, 2, 1),
        norm(16),
        nn.ReLU(inplace=True),
        Flatten(),
    ]


    feature_layers = [ODEBlock(ODEfunc(2704))] 
    fc_layers = [nn.Linear(2704, 10)]

    model = nn.Sequential(*downsampling_layers, *feature_layers, *fc_layers).to(device)

    logger.info(model)
    logger.info('Number of parameters: {}'.format(count_parameters(model)))

    criterion = nn.CrossEntropyLoss().to(device)

    train_loader, test_loader, train_eval_loader = get_data_loaders(
        args.data_aug, args.batch_size, args.test_batch_size
    )

    data_gen = inf_generator(train_loader)
    batches_per_epoch = len(train_loader)

    lr_fn = learning_rate_with_decay(
        args.batch_size, batch_denom=128, batches_per_epoch=batches_per_epoch, boundary_epochs=[60, 100, 140],
        decay_rates=[1, 0.1, 0.01, 0.001]
    )

    optimizer = torch.optim.SGD(model.parameters(), lr=args.lr, momentum=0.9)

    best_acc = 0
    batch_time_meter = RunningAverageMeter()
    f_nfe_meter = RunningAverageMeter()
    b_nfe_meter = RunningAverageMeter()
    end = time.time()

    for itr in range(args.nepochs * batches_per_epoch):

        for param_group in optimizer.param_groups:
            param_group['lr'] = lr_fn(itr)

        optimizer.zero_grad()
        x, y = data_gen.__next__()
        x = x.to(device)
        y = y.to(device)
        logits = model(x)
        loss = criterion(logits, y)

        if is_odenet:
            nfe_forward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        loss.backward()
        optimizer.step()

        if is_odenet:
            nfe_backward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        batch_time_meter.update(time.time() - end)
        if is_odenet:
            f_nfe_meter.update(nfe_forward)
            b_nfe_meter.update(nfe_backward)
        end = time.time()

        if itr % batches_per_epoch == 0:
            with torch.no_grad():
                train_acc = accuracy(model, train_eval_loader)
                val_acc = accuracy(model, test_loader)
                if val_acc > best_acc:
                    torch.save({'state_dict': model.state_dict(), 'args': args}, os.path.join(args.save, 'model.pth'))
                    best_acc = val_acc
                if best_acc > 0.96:
                    break
                logger.info(
                    "Epoch {:04d} | Time {:.3f} ({:.3f}) | NFE-F {:.1f} | NFE-B {:.1f} | "
                    "Train Acc {:.4f} | Test Acc {:.4f}".format(
                        itr // batches_per_epoch, batch_time_meter.val, batch_time_meter.avg, f_nfe_meter.avg,
                        b_nfe_meter.avg, train_acc, val_acc
                    )
                )
    names = []
    params = []
    for name,param in model.named_parameters():
        names.append(name)
        params.append(param.detach().numpy())
    nn1 = dict({'Wb':params,'names':names})
    for name,param in model.named_buffers():
        names.append(name)
        params.append(param.detach().numpy())
    savemat("odecnn_gtsrb_small.mat",nn1)
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb  4 09:04:31 2021

@author: manzand
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 19 15:10:31 2021

@author: manzand
"""

import os
import argparse
import logging
import time
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms
from scipy.io import savemat
import gtsrb_dataset as dataset


parser = argparse.ArgumentParser()
parser.add_argument('--network', type=str, choices=['resnet', 'odenet'], default='odenet')
parser.add_argument('--tol', type=float, default=1e-3)
parser.add_argument('--adjoint', type=eval, default=False, choices=[True, False])
parser.add_argument('--downsampling-method', type=str, default='conv', choices=['conv', 'res'])
parser.add_argument('--nepochs', type=int, default=100)
parser.add_argument('--data_aug', type=eval, default=False, choices=[True, False])
parser.add_argument('--lr', type=float, default=0.01)
parser.add_argument('--batch_size', type=int, default=128)
parser.add_argument('--test_batch_size', type=int, default=1000)

parser.add_argument('--save', type=str, default='./experiment1')
parser.add_argument('--debug', action='store_true')
parser.add_argument('--gpu', type=int, default=0)
args = parser.parse_args()

if args.adjoint:
    from torchdiffeq import odeint_adjoint as odeint
else:
    from torchdiffeq import odeint


def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


def norm(dim):
    return nn.BatchNorm2d(min(64, dim), dim)


class ConcatConv2d(nn.Module):

    def __init__(self, dim_in, dim_out, ksize=3, stride=1, padding=0, dilation=1, groups=1, bias=True, transpose=False):
        super(ConcatConv2d, self).__init__()
        module = nn.ConvTranspose2d if transpose else nn.Conv2d
        self._layer = module(
            dim_in + 1, dim_out, kernel_size=ksize, stride=stride, padding=padding, dilation=dilation, groups=groups,
            bias=bias
        )

    def forward(self, t, x):
        tt = torch.ones_like(x[:, :1, :, :]) * t
        ttx = torch.cat([tt, x], 1)
        return self._layer(ttx)


class ODEfunc(nn.Module):

    def __init__(self,dim):
        super(ODEfunc, self).__init__()
        self.fc1 = nn.Linear(dim,10)
        self.fc2 = nn.Linear(10, dim)
        self.nfe = 0

    def forward(self, t, x):
        self.nfe += 1
        out = self.fc1(x)
        out = self.fc2(out)
        return out


class ODEBlock(nn.Module):

    def __init__(self, odefunc):
        super(ODEBlock, self).__init__()
        self.odefunc = odefunc
        self.integration_time = torch.tensor([0, 1]).float()

    def forward(self, x):
        self.integration_time = self.integration_time.type_as(x)
        out = odeint(self.odefunc, x, self.integration_time, rtol=args.tol, atol=args.tol)
        return out[1]

    @property
    def nfe(self):
        return self.odefunc.nfe

    @nfe.setter
    def nfe(self, value):
        self.odefunc.nfe = value


class Flatten(nn.Module):

    def __init__(self):
        super(Flatten, self).__init__()

    def forward(self, x):
        shape = torch.prod(torch.tensor(x.shape[1:])).item()
        return x.view(-1, shape)


class RunningAverageMeter(object):
    """Computes and stores the average and current value"""

    def __init__(self, momentum=0.99):
        self.momentum = momentum
        self.reset()

    def reset(self):
        self.val = None
        self.avg = 0

    def update(self, val):
        if self.val is None:
            self.avg = val
        else:
            self.avg = self.avg * self.momentum + val * (1 - self.momentum)
        self.val = val


def get_data_loaders(data_aug=False, batch_size=32, test_batch_size=1000, perc=1.0):
    # Create Transforms
    transform = transforms.Compose([
        transforms.Resize((32, 32)),
        transforms.ToTensor(),
        transforms.Normalize((0.3403, 0.3121, 0.3214),
                             (0.2724, 0.2608, 0.2669))
    ])
    
    root_dir = '/home/manzand/Documents/MATLAB/NeuralODEs/gtsrb/data'
    
    # Create Datasets
    trainset = dataset.GTSRB(
        root_dir=root_dir, train=True,  transform=transform)
    testset = dataset.GTSRB(
        root_dir=root_dir, train=False,  transform=transform)
    
    # Load Datasets
    train_loader = torch.utils.data.DataLoader(
        trainset, batch_size=128, shuffle=True, num_workers=2)
    train_eval_loader = torch.utils.data.DataLoader(
        trainset, batch_size=128, shuffle=False, num_workers=2)
    test_loader = torch.utils.data.DataLoader(
        testset, batch_size=128, shuffle=False, num_workers=2)

    return train_loader, test_loader, train_eval_loader


def inf_generator(iterable):
    """Allows training with DataLoaders in a single infinite loop:
        for i, (x, y) in enumerate(inf_generator(train_loader)):
    """
    iterator = iterable.__iter__()
    while True:
        try:
            yield iterator.__next__()
        except StopIteration:
            iterator = iterable.__iter__()


def learning_rate_with_decay(batch_size, batch_denom, batches_per_epoch, boundary_epochs, decay_rates):
    initial_learning_rate = args.lr * batch_size / batch_denom

    boundaries = [int(batches_per_epoch * epoch) for epoch in boundary_epochs]
    vals = [initial_learning_rate * decay for decay in decay_rates]

    def learning_rate_fn(itr):
        lt = [itr < b for b in boundaries] + [True]
        i = np.argmax(lt)
        return vals[i]

    return learning_rate_fn


def one_hot(x, K):
    return np.array(x[:, None] == np.arange(K)[None, :], dtype=int)


def accuracy(model, dataset_loader):
    total_correct = 0
    for x, y in dataset_loader:
        x = x.to(device)
        y = one_hot(np.array(y.numpy()), 10)

        target_class = np.argmax(y, axis=1)
        predicted_class = np.argmax(model(x).cpu().detach().numpy(), axis=1)
        total_correct += np.sum(predicted_class == target_class)
    return total_correct / len(dataset_loader.dataset)


def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)


def makedirs(dirname):
    if not os.path.exists(dirname):
        os.makedirs(dirname)


def get_logger(logpath, filepath, package_files=[], displaying=True, saving=True, debug=False):
    logger = logging.getLogger()
    if debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logger.setLevel(level)
    if saving:
        info_file_handler = logging.FileHandler(logpath, mode="a")
        info_file_handler.setLevel(level)
        logger.addHandler(info_file_handler)
    if displaying:
        console_handler = logging.StreamHandler()
        console_handler.setLevel(level)
        logger.addHandler(console_handler)
    logger.info(filepath)
    with open(filepath, "r") as f:
        logger.info(f.read())

    for f in package_files:
        logger.info(f)
        with open(f, "r") as package_f:
            logger.info(package_f.read())

    return logger


if __name__ == '__main__':

    makedirs(args.save)
    logger = get_logger(logpath=os.path.join(args.save, 'logs'), filepath=os.path.abspath(__file__))
    logger.info(args)

    device = torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')

    is_odenet = args.network == 'odenet'

    downsampling_layers = [
        nn.Conv2d(1, 16, 3, 1),
        norm(16),
        nn.ReLU(inplace=True),
        nn.Conv2d(16, 16, 4, 2, 1),
        norm(16),
        nn.ReLU(inplace=True),
        Flatten(),
    ]


    feature_layers = [ODEBlock(ODEfunc(2704))] 
    fc_layers = [nn.Linear(2704, 10)]

    model = nn.Sequential(*downsampling_layers, *feature_layers, *fc_layers).to(device)

    logger.info(model)
    logger.info('Number of parameters: {}'.format(count_parameters(model)))

    criterion = nn.CrossEntropyLoss().to(device)

    train_loader, test_loader, train_eval_loader = get_data_loaders(
        args.data_aug, args.batch_size, args.test_batch_size
    )

    data_gen = inf_generator(train_loader)
    batches_per_epoch = len(train_loader)

    lr_fn = learning_rate_with_decay(
        args.batch_size, batch_denom=128, batches_per_epoch=batches_per_epoch, boundary_epochs=[60, 100, 140],
        decay_rates=[1, 0.1, 0.01, 0.001]
    )

    optimizer = torch.optim.SGD(model.parameters(), lr=args.lr, momentum=0.9)

    best_acc = 0
    batch_time_meter = RunningAverageMeter()
    f_nfe_meter = RunningAverageMeter()
    b_nfe_meter = RunningAverageMeter()
    end = time.time()

    for itr in range(args.nepochs * batches_per_epoch):

        for param_group in optimizer.param_groups:
            param_group['lr'] = lr_fn(itr)

        optimizer.zero_grad()
        x, y = data_gen.__next__()
        x = x.to(device)
        y = y.to(device)
        logits = model(x)
        loss = criterion(logits, y)

        if is_odenet:
            nfe_forward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        loss.backward()
        optimizer.step()

        if is_odenet:
            nfe_backward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        batch_time_meter.update(time.time() - end)
        if is_odenet:
            f_nfe_meter.update(nfe_forward)
            b_nfe_meter.update(nfe_backward)
        end = time.time()

        if itr % batches_per_epoch == 0:
            with torch.no_grad():
                train_acc = accuracy(model, train_eval_loader)
                val_acc = accuracy(model, test_loader)
                if val_acc > best_acc:
                    torch.save({'state_dict': model.state_dict(), 'args': args}, os.path.join(args.save, 'model.pth'))
                    best_acc = val_acc
                if best_acc > 0.96:
                    break
                logger.info(
                    "Epoch {:04d} | Time {:.3f} ({:.3f}) | NFE-F {:.1f} | NFE-B {:.1f} | "
                    "Train Acc {:.4f} | Test Acc {:.4f}".format(
                        itr // batches_per_epoch, batch_time_meter.val, batch_time_meter.avg, f_nfe_meter.avg,
                        b_nfe_meter.avg, train_acc, val_acc
                    )
                )
    names = []
    params = []
    for name,param in model.named_parameters():
        names.append(name)
        params.append(param.detach().numpy())
    nn1 = dict({'Wb':params,'names':names})
    for name,param in model.named_buffers():
        names.append(name)
        params.append(param.detach().numpy())
    savemat("odecnn_gtsrb_small.mat",nn1)
Namespace(adjoint=False, batch_size=128, data_aug=False, debug=False, downsampling_method='conv', gpu=0, lr=0.01, nepochs=100, network='odenet', save='./experiment1', test_batch_size=1000, tol=0.001)
Namespace(adjoint=False, batch_size=128, data_aug=False, debug=False, downsampling_method='conv', gpu=0, lr=0.01, nepochs=100, network='odenet', save='./experiment1', test_batch_size=1000, tol=0.001)
Namespace(adjoint=False, batch_size=128, data_aug=False, debug=False, downsampling_method='conv', gpu=0, lr=0.01, nepochs=100, network='odenet', save='./experiment1', test_batch_size=1000, tol=0.001)
Sequential(
  (0): Conv2d(1, 16, kernel_size=(3, 3), stride=(1, 1))
  (1): BatchNorm2d(16, eps=16, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (4): BatchNorm2d(16, eps=16, momentum=0.1, affine=True, track_running_stats=True)
  (5): ReLU(inplace=True)
  (6): Flatten()
  (7): ODEBlock(
    (odefunc): ODEfunc(
      (fc1): Linear(in_features=2704, out_features=10, bias=True)
      (fc2): Linear(in_features=10, out_features=2704, bias=True)
    )
  )
  (8): Linear(in_features=2704, out_features=10, bias=True)
)
Sequential(
  (0): Conv2d(1, 16, kernel_size=(3, 3), stride=(1, 1))
  (1): BatchNorm2d(16, eps=16, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (4): BatchNorm2d(16, eps=16, momentum=0.1, affine=True, track_running_stats=True)
  (5): ReLU(inplace=True)
  (6): Flatten()
  (7): ODEBlock(
    (odefunc): ODEfunc(
      (fc1): Linear(in_features=2704, out_features=10, bias=True)
      (fc2): Linear(in_features=10, out_features=2704, bias=True)
    )
  )
  (8): Linear(in_features=2704, out_features=10, bias=True)
)
Sequential(
  (0): Conv2d(1, 16, kernel_size=(3, 3), stride=(1, 1))
  (1): BatchNorm2d(16, eps=16, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (4): BatchNorm2d(16, eps=16, momentum=0.1, affine=True, track_running_stats=True)
  (5): ReLU(inplace=True)
  (6): Flatten()
  (7): ODEBlock(
    (odefunc): ODEfunc(
      (fc1): Linear(in_features=2704, out_features=10, bias=True)
      (fc2): Linear(in_features=10, out_features=2704, bias=True)
    )
  )
  (8): Linear(in_features=2704, out_features=10, bias=True)
)
Number of parameters: 88180
Number of parameters: 88180
Number of parameters: 88180
/home/manzand/Documents/Python/neuralODE_examples/gtsrb/odenet_gtsrb_example_small.py
/home/manzand/Documents/Python/neuralODE_examples/gtsrb/odenet_gtsrb_example_small.py
/home/manzand/Documents/Python/neuralODE_examples/gtsrb/odenet_gtsrb_example_small.py
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb  4 09:04:31 2021

@author: manzand
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 19 15:10:31 2021

@author: manzand
"""

import os
import argparse
import logging
import time
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms
from scipy.io import savemat
import gtsrb_dataset as dataset


parser = argparse.ArgumentParser()
parser.add_argument('--network', type=str, choices=['resnet', 'odenet'], default='odenet')
parser.add_argument('--tol', type=float, default=1e-3)
parser.add_argument('--adjoint', type=eval, default=False, choices=[True, False])
parser.add_argument('--downsampling-method', type=str, default='conv', choices=['conv', 'res'])
parser.add_argument('--nepochs', type=int, default=100)
parser.add_argument('--data_aug', type=eval, default=False, choices=[True, False])
parser.add_argument('--lr', type=float, default=0.01)
parser.add_argument('--batch_size', type=int, default=128)
parser.add_argument('--test_batch_size', type=int, default=1000)

parser.add_argument('--save', type=str, default='./experiment1')
parser.add_argument('--debug', action='store_true')
parser.add_argument('--gpu', type=int, default=0)
args = parser.parse_args()

if args.adjoint:
    from torchdiffeq import odeint_adjoint as odeint
else:
    from torchdiffeq import odeint


def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


def norm(dim):
    return nn.BatchNorm2d(min(64, dim), dim)


class ConcatConv2d(nn.Module):

    def __init__(self, dim_in, dim_out, ksize=3, stride=1, padding=0, dilation=1, groups=1, bias=True, transpose=False):
        super(ConcatConv2d, self).__init__()
        module = nn.ConvTranspose2d if transpose else nn.Conv2d
        self._layer = module(
            dim_in + 1, dim_out, kernel_size=ksize, stride=stride, padding=padding, dilation=dilation, groups=groups,
            bias=bias
        )

    def forward(self, t, x):
        tt = torch.ones_like(x[:, :1, :, :]) * t
        ttx = torch.cat([tt, x], 1)
        return self._layer(ttx)


class ODEfunc(nn.Module):

    def __init__(self,dim):
        super(ODEfunc, self).__init__()
        self.fc1 = nn.Linear(dim,10)
        self.fc2 = nn.Linear(10, dim)
        self.nfe = 0

    def forward(self, t, x):
        self.nfe += 1
        out = self.fc1(x)
        out = self.fc2(out)
        return out


class ODEBlock(nn.Module):

    def __init__(self, odefunc):
        super(ODEBlock, self).__init__()
        self.odefunc = odefunc
        self.integration_time = torch.tensor([0, 1]).float()

    def forward(self, x):
        self.integration_time = self.integration_time.type_as(x)
        out = odeint(self.odefunc, x, self.integration_time, rtol=args.tol, atol=args.tol)
        return out[1]

    @property
    def nfe(self):
        return self.odefunc.nfe

    @nfe.setter
    def nfe(self, value):
        self.odefunc.nfe = value


class Flatten(nn.Module):

    def __init__(self):
        super(Flatten, self).__init__()

    def forward(self, x):
        shape = torch.prod(torch.tensor(x.shape[1:])).item()
        return x.view(-1, shape)


class RunningAverageMeter(object):
    """Computes and stores the average and current value"""

    def __init__(self, momentum=0.99):
        self.momentum = momentum
        self.reset()

    def reset(self):
        self.val = None
        self.avg = 0

    def update(self, val):
        if self.val is None:
            self.avg = val
        else:
            self.avg = self.avg * self.momentum + val * (1 - self.momentum)
        self.val = val


def get_data_loaders(data_aug=False, batch_size=32, test_batch_size=1000, perc=1.0):
    # Create Transforms
    transform = transforms.Compose([
        transforms.Resize((32, 32)),
        transforms.ToTensor(),
        transforms.Normalize((0.3403, 0.3121, 0.3214),
                             (0.2724, 0.2608, 0.2669))
    ])
    
    root_dir = '/home/manzand/Documents/MATLAB/NeuralODEs/gtsrb/data'
    
    # Create Datasets
    trainset = dataset.GTSRB(
        root_dir=root_dir, train=True,  transform=transform)
    testset = dataset.GTSRB(
        root_dir=root_dir, train=False,  transform=transform)
    
    # Load Datasets
    train_loader = torch.utils.data.DataLoader(
        trainset, batch_size=128, shuffle=True, num_workers=2)
    train_eval_loader = torch.utils.data.DataLoader(
        trainset, batch_size=128, shuffle=False, num_workers=2)
    test_loader = torch.utils.data.DataLoader(
        testset, batch_size=128, shuffle=False, num_workers=2)

    return train_loader, test_loader, train_eval_loader


def inf_generator(iterable):
    """Allows training with DataLoaders in a single infinite loop:
        for i, (x, y) in enumerate(inf_generator(train_loader)):
    """
    iterator = iterable.__iter__()
    while True:
        try:
            yield iterator.__next__()
        except StopIteration:
            iterator = iterable.__iter__()


def learning_rate_with_decay(batch_size, batch_denom, batches_per_epoch, boundary_epochs, decay_rates):
    initial_learning_rate = args.lr * batch_size / batch_denom

    boundaries = [int(batches_per_epoch * epoch) for epoch in boundary_epochs]
    vals = [initial_learning_rate * decay for decay in decay_rates]

    def learning_rate_fn(itr):
        lt = [itr < b for b in boundaries] + [True]
        i = np.argmax(lt)
        return vals[i]

    return learning_rate_fn


def one_hot(x, K):
    return np.array(x[:, None] == np.arange(K)[None, :], dtype=int)


def accuracy(model, dataset_loader):
    total_correct = 0
    for x, y in dataset_loader:
        x = x.to(device)
        y = one_hot(np.array(y.numpy()), 10)

        target_class = np.argmax(y, axis=1)
        predicted_class = np.argmax(model(x).cpu().detach().numpy(), axis=1)
        total_correct += np.sum(predicted_class == target_class)
    return total_correct / len(dataset_loader.dataset)


def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)


def makedirs(dirname):
    if not os.path.exists(dirname):
        os.makedirs(dirname)


def get_logger(logpath, filepath, package_files=[], displaying=True, saving=True, debug=False):
    logger = logging.getLogger()
    if debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logger.setLevel(level)
    if saving:
        info_file_handler = logging.FileHandler(logpath, mode="a")
        info_file_handler.setLevel(level)
        logger.addHandler(info_file_handler)
    if displaying:
        console_handler = logging.StreamHandler()
        console_handler.setLevel(level)
        logger.addHandler(console_handler)
    logger.info(filepath)
    with open(filepath, "r") as f:
        logger.info(f.read())

    for f in package_files:
        logger.info(f)
        with open(f, "r") as package_f:
            logger.info(package_f.read())

    return logger


if __name__ == '__main__':

    makedirs(args.save)
    logger = get_logger(logpath=os.path.join(args.save, 'logs'), filepath=os.path.abspath(__file__))
    logger.info(args)

    device = torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')

    is_odenet = args.network == 'odenet'

    downsampling_layers = [
        nn.Conv2d(3, 16, 3, 1),
        norm(16),
        nn.ReLU(inplace=True),
        nn.Conv2d(16, 16, 4, 2, 1),
        norm(16),
        nn.ReLU(inplace=True),
        Flatten(),
    ]


    feature_layers = [ODEBlock(ODEfunc(2704))] 
    fc_layers = [nn.Linear(2704, 10)]

    model = nn.Sequential(*downsampling_layers, *feature_layers, *fc_layers).to(device)

    logger.info(model)
    logger.info('Number of parameters: {}'.format(count_parameters(model)))

    criterion = nn.CrossEntropyLoss().to(device)

    train_loader, test_loader, train_eval_loader = get_data_loaders(
        args.data_aug, args.batch_size, args.test_batch_size
    )

    data_gen = inf_generator(train_loader)
    batches_per_epoch = len(train_loader)

    lr_fn = learning_rate_with_decay(
        args.batch_size, batch_denom=128, batches_per_epoch=batches_per_epoch, boundary_epochs=[60, 100, 140],
        decay_rates=[1, 0.1, 0.01, 0.001]
    )

    optimizer = torch.optim.SGD(model.parameters(), lr=args.lr, momentum=0.9)

    best_acc = 0
    batch_time_meter = RunningAverageMeter()
    f_nfe_meter = RunningAverageMeter()
    b_nfe_meter = RunningAverageMeter()
    end = time.time()

    for itr in range(args.nepochs * batches_per_epoch):

        for param_group in optimizer.param_groups:
            param_group['lr'] = lr_fn(itr)

        optimizer.zero_grad()
        x, y = data_gen.__next__()
        x = x.to(device)
        y = y.to(device)
        logits = model(x)
        loss = criterion(logits, y)

        if is_odenet:
            nfe_forward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        loss.backward()
        optimizer.step()

        if is_odenet:
            nfe_backward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        batch_time_meter.update(time.time() - end)
        if is_odenet:
            f_nfe_meter.update(nfe_forward)
            b_nfe_meter.update(nfe_backward)
        end = time.time()

        if itr % batches_per_epoch == 0:
            with torch.no_grad():
                train_acc = accuracy(model, train_eval_loader)
                val_acc = accuracy(model, test_loader)
                if val_acc > best_acc:
                    torch.save({'state_dict': model.state_dict(), 'args': args}, os.path.join(args.save, 'model.pth'))
                    best_acc = val_acc
                if best_acc > 0.96:
                    break
                logger.info(
                    "Epoch {:04d} | Time {:.3f} ({:.3f}) | NFE-F {:.1f} | NFE-B {:.1f} | "
                    "Train Acc {:.4f} | Test Acc {:.4f}".format(
                        itr // batches_per_epoch, batch_time_meter.val, batch_time_meter.avg, f_nfe_meter.avg,
                        b_nfe_meter.avg, train_acc, val_acc
                    )
                )
    names = []
    params = []
    for name,param in model.named_parameters():
        names.append(name)
        params.append(param.detach().numpy())
    nn1 = dict({'Wb':params,'names':names})
    for name,param in model.named_buffers():
        names.append(name)
        params.append(param.detach().numpy())
    savemat("odecnn_gtsrb_small.mat",nn1)
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb  4 09:04:31 2021

@author: manzand
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 19 15:10:31 2021

@author: manzand
"""

import os
import argparse
import logging
import time
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms
from scipy.io import savemat
import gtsrb_dataset as dataset


parser = argparse.ArgumentParser()
parser.add_argument('--network', type=str, choices=['resnet', 'odenet'], default='odenet')
parser.add_argument('--tol', type=float, default=1e-3)
parser.add_argument('--adjoint', type=eval, default=False, choices=[True, False])
parser.add_argument('--downsampling-method', type=str, default='conv', choices=['conv', 'res'])
parser.add_argument('--nepochs', type=int, default=100)
parser.add_argument('--data_aug', type=eval, default=False, choices=[True, False])
parser.add_argument('--lr', type=float, default=0.01)
parser.add_argument('--batch_size', type=int, default=128)
parser.add_argument('--test_batch_size', type=int, default=1000)

parser.add_argument('--save', type=str, default='./experiment1')
parser.add_argument('--debug', action='store_true')
parser.add_argument('--gpu', type=int, default=0)
args = parser.parse_args()

if args.adjoint:
    from torchdiffeq import odeint_adjoint as odeint
else:
    from torchdiffeq import odeint


def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


def norm(dim):
    return nn.BatchNorm2d(min(64, dim), dim)


class ConcatConv2d(nn.Module):

    def __init__(self, dim_in, dim_out, ksize=3, stride=1, padding=0, dilation=1, groups=1, bias=True, transpose=False):
        super(ConcatConv2d, self).__init__()
        module = nn.ConvTranspose2d if transpose else nn.Conv2d
        self._layer = module(
            dim_in + 1, dim_out, kernel_size=ksize, stride=stride, padding=padding, dilation=dilation, groups=groups,
            bias=bias
        )

    def forward(self, t, x):
        tt = torch.ones_like(x[:, :1, :, :]) * t
        ttx = torch.cat([tt, x], 1)
        return self._layer(ttx)


class ODEfunc(nn.Module):

    def __init__(self,dim):
        super(ODEfunc, self).__init__()
        self.fc1 = nn.Linear(dim,10)
        self.fc2 = nn.Linear(10, dim)
        self.nfe = 0

    def forward(self, t, x):
        self.nfe += 1
        out = self.fc1(x)
        out = self.fc2(out)
        return out


class ODEBlock(nn.Module):

    def __init__(self, odefunc):
        super(ODEBlock, self).__init__()
        self.odefunc = odefunc
        self.integration_time = torch.tensor([0, 1]).float()

    def forward(self, x):
        self.integration_time = self.integration_time.type_as(x)
        out = odeint(self.odefunc, x, self.integration_time, rtol=args.tol, atol=args.tol)
        return out[1]

    @property
    def nfe(self):
        return self.odefunc.nfe

    @nfe.setter
    def nfe(self, value):
        self.odefunc.nfe = value


class Flatten(nn.Module):

    def __init__(self):
        super(Flatten, self).__init__()

    def forward(self, x):
        shape = torch.prod(torch.tensor(x.shape[1:])).item()
        return x.view(-1, shape)


class RunningAverageMeter(object):
    """Computes and stores the average and current value"""

    def __init__(self, momentum=0.99):
        self.momentum = momentum
        self.reset()

    def reset(self):
        self.val = None
        self.avg = 0

    def update(self, val):
        if self.val is None:
            self.avg = val
        else:
            self.avg = self.avg * self.momentum + val * (1 - self.momentum)
        self.val = val


def get_data_loaders(data_aug=False, batch_size=32, test_batch_size=1000, perc=1.0):
    # Create Transforms
    transform = transforms.Compose([
        transforms.Resize((32, 32)),
        transforms.ToTensor(),
        transforms.Normalize((0.3403, 0.3121, 0.3214),
                             (0.2724, 0.2608, 0.2669))
    ])
    
    root_dir = '/home/manzand/Documents/MATLAB/NeuralODEs/gtsrb/data'
    
    # Create Datasets
    trainset = dataset.GTSRB(
        root_dir=root_dir, train=True,  transform=transform)
    testset = dataset.GTSRB(
        root_dir=root_dir, train=False,  transform=transform)
    
    # Load Datasets
    train_loader = torch.utils.data.DataLoader(
        trainset, batch_size=128, shuffle=True, num_workers=2)
    train_eval_loader = torch.utils.data.DataLoader(
        trainset, batch_size=128, shuffle=False, num_workers=2)
    test_loader = torch.utils.data.DataLoader(
        testset, batch_size=128, shuffle=False, num_workers=2)

    return train_loader, test_loader, train_eval_loader


def inf_generator(iterable):
    """Allows training with DataLoaders in a single infinite loop:
        for i, (x, y) in enumerate(inf_generator(train_loader)):
    """
    iterator = iterable.__iter__()
    while True:
        try:
            yield iterator.__next__()
        except StopIteration:
            iterator = iterable.__iter__()


def learning_rate_with_decay(batch_size, batch_denom, batches_per_epoch, boundary_epochs, decay_rates):
    initial_learning_rate = args.lr * batch_size / batch_denom

    boundaries = [int(batches_per_epoch * epoch) for epoch in boundary_epochs]
    vals = [initial_learning_rate * decay for decay in decay_rates]

    def learning_rate_fn(itr):
        lt = [itr < b for b in boundaries] + [True]
        i = np.argmax(lt)
        return vals[i]

    return learning_rate_fn


def one_hot(x, K):
    return np.array(x[:, None] == np.arange(K)[None, :], dtype=int)


def accuracy(model, dataset_loader):
    total_correct = 0
    for x, y in dataset_loader:
        x = x.to(device)
        y = one_hot(np.array(y.numpy()), 10)

        target_class = np.argmax(y, axis=1)
        predicted_class = np.argmax(model(x).cpu().detach().numpy(), axis=1)
        total_correct += np.sum(predicted_class == target_class)
    return total_correct / len(dataset_loader.dataset)


def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)


def makedirs(dirname):
    if not os.path.exists(dirname):
        os.makedirs(dirname)


def get_logger(logpath, filepath, package_files=[], displaying=True, saving=True, debug=False):
    logger = logging.getLogger()
    if debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logger.setLevel(level)
    if saving:
        info_file_handler = logging.FileHandler(logpath, mode="a")
        info_file_handler.setLevel(level)
        logger.addHandler(info_file_handler)
    if displaying:
        console_handler = logging.StreamHandler()
        console_handler.setLevel(level)
        logger.addHandler(console_handler)
    logger.info(filepath)
    with open(filepath, "r") as f:
        logger.info(f.read())

    for f in package_files:
        logger.info(f)
        with open(f, "r") as package_f:
            logger.info(package_f.read())

    return logger


if __name__ == '__main__':

    makedirs(args.save)
    logger = get_logger(logpath=os.path.join(args.save, 'logs'), filepath=os.path.abspath(__file__))
    logger.info(args)

    device = torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')

    is_odenet = args.network == 'odenet'

    downsampling_layers = [
        nn.Conv2d(3, 16, 3, 1),
        norm(16),
        nn.ReLU(inplace=True),
        nn.Conv2d(16, 16, 4, 2, 1),
        norm(16),
        nn.ReLU(inplace=True),
        Flatten(),
    ]


    feature_layers = [ODEBlock(ODEfunc(2704))] 
    fc_layers = [nn.Linear(2704, 10)]

    model = nn.Sequential(*downsampling_layers, *feature_layers, *fc_layers).to(device)

    logger.info(model)
    logger.info('Number of parameters: {}'.format(count_parameters(model)))

    criterion = nn.CrossEntropyLoss().to(device)

    train_loader, test_loader, train_eval_loader = get_data_loaders(
        args.data_aug, args.batch_size, args.test_batch_size
    )

    data_gen = inf_generator(train_loader)
    batches_per_epoch = len(train_loader)

    lr_fn = learning_rate_with_decay(
        args.batch_size, batch_denom=128, batches_per_epoch=batches_per_epoch, boundary_epochs=[60, 100, 140],
        decay_rates=[1, 0.1, 0.01, 0.001]
    )

    optimizer = torch.optim.SGD(model.parameters(), lr=args.lr, momentum=0.9)

    best_acc = 0
    batch_time_meter = RunningAverageMeter()
    f_nfe_meter = RunningAverageMeter()
    b_nfe_meter = RunningAverageMeter()
    end = time.time()

    for itr in range(args.nepochs * batches_per_epoch):

        for param_group in optimizer.param_groups:
            param_group['lr'] = lr_fn(itr)

        optimizer.zero_grad()
        x, y = data_gen.__next__()
        x = x.to(device)
        y = y.to(device)
        logits = model(x)
        loss = criterion(logits, y)

        if is_odenet:
            nfe_forward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        loss.backward()
        optimizer.step()

        if is_odenet:
            nfe_backward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        batch_time_meter.update(time.time() - end)
        if is_odenet:
            f_nfe_meter.update(nfe_forward)
            b_nfe_meter.update(nfe_backward)
        end = time.time()

        if itr % batches_per_epoch == 0:
            with torch.no_grad():
                train_acc = accuracy(model, train_eval_loader)
                val_acc = accuracy(model, test_loader)
                if val_acc > best_acc:
                    torch.save({'state_dict': model.state_dict(), 'args': args}, os.path.join(args.save, 'model.pth'))
                    best_acc = val_acc
                if best_acc > 0.96:
                    break
                logger.info(
                    "Epoch {:04d} | Time {:.3f} ({:.3f}) | NFE-F {:.1f} | NFE-B {:.1f} | "
                    "Train Acc {:.4f} | Test Acc {:.4f}".format(
                        itr // batches_per_epoch, batch_time_meter.val, batch_time_meter.avg, f_nfe_meter.avg,
                        b_nfe_meter.avg, train_acc, val_acc
                    )
                )
    names = []
    params = []
    for name,param in model.named_parameters():
        names.append(name)
        params.append(param.detach().numpy())
    nn1 = dict({'Wb':params,'names':names})
    for name,param in model.named_buffers():
        names.append(name)
        params.append(param.detach().numpy())
    savemat("odecnn_gtsrb_small.mat",nn1)
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb  4 09:04:31 2021

@author: manzand
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 19 15:10:31 2021

@author: manzand
"""

import os
import argparse
import logging
import time
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms
from scipy.io import savemat
import gtsrb_dataset as dataset


parser = argparse.ArgumentParser()
parser.add_argument('--network', type=str, choices=['resnet', 'odenet'], default='odenet')
parser.add_argument('--tol', type=float, default=1e-3)
parser.add_argument('--adjoint', type=eval, default=False, choices=[True, False])
parser.add_argument('--downsampling-method', type=str, default='conv', choices=['conv', 'res'])
parser.add_argument('--nepochs', type=int, default=100)
parser.add_argument('--data_aug', type=eval, default=False, choices=[True, False])
parser.add_argument('--lr', type=float, default=0.01)
parser.add_argument('--batch_size', type=int, default=128)
parser.add_argument('--test_batch_size', type=int, default=1000)

parser.add_argument('--save', type=str, default='./experiment1')
parser.add_argument('--debug', action='store_true')
parser.add_argument('--gpu', type=int, default=0)
args = parser.parse_args()

if args.adjoint:
    from torchdiffeq import odeint_adjoint as odeint
else:
    from torchdiffeq import odeint


def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


def norm(dim):
    return nn.BatchNorm2d(min(64, dim), dim)


class ConcatConv2d(nn.Module):

    def __init__(self, dim_in, dim_out, ksize=3, stride=1, padding=0, dilation=1, groups=1, bias=True, transpose=False):
        super(ConcatConv2d, self).__init__()
        module = nn.ConvTranspose2d if transpose else nn.Conv2d
        self._layer = module(
            dim_in + 1, dim_out, kernel_size=ksize, stride=stride, padding=padding, dilation=dilation, groups=groups,
            bias=bias
        )

    def forward(self, t, x):
        tt = torch.ones_like(x[:, :1, :, :]) * t
        ttx = torch.cat([tt, x], 1)
        return self._layer(ttx)


class ODEfunc(nn.Module):

    def __init__(self,dim):
        super(ODEfunc, self).__init__()
        self.fc1 = nn.Linear(dim,10)
        self.fc2 = nn.Linear(10, dim)
        self.nfe = 0

    def forward(self, t, x):
        self.nfe += 1
        out = self.fc1(x)
        out = self.fc2(out)
        return out


class ODEBlock(nn.Module):

    def __init__(self, odefunc):
        super(ODEBlock, self).__init__()
        self.odefunc = odefunc
        self.integration_time = torch.tensor([0, 1]).float()

    def forward(self, x):
        self.integration_time = self.integration_time.type_as(x)
        out = odeint(self.odefunc, x, self.integration_time, rtol=args.tol, atol=args.tol)
        return out[1]

    @property
    def nfe(self):
        return self.odefunc.nfe

    @nfe.setter
    def nfe(self, value):
        self.odefunc.nfe = value


class Flatten(nn.Module):

    def __init__(self):
        super(Flatten, self).__init__()

    def forward(self, x):
        shape = torch.prod(torch.tensor(x.shape[1:])).item()
        return x.view(-1, shape)


class RunningAverageMeter(object):
    """Computes and stores the average and current value"""

    def __init__(self, momentum=0.99):
        self.momentum = momentum
        self.reset()

    def reset(self):
        self.val = None
        self.avg = 0

    def update(self, val):
        if self.val is None:
            self.avg = val
        else:
            self.avg = self.avg * self.momentum + val * (1 - self.momentum)
        self.val = val


def get_data_loaders(data_aug=False, batch_size=32, test_batch_size=1000, perc=1.0):
    # Create Transforms
    transform = transforms.Compose([
        transforms.Resize((32, 32)),
        transforms.ToTensor(),
        transforms.Normalize((0.3403, 0.3121, 0.3214),
                             (0.2724, 0.2608, 0.2669))
    ])
    
    root_dir = '/home/manzand/Documents/MATLAB/NeuralODEs/gtsrb/data'
    
    # Create Datasets
    trainset = dataset.GTSRB(
        root_dir=root_dir, train=True,  transform=transform)
    testset = dataset.GTSRB(
        root_dir=root_dir, train=False,  transform=transform)
    
    # Load Datasets
    train_loader = torch.utils.data.DataLoader(
        trainset, batch_size=128, shuffle=True, num_workers=2)
    train_eval_loader = torch.utils.data.DataLoader(
        trainset, batch_size=128, shuffle=False, num_workers=2)
    test_loader = torch.utils.data.DataLoader(
        testset, batch_size=128, shuffle=False, num_workers=2)

    return train_loader, test_loader, train_eval_loader


def inf_generator(iterable):
    """Allows training with DataLoaders in a single infinite loop:
        for i, (x, y) in enumerate(inf_generator(train_loader)):
    """
    iterator = iterable.__iter__()
    while True:
        try:
            yield iterator.__next__()
        except StopIteration:
            iterator = iterable.__iter__()


def learning_rate_with_decay(batch_size, batch_denom, batches_per_epoch, boundary_epochs, decay_rates):
    initial_learning_rate = args.lr * batch_size / batch_denom

    boundaries = [int(batches_per_epoch * epoch) for epoch in boundary_epochs]
    vals = [initial_learning_rate * decay for decay in decay_rates]

    def learning_rate_fn(itr):
        lt = [itr < b for b in boundaries] + [True]
        i = np.argmax(lt)
        return vals[i]

    return learning_rate_fn


def one_hot(x, K):
    return np.array(x[:, None] == np.arange(K)[None, :], dtype=int)


def accuracy(model, dataset_loader):
    total_correct = 0
    for x, y in dataset_loader:
        x = x.to(device)
        y = one_hot(np.array(y.numpy()), 10)

        target_class = np.argmax(y, axis=1)
        predicted_class = np.argmax(model(x).cpu().detach().numpy(), axis=1)
        total_correct += np.sum(predicted_class == target_class)
    return total_correct / len(dataset_loader.dataset)


def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)


def makedirs(dirname):
    if not os.path.exists(dirname):
        os.makedirs(dirname)


def get_logger(logpath, filepath, package_files=[], displaying=True, saving=True, debug=False):
    logger = logging.getLogger()
    if debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logger.setLevel(level)
    if saving:
        info_file_handler = logging.FileHandler(logpath, mode="a")
        info_file_handler.setLevel(level)
        logger.addHandler(info_file_handler)
    if displaying:
        console_handler = logging.StreamHandler()
        console_handler.setLevel(level)
        logger.addHandler(console_handler)
    logger.info(filepath)
    with open(filepath, "r") as f:
        logger.info(f.read())

    for f in package_files:
        logger.info(f)
        with open(f, "r") as package_f:
            logger.info(package_f.read())

    return logger


if __name__ == '__main__':

    makedirs(args.save)
    logger = get_logger(logpath=os.path.join(args.save, 'logs'), filepath=os.path.abspath(__file__))
    logger.info(args)

    device = torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')

    is_odenet = args.network == 'odenet'

    downsampling_layers = [
        nn.Conv2d(3, 16, 3, 1),
        norm(16),
        nn.ReLU(inplace=True),
        nn.Conv2d(16, 16, 4, 2, 1),
        norm(16),
        nn.ReLU(inplace=True),
        Flatten(),
    ]


    feature_layers = [ODEBlock(ODEfunc(2704))] 
    fc_layers = [nn.Linear(2704, 10)]

    model = nn.Sequential(*downsampling_layers, *feature_layers, *fc_layers).to(device)

    logger.info(model)
    logger.info('Number of parameters: {}'.format(count_parameters(model)))

    criterion = nn.CrossEntropyLoss().to(device)

    train_loader, test_loader, train_eval_loader = get_data_loaders(
        args.data_aug, args.batch_size, args.test_batch_size
    )

    data_gen = inf_generator(train_loader)
    batches_per_epoch = len(train_loader)

    lr_fn = learning_rate_with_decay(
        args.batch_size, batch_denom=128, batches_per_epoch=batches_per_epoch, boundary_epochs=[60, 100, 140],
        decay_rates=[1, 0.1, 0.01, 0.001]
    )

    optimizer = torch.optim.SGD(model.parameters(), lr=args.lr, momentum=0.9)

    best_acc = 0
    batch_time_meter = RunningAverageMeter()
    f_nfe_meter = RunningAverageMeter()
    b_nfe_meter = RunningAverageMeter()
    end = time.time()

    for itr in range(args.nepochs * batches_per_epoch):

        for param_group in optimizer.param_groups:
            param_group['lr'] = lr_fn(itr)

        optimizer.zero_grad()
        x, y = data_gen.__next__()
        x = x.to(device)
        y = y.to(device)
        logits = model(x)
        loss = criterion(logits, y)

        if is_odenet:
            nfe_forward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        loss.backward()
        optimizer.step()

        if is_odenet:
            nfe_backward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        batch_time_meter.update(time.time() - end)
        if is_odenet:
            f_nfe_meter.update(nfe_forward)
            b_nfe_meter.update(nfe_backward)
        end = time.time()

        if itr % batches_per_epoch == 0:
            with torch.no_grad():
                train_acc = accuracy(model, train_eval_loader)
                val_acc = accuracy(model, test_loader)
                if val_acc > best_acc:
                    torch.save({'state_dict': model.state_dict(), 'args': args}, os.path.join(args.save, 'model.pth'))
                    best_acc = val_acc
                if best_acc > 0.96:
                    break
                logger.info(
                    "Epoch {:04d} | Time {:.3f} ({:.3f}) | NFE-F {:.1f} | NFE-B {:.1f} | "
                    "Train Acc {:.4f} | Test Acc {:.4f}".format(
                        itr // batches_per_epoch, batch_time_meter.val, batch_time_meter.avg, f_nfe_meter.avg,
                        b_nfe_meter.avg, train_acc, val_acc
                    )
                )
    names = []
    params = []
    for name,param in model.named_parameters():
        names.append(name)
        params.append(param.detach().numpy())
    nn1 = dict({'Wb':params,'names':names})
    for name,param in model.named_buffers():
        names.append(name)
        params.append(param.detach().numpy())
    savemat("odecnn_gtsrb_small.mat",nn1)
Namespace(adjoint=False, batch_size=128, data_aug=False, debug=False, downsampling_method='conv', gpu=0, lr=0.01, nepochs=100, network='odenet', save='./experiment1', test_batch_size=1000, tol=0.001)
Namespace(adjoint=False, batch_size=128, data_aug=False, debug=False, downsampling_method='conv', gpu=0, lr=0.01, nepochs=100, network='odenet', save='./experiment1', test_batch_size=1000, tol=0.001)
Namespace(adjoint=False, batch_size=128, data_aug=False, debug=False, downsampling_method='conv', gpu=0, lr=0.01, nepochs=100, network='odenet', save='./experiment1', test_batch_size=1000, tol=0.001)
Sequential(
  (0): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1))
  (1): BatchNorm2d(16, eps=16, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (4): BatchNorm2d(16, eps=16, momentum=0.1, affine=True, track_running_stats=True)
  (5): ReLU(inplace=True)
  (6): Flatten()
  (7): ODEBlock(
    (odefunc): ODEfunc(
      (fc1): Linear(in_features=2704, out_features=10, bias=True)
      (fc2): Linear(in_features=10, out_features=2704, bias=True)
    )
  )
  (8): Linear(in_features=2704, out_features=10, bias=True)
)
Sequential(
  (0): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1))
  (1): BatchNorm2d(16, eps=16, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (4): BatchNorm2d(16, eps=16, momentum=0.1, affine=True, track_running_stats=True)
  (5): ReLU(inplace=True)
  (6): Flatten()
  (7): ODEBlock(
    (odefunc): ODEfunc(
      (fc1): Linear(in_features=2704, out_features=10, bias=True)
      (fc2): Linear(in_features=10, out_features=2704, bias=True)
    )
  )
  (8): Linear(in_features=2704, out_features=10, bias=True)
)
Sequential(
  (0): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1))
  (1): BatchNorm2d(16, eps=16, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (4): BatchNorm2d(16, eps=16, momentum=0.1, affine=True, track_running_stats=True)
  (5): ReLU(inplace=True)
  (6): Flatten()
  (7): ODEBlock(
    (odefunc): ODEfunc(
      (fc1): Linear(in_features=2704, out_features=10, bias=True)
      (fc2): Linear(in_features=10, out_features=2704, bias=True)
    )
  )
  (8): Linear(in_features=2704, out_features=10, bias=True)
)
Number of parameters: 88468
Number of parameters: 88468
Number of parameters: 88468
/home/manzand/Documents/Python/neuralODE_examples/gtsrb/odenet_gtsrb_example_small.py
/home/manzand/Documents/Python/neuralODE_examples/gtsrb/odenet_gtsrb_example_small.py
/home/manzand/Documents/Python/neuralODE_examples/gtsrb/odenet_gtsrb_example_small.py
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb  4 09:04:31 2021

@author: manzand
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 19 15:10:31 2021

@author: manzand
"""

import os
import argparse
import logging
import time
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms
from scipy.io import savemat
import gtsrb_dataset as dataset


parser = argparse.ArgumentParser()
parser.add_argument('--network', type=str, choices=['resnet', 'odenet'], default='odenet')
parser.add_argument('--tol', type=float, default=1e-3)
parser.add_argument('--adjoint', type=eval, default=False, choices=[True, False])
parser.add_argument('--downsampling-method', type=str, default='conv', choices=['conv', 'res'])
parser.add_argument('--nepochs', type=int, default=100)
parser.add_argument('--data_aug', type=eval, default=False, choices=[True, False])
parser.add_argument('--lr', type=float, default=0.01)
parser.add_argument('--batch_size', type=int, default=128)
parser.add_argument('--test_batch_size', type=int, default=1000)

parser.add_argument('--save', type=str, default='./experiment1')
parser.add_argument('--debug', action='store_true')
parser.add_argument('--gpu', type=int, default=0)
args = parser.parse_args()

if args.adjoint:
    from torchdiffeq import odeint_adjoint as odeint
else:
    from torchdiffeq import odeint


def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


def norm(dim):
    return nn.BatchNorm2d(min(64, dim), dim)


class ConcatConv2d(nn.Module):

    def __init__(self, dim_in, dim_out, ksize=3, stride=1, padding=0, dilation=1, groups=1, bias=True, transpose=False):
        super(ConcatConv2d, self).__init__()
        module = nn.ConvTranspose2d if transpose else nn.Conv2d
        self._layer = module(
            dim_in + 1, dim_out, kernel_size=ksize, stride=stride, padding=padding, dilation=dilation, groups=groups,
            bias=bias
        )

    def forward(self, t, x):
        tt = torch.ones_like(x[:, :1, :, :]) * t
        ttx = torch.cat([tt, x], 1)
        return self._layer(ttx)


class ODEfunc(nn.Module):

    def __init__(self,dim):
        super(ODEfunc, self).__init__()
        self.fc1 = nn.Linear(dim,10)
        self.fc2 = nn.Linear(10, dim)
        self.nfe = 0

    def forward(self, t, x):
        self.nfe += 1
        out = self.fc1(x)
        out = self.fc2(out)
        return out


class ODEBlock(nn.Module):

    def __init__(self, odefunc):
        super(ODEBlock, self).__init__()
        self.odefunc = odefunc
        self.integration_time = torch.tensor([0, 1]).float()

    def forward(self, x):
        self.integration_time = self.integration_time.type_as(x)
        out = odeint(self.odefunc, x, self.integration_time, rtol=args.tol, atol=args.tol)
        return out[1]

    @property
    def nfe(self):
        return self.odefunc.nfe

    @nfe.setter
    def nfe(self, value):
        self.odefunc.nfe = value


class Flatten(nn.Module):

    def __init__(self):
        super(Flatten, self).__init__()

    def forward(self, x):
        shape = torch.prod(torch.tensor(x.shape[1:])).item()
        return x.view(-1, shape)


class RunningAverageMeter(object):
    """Computes and stores the average and current value"""

    def __init__(self, momentum=0.99):
        self.momentum = momentum
        self.reset()

    def reset(self):
        self.val = None
        self.avg = 0

    def update(self, val):
        if self.val is None:
            self.avg = val
        else:
            self.avg = self.avg * self.momentum + val * (1 - self.momentum)
        self.val = val


def get_data_loaders(data_aug=False, batch_size=32, test_batch_size=1000, perc=1.0):
    # Create Transforms
    transform = transforms.Compose([
        transforms.Resize((32, 32)),
        transforms.ToTensor(),
        transforms.Normalize((0.3403, 0.3121, 0.3214),
                             (0.2724, 0.2608, 0.2669))
    ])
    
    root_dir = '/home/manzand/Documents/MATLAB/NeuralODEs/gtsrb/data'
    
    # Create Datasets
    trainset = dataset.GTSRB(
        root_dir=root_dir, train=True,  transform=transform)
    testset = dataset.GTSRB(
        root_dir=root_dir, train=False,  transform=transform)
    
    # Load Datasets
    train_loader = torch.utils.data.DataLoader(
        trainset, batch_size=128, shuffle=True, num_workers=2)
    train_eval_loader = torch.utils.data.DataLoader(
        trainset, batch_size=128, shuffle=False, num_workers=2)
    test_loader = torch.utils.data.DataLoader(
        testset, batch_size=128, shuffle=False, num_workers=2)

    return train_loader, test_loader, train_eval_loader


def inf_generator(iterable):
    """Allows training with DataLoaders in a single infinite loop:
        for i, (x, y) in enumerate(inf_generator(train_loader)):
    """
    iterator = iterable.__iter__()
    while True:
        try:
            yield iterator.__next__()
        except StopIteration:
            iterator = iterable.__iter__()


def learning_rate_with_decay(batch_size, batch_denom, batches_per_epoch, boundary_epochs, decay_rates):
    initial_learning_rate = args.lr * batch_size / batch_denom

    boundaries = [int(batches_per_epoch * epoch) for epoch in boundary_epochs]
    vals = [initial_learning_rate * decay for decay in decay_rates]

    def learning_rate_fn(itr):
        lt = [itr < b for b in boundaries] + [True]
        i = np.argmax(lt)
        return vals[i]

    return learning_rate_fn


def one_hot(x, K):
    return np.array(x[:, None] == np.arange(K)[None, :], dtype=int)


def accuracy(model, dataset_loader):
    total_correct = 0
    for x, y in dataset_loader:
        x = x.to(device)
        y = one_hot(np.array(y.numpy()), 10)

        target_class = np.argmax(y, axis=1)
        predicted_class = np.argmax(model(x).cpu().detach().numpy(), axis=1)
        total_correct += np.sum(predicted_class == target_class)
    return total_correct / len(dataset_loader.dataset)


def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)


def makedirs(dirname):
    if not os.path.exists(dirname):
        os.makedirs(dirname)


def get_logger(logpath, filepath, package_files=[], displaying=True, saving=True, debug=False):
    logger = logging.getLogger()
    if debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logger.setLevel(level)
    if saving:
        info_file_handler = logging.FileHandler(logpath, mode="a")
        info_file_handler.setLevel(level)
        logger.addHandler(info_file_handler)
    if displaying:
        console_handler = logging.StreamHandler()
        console_handler.setLevel(level)
        logger.addHandler(console_handler)
    logger.info(filepath)
    with open(filepath, "r") as f:
        logger.info(f.read())

    for f in package_files:
        logger.info(f)
        with open(f, "r") as package_f:
            logger.info(package_f.read())

    return logger


if __name__ == '__main__':

    makedirs(args.save)
    logger = get_logger(logpath=os.path.join(args.save, 'logs'), filepath=os.path.abspath(__file__))
    logger.info(args)

    device = torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')

    is_odenet = args.network == 'odenet'

    downsampling_layers = [
        nn.Conv2d(3, 16, 3, 1),
        norm(16),
        nn.ReLU(inplace=True),
        nn.Conv2d(16, 16, 4, 2, 1),
        norm(16),
        nn.ReLU(inplace=True),
        Flatten(),
    ]


    feature_layers = [ODEBlock(ODEfunc(3600))] 
    fc_layers = [nn.Linear(3600, 10)]

    model = nn.Sequential(*downsampling_layers, *feature_layers, *fc_layers).to(device)

    logger.info(model)
    logger.info('Number of parameters: {}'.format(count_parameters(model)))

    criterion = nn.CrossEntropyLoss().to(device)

    train_loader, test_loader, train_eval_loader = get_data_loaders(
        args.data_aug, args.batch_size, args.test_batch_size
    )

    data_gen = inf_generator(train_loader)
    batches_per_epoch = len(train_loader)

    lr_fn = learning_rate_with_decay(
        args.batch_size, batch_denom=128, batches_per_epoch=batches_per_epoch, boundary_epochs=[60, 100, 140],
        decay_rates=[1, 0.1, 0.01, 0.001]
    )

    optimizer = torch.optim.SGD(model.parameters(), lr=args.lr, momentum=0.9)

    best_acc = 0
    batch_time_meter = RunningAverageMeter()
    f_nfe_meter = RunningAverageMeter()
    b_nfe_meter = RunningAverageMeter()
    end = time.time()

    for itr in range(args.nepochs * batches_per_epoch):

        for param_group in optimizer.param_groups:
            param_group['lr'] = lr_fn(itr)

        optimizer.zero_grad()
        x, y = data_gen.__next__()
        x = x.to(device)
        y = y.to(device)
        logits = model(x)
        loss = criterion(logits, y)

        if is_odenet:
            nfe_forward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        loss.backward()
        optimizer.step()

        if is_odenet:
            nfe_backward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        batch_time_meter.update(time.time() - end)
        if is_odenet:
            f_nfe_meter.update(nfe_forward)
            b_nfe_meter.update(nfe_backward)
        end = time.time()

        if itr % batches_per_epoch == 0:
            with torch.no_grad():
                train_acc = accuracy(model, train_eval_loader)
                val_acc = accuracy(model, test_loader)
                if val_acc > best_acc:
                    torch.save({'state_dict': model.state_dict(), 'args': args}, os.path.join(args.save, 'model.pth'))
                    best_acc = val_acc
                if best_acc > 0.96:
                    break
                logger.info(
                    "Epoch {:04d} | Time {:.3f} ({:.3f}) | NFE-F {:.1f} | NFE-B {:.1f} | "
                    "Train Acc {:.4f} | Test Acc {:.4f}".format(
                        itr // batches_per_epoch, batch_time_meter.val, batch_time_meter.avg, f_nfe_meter.avg,
                        b_nfe_meter.avg, train_acc, val_acc
                    )
                )
    names = []
    params = []
    for name,param in model.named_parameters():
        names.append(name)
        params.append(param.detach().numpy())
    nn1 = dict({'Wb':params,'names':names})
    for name,param in model.named_buffers():
        names.append(name)
        params.append(param.detach().numpy())
    savemat("odecnn_gtsrb_small.mat",nn1)
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb  4 09:04:31 2021

@author: manzand
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 19 15:10:31 2021

@author: manzand
"""

import os
import argparse
import logging
import time
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms
from scipy.io import savemat
import gtsrb_dataset as dataset


parser = argparse.ArgumentParser()
parser.add_argument('--network', type=str, choices=['resnet', 'odenet'], default='odenet')
parser.add_argument('--tol', type=float, default=1e-3)
parser.add_argument('--adjoint', type=eval, default=False, choices=[True, False])
parser.add_argument('--downsampling-method', type=str, default='conv', choices=['conv', 'res'])
parser.add_argument('--nepochs', type=int, default=100)
parser.add_argument('--data_aug', type=eval, default=False, choices=[True, False])
parser.add_argument('--lr', type=float, default=0.01)
parser.add_argument('--batch_size', type=int, default=128)
parser.add_argument('--test_batch_size', type=int, default=1000)

parser.add_argument('--save', type=str, default='./experiment1')
parser.add_argument('--debug', action='store_true')
parser.add_argument('--gpu', type=int, default=0)
args = parser.parse_args()

if args.adjoint:
    from torchdiffeq import odeint_adjoint as odeint
else:
    from torchdiffeq import odeint


def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


def norm(dim):
    return nn.BatchNorm2d(min(64, dim), dim)


class ConcatConv2d(nn.Module):

    def __init__(self, dim_in, dim_out, ksize=3, stride=1, padding=0, dilation=1, groups=1, bias=True, transpose=False):
        super(ConcatConv2d, self).__init__()
        module = nn.ConvTranspose2d if transpose else nn.Conv2d
        self._layer = module(
            dim_in + 1, dim_out, kernel_size=ksize, stride=stride, padding=padding, dilation=dilation, groups=groups,
            bias=bias
        )

    def forward(self, t, x):
        tt = torch.ones_like(x[:, :1, :, :]) * t
        ttx = torch.cat([tt, x], 1)
        return self._layer(ttx)


class ODEfunc(nn.Module):

    def __init__(self,dim):
        super(ODEfunc, self).__init__()
        self.fc1 = nn.Linear(dim,10)
        self.fc2 = nn.Linear(10, dim)
        self.nfe = 0

    def forward(self, t, x):
        self.nfe += 1
        out = self.fc1(x)
        out = self.fc2(out)
        return out


class ODEBlock(nn.Module):

    def __init__(self, odefunc):
        super(ODEBlock, self).__init__()
        self.odefunc = odefunc
        self.integration_time = torch.tensor([0, 1]).float()

    def forward(self, x):
        self.integration_time = self.integration_time.type_as(x)
        out = odeint(self.odefunc, x, self.integration_time, rtol=args.tol, atol=args.tol)
        return out[1]

    @property
    def nfe(self):
        return self.odefunc.nfe

    @nfe.setter
    def nfe(self, value):
        self.odefunc.nfe = value


class Flatten(nn.Module):

    def __init__(self):
        super(Flatten, self).__init__()

    def forward(self, x):
        shape = torch.prod(torch.tensor(x.shape[1:])).item()
        return x.view(-1, shape)


class RunningAverageMeter(object):
    """Computes and stores the average and current value"""

    def __init__(self, momentum=0.99):
        self.momentum = momentum
        self.reset()

    def reset(self):
        self.val = None
        self.avg = 0

    def update(self, val):
        if self.val is None:
            self.avg = val
        else:
            self.avg = self.avg * self.momentum + val * (1 - self.momentum)
        self.val = val


def get_data_loaders(data_aug=False, batch_size=32, test_batch_size=1000, perc=1.0):
    # Create Transforms
    transform = transforms.Compose([
        transforms.Resize((32, 32)),
        transforms.ToTensor(),
        transforms.Normalize((0.3403, 0.3121, 0.3214),
                             (0.2724, 0.2608, 0.2669))
    ])
    
    root_dir = '/home/manzand/Documents/MATLAB/NeuralODEs/gtsrb/data'
    
    # Create Datasets
    trainset = dataset.GTSRB(
        root_dir=root_dir, train=True,  transform=transform)
    testset = dataset.GTSRB(
        root_dir=root_dir, train=False,  transform=transform)
    
    # Load Datasets
    train_loader = torch.utils.data.DataLoader(
        trainset, batch_size=128, shuffle=True, num_workers=2)
    train_eval_loader = torch.utils.data.DataLoader(
        trainset, batch_size=128, shuffle=False, num_workers=2)
    test_loader = torch.utils.data.DataLoader(
        testset, batch_size=128, shuffle=False, num_workers=2)

    return train_loader, test_loader, train_eval_loader


def inf_generator(iterable):
    """Allows training with DataLoaders in a single infinite loop:
        for i, (x, y) in enumerate(inf_generator(train_loader)):
    """
    iterator = iterable.__iter__()
    while True:
        try:
            yield iterator.__next__()
        except StopIteration:
            iterator = iterable.__iter__()


def learning_rate_with_decay(batch_size, batch_denom, batches_per_epoch, boundary_epochs, decay_rates):
    initial_learning_rate = args.lr * batch_size / batch_denom

    boundaries = [int(batches_per_epoch * epoch) for epoch in boundary_epochs]
    vals = [initial_learning_rate * decay for decay in decay_rates]

    def learning_rate_fn(itr):
        lt = [itr < b for b in boundaries] + [True]
        i = np.argmax(lt)
        return vals[i]

    return learning_rate_fn


def one_hot(x, K):
    return np.array(x[:, None] == np.arange(K)[None, :], dtype=int)


def accuracy(model, dataset_loader):
    total_correct = 0
    for x, y in dataset_loader:
        x = x.to(device)
        y = one_hot(np.array(y.numpy()), 10)

        target_class = np.argmax(y, axis=1)
        predicted_class = np.argmax(model(x).cpu().detach().numpy(), axis=1)
        total_correct += np.sum(predicted_class == target_class)
    return total_correct / len(dataset_loader.dataset)


def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)


def makedirs(dirname):
    if not os.path.exists(dirname):
        os.makedirs(dirname)


def get_logger(logpath, filepath, package_files=[], displaying=True, saving=True, debug=False):
    logger = logging.getLogger()
    if debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logger.setLevel(level)
    if saving:
        info_file_handler = logging.FileHandler(logpath, mode="a")
        info_file_handler.setLevel(level)
        logger.addHandler(info_file_handler)
    if displaying:
        console_handler = logging.StreamHandler()
        console_handler.setLevel(level)
        logger.addHandler(console_handler)
    logger.info(filepath)
    with open(filepath, "r") as f:
        logger.info(f.read())

    for f in package_files:
        logger.info(f)
        with open(f, "r") as package_f:
            logger.info(package_f.read())

    return logger


if __name__ == '__main__':

    makedirs(args.save)
    logger = get_logger(logpath=os.path.join(args.save, 'logs'), filepath=os.path.abspath(__file__))
    logger.info(args)

    device = torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')

    is_odenet = args.network == 'odenet'

    downsampling_layers = [
        nn.Conv2d(3, 16, 3, 1),
        norm(16),
        nn.ReLU(inplace=True),
        nn.Conv2d(16, 16, 4, 2, 1),
        norm(16),
        nn.ReLU(inplace=True),
        Flatten(),
    ]


    feature_layers = [ODEBlock(ODEfunc(3600))] 
    fc_layers = [nn.Linear(3600, 10)]

    model = nn.Sequential(*downsampling_layers, *feature_layers, *fc_layers).to(device)

    logger.info(model)
    logger.info('Number of parameters: {}'.format(count_parameters(model)))

    criterion = nn.CrossEntropyLoss().to(device)

    train_loader, test_loader, train_eval_loader = get_data_loaders(
        args.data_aug, args.batch_size, args.test_batch_size
    )

    data_gen = inf_generator(train_loader)
    batches_per_epoch = len(train_loader)

    lr_fn = learning_rate_with_decay(
        args.batch_size, batch_denom=128, batches_per_epoch=batches_per_epoch, boundary_epochs=[60, 100, 140],
        decay_rates=[1, 0.1, 0.01, 0.001]
    )

    optimizer = torch.optim.SGD(model.parameters(), lr=args.lr, momentum=0.9)

    best_acc = 0
    batch_time_meter = RunningAverageMeter()
    f_nfe_meter = RunningAverageMeter()
    b_nfe_meter = RunningAverageMeter()
    end = time.time()

    for itr in range(args.nepochs * batches_per_epoch):

        for param_group in optimizer.param_groups:
            param_group['lr'] = lr_fn(itr)

        optimizer.zero_grad()
        x, y = data_gen.__next__()
        x = x.to(device)
        y = y.to(device)
        logits = model(x)
        loss = criterion(logits, y)

        if is_odenet:
            nfe_forward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        loss.backward()
        optimizer.step()

        if is_odenet:
            nfe_backward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        batch_time_meter.update(time.time() - end)
        if is_odenet:
            f_nfe_meter.update(nfe_forward)
            b_nfe_meter.update(nfe_backward)
        end = time.time()

        if itr % batches_per_epoch == 0:
            with torch.no_grad():
                train_acc = accuracy(model, train_eval_loader)
                val_acc = accuracy(model, test_loader)
                if val_acc > best_acc:
                    torch.save({'state_dict': model.state_dict(), 'args': args}, os.path.join(args.save, 'model.pth'))
                    best_acc = val_acc
                if best_acc > 0.96:
                    break
                logger.info(
                    "Epoch {:04d} | Time {:.3f} ({:.3f}) | NFE-F {:.1f} | NFE-B {:.1f} | "
                    "Train Acc {:.4f} | Test Acc {:.4f}".format(
                        itr // batches_per_epoch, batch_time_meter.val, batch_time_meter.avg, f_nfe_meter.avg,
                        b_nfe_meter.avg, train_acc, val_acc
                    )
                )
    names = []
    params = []
    for name,param in model.named_parameters():
        names.append(name)
        params.append(param.detach().numpy())
    nn1 = dict({'Wb':params,'names':names})
    for name,param in model.named_buffers():
        names.append(name)
        params.append(param.detach().numpy())
    savemat("odecnn_gtsrb_small.mat",nn1)
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb  4 09:04:31 2021

@author: manzand
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 19 15:10:31 2021

@author: manzand
"""

import os
import argparse
import logging
import time
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms
from scipy.io import savemat
import gtsrb_dataset as dataset


parser = argparse.ArgumentParser()
parser.add_argument('--network', type=str, choices=['resnet', 'odenet'], default='odenet')
parser.add_argument('--tol', type=float, default=1e-3)
parser.add_argument('--adjoint', type=eval, default=False, choices=[True, False])
parser.add_argument('--downsampling-method', type=str, default='conv', choices=['conv', 'res'])
parser.add_argument('--nepochs', type=int, default=100)
parser.add_argument('--data_aug', type=eval, default=False, choices=[True, False])
parser.add_argument('--lr', type=float, default=0.01)
parser.add_argument('--batch_size', type=int, default=128)
parser.add_argument('--test_batch_size', type=int, default=1000)

parser.add_argument('--save', type=str, default='./experiment1')
parser.add_argument('--debug', action='store_true')
parser.add_argument('--gpu', type=int, default=0)
args = parser.parse_args()

if args.adjoint:
    from torchdiffeq import odeint_adjoint as odeint
else:
    from torchdiffeq import odeint


def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


def norm(dim):
    return nn.BatchNorm2d(min(64, dim), dim)


class ConcatConv2d(nn.Module):

    def __init__(self, dim_in, dim_out, ksize=3, stride=1, padding=0, dilation=1, groups=1, bias=True, transpose=False):
        super(ConcatConv2d, self).__init__()
        module = nn.ConvTranspose2d if transpose else nn.Conv2d
        self._layer = module(
            dim_in + 1, dim_out, kernel_size=ksize, stride=stride, padding=padding, dilation=dilation, groups=groups,
            bias=bias
        )

    def forward(self, t, x):
        tt = torch.ones_like(x[:, :1, :, :]) * t
        ttx = torch.cat([tt, x], 1)
        return self._layer(ttx)


class ODEfunc(nn.Module):

    def __init__(self,dim):
        super(ODEfunc, self).__init__()
        self.fc1 = nn.Linear(dim,10)
        self.fc2 = nn.Linear(10, dim)
        self.nfe = 0

    def forward(self, t, x):
        self.nfe += 1
        out = self.fc1(x)
        out = self.fc2(out)
        return out


class ODEBlock(nn.Module):

    def __init__(self, odefunc):
        super(ODEBlock, self).__init__()
        self.odefunc = odefunc
        self.integration_time = torch.tensor([0, 1]).float()

    def forward(self, x):
        self.integration_time = self.integration_time.type_as(x)
        out = odeint(self.odefunc, x, self.integration_time, rtol=args.tol, atol=args.tol)
        return out[1]

    @property
    def nfe(self):
        return self.odefunc.nfe

    @nfe.setter
    def nfe(self, value):
        self.odefunc.nfe = value


class Flatten(nn.Module):

    def __init__(self):
        super(Flatten, self).__init__()

    def forward(self, x):
        shape = torch.prod(torch.tensor(x.shape[1:])).item()
        return x.view(-1, shape)


class RunningAverageMeter(object):
    """Computes and stores the average and current value"""

    def __init__(self, momentum=0.99):
        self.momentum = momentum
        self.reset()

    def reset(self):
        self.val = None
        self.avg = 0

    def update(self, val):
        if self.val is None:
            self.avg = val
        else:
            self.avg = self.avg * self.momentum + val * (1 - self.momentum)
        self.val = val


def get_data_loaders(data_aug=False, batch_size=32, test_batch_size=1000, perc=1.0):
    # Create Transforms
    transform = transforms.Compose([
        transforms.Resize((32, 32)),
        transforms.ToTensor(),
        transforms.Normalize((0.3403, 0.3121, 0.3214),
                             (0.2724, 0.2608, 0.2669))
    ])
    
    root_dir = '/home/manzand/Documents/MATLAB/NeuralODEs/gtsrb/data'
    
    # Create Datasets
    trainset = dataset.GTSRB(
        root_dir=root_dir, train=True,  transform=transform)
    testset = dataset.GTSRB(
        root_dir=root_dir, train=False,  transform=transform)
    
    # Load Datasets
    train_loader = torch.utils.data.DataLoader(
        trainset, batch_size=128, shuffle=True, num_workers=2)
    train_eval_loader = torch.utils.data.DataLoader(
        trainset, batch_size=128, shuffle=False, num_workers=2)
    test_loader = torch.utils.data.DataLoader(
        testset, batch_size=128, shuffle=False, num_workers=2)

    return train_loader, test_loader, train_eval_loader


def inf_generator(iterable):
    """Allows training with DataLoaders in a single infinite loop:
        for i, (x, y) in enumerate(inf_generator(train_loader)):
    """
    iterator = iterable.__iter__()
    while True:
        try:
            yield iterator.__next__()
        except StopIteration:
            iterator = iterable.__iter__()


def learning_rate_with_decay(batch_size, batch_denom, batches_per_epoch, boundary_epochs, decay_rates):
    initial_learning_rate = args.lr * batch_size / batch_denom

    boundaries = [int(batches_per_epoch * epoch) for epoch in boundary_epochs]
    vals = [initial_learning_rate * decay for decay in decay_rates]

    def learning_rate_fn(itr):
        lt = [itr < b for b in boundaries] + [True]
        i = np.argmax(lt)
        return vals[i]

    return learning_rate_fn


def one_hot(x, K):
    return np.array(x[:, None] == np.arange(K)[None, :], dtype=int)


def accuracy(model, dataset_loader):
    total_correct = 0
    for x, y in dataset_loader:
        x = x.to(device)
        y = one_hot(np.array(y.numpy()), 10)

        target_class = np.argmax(y, axis=1)
        predicted_class = np.argmax(model(x).cpu().detach().numpy(), axis=1)
        total_correct += np.sum(predicted_class == target_class)
    return total_correct / len(dataset_loader.dataset)


def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)


def makedirs(dirname):
    if not os.path.exists(dirname):
        os.makedirs(dirname)


def get_logger(logpath, filepath, package_files=[], displaying=True, saving=True, debug=False):
    logger = logging.getLogger()
    if debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logger.setLevel(level)
    if saving:
        info_file_handler = logging.FileHandler(logpath, mode="a")
        info_file_handler.setLevel(level)
        logger.addHandler(info_file_handler)
    if displaying:
        console_handler = logging.StreamHandler()
        console_handler.setLevel(level)
        logger.addHandler(console_handler)
    logger.info(filepath)
    with open(filepath, "r") as f:
        logger.info(f.read())

    for f in package_files:
        logger.info(f)
        with open(f, "r") as package_f:
            logger.info(package_f.read())

    return logger


if __name__ == '__main__':

    makedirs(args.save)
    logger = get_logger(logpath=os.path.join(args.save, 'logs'), filepath=os.path.abspath(__file__))
    logger.info(args)

    device = torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')

    is_odenet = args.network == 'odenet'

    downsampling_layers = [
        nn.Conv2d(3, 16, 3, 1),
        norm(16),
        nn.ReLU(inplace=True),
        nn.Conv2d(16, 16, 4, 2, 1),
        norm(16),
        nn.ReLU(inplace=True),
        Flatten(),
    ]


    feature_layers = [ODEBlock(ODEfunc(3600))] 
    fc_layers = [nn.Linear(3600, 10)]

    model = nn.Sequential(*downsampling_layers, *feature_layers, *fc_layers).to(device)

    logger.info(model)
    logger.info('Number of parameters: {}'.format(count_parameters(model)))

    criterion = nn.CrossEntropyLoss().to(device)

    train_loader, test_loader, train_eval_loader = get_data_loaders(
        args.data_aug, args.batch_size, args.test_batch_size
    )

    data_gen = inf_generator(train_loader)
    batches_per_epoch = len(train_loader)

    lr_fn = learning_rate_with_decay(
        args.batch_size, batch_denom=128, batches_per_epoch=batches_per_epoch, boundary_epochs=[60, 100, 140],
        decay_rates=[1, 0.1, 0.01, 0.001]
    )

    optimizer = torch.optim.SGD(model.parameters(), lr=args.lr, momentum=0.9)

    best_acc = 0
    batch_time_meter = RunningAverageMeter()
    f_nfe_meter = RunningAverageMeter()
    b_nfe_meter = RunningAverageMeter()
    end = time.time()

    for itr in range(args.nepochs * batches_per_epoch):

        for param_group in optimizer.param_groups:
            param_group['lr'] = lr_fn(itr)

        optimizer.zero_grad()
        x, y = data_gen.__next__()
        x = x.to(device)
        y = y.to(device)
        logits = model(x)
        loss = criterion(logits, y)

        if is_odenet:
            nfe_forward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        loss.backward()
        optimizer.step()

        if is_odenet:
            nfe_backward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        batch_time_meter.update(time.time() - end)
        if is_odenet:
            f_nfe_meter.update(nfe_forward)
            b_nfe_meter.update(nfe_backward)
        end = time.time()

        if itr % batches_per_epoch == 0:
            with torch.no_grad():
                train_acc = accuracy(model, train_eval_loader)
                val_acc = accuracy(model, test_loader)
                if val_acc > best_acc:
                    torch.save({'state_dict': model.state_dict(), 'args': args}, os.path.join(args.save, 'model.pth'))
                    best_acc = val_acc
                if best_acc > 0.96:
                    break
                logger.info(
                    "Epoch {:04d} | Time {:.3f} ({:.3f}) | NFE-F {:.1f} | NFE-B {:.1f} | "
                    "Train Acc {:.4f} | Test Acc {:.4f}".format(
                        itr // batches_per_epoch, batch_time_meter.val, batch_time_meter.avg, f_nfe_meter.avg,
                        b_nfe_meter.avg, train_acc, val_acc
                    )
                )
    names = []
    params = []
    for name,param in model.named_parameters():
        names.append(name)
        params.append(param.detach().numpy())
    nn1 = dict({'Wb':params,'names':names})
    for name,param in model.named_buffers():
        names.append(name)
        params.append(param.detach().numpy())
    savemat("odecnn_gtsrb_small.mat",nn1)
Namespace(adjoint=False, batch_size=128, data_aug=False, debug=False, downsampling_method='conv', gpu=0, lr=0.01, nepochs=100, network='odenet', save='./experiment1', test_batch_size=1000, tol=0.001)
Namespace(adjoint=False, batch_size=128, data_aug=False, debug=False, downsampling_method='conv', gpu=0, lr=0.01, nepochs=100, network='odenet', save='./experiment1', test_batch_size=1000, tol=0.001)
Namespace(adjoint=False, batch_size=128, data_aug=False, debug=False, downsampling_method='conv', gpu=0, lr=0.01, nepochs=100, network='odenet', save='./experiment1', test_batch_size=1000, tol=0.001)
Sequential(
  (0): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1))
  (1): BatchNorm2d(16, eps=16, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (4): BatchNorm2d(16, eps=16, momentum=0.1, affine=True, track_running_stats=True)
  (5): ReLU(inplace=True)
  (6): Flatten()
  (7): ODEBlock(
    (odefunc): ODEfunc(
      (fc1): Linear(in_features=3600, out_features=10, bias=True)
      (fc2): Linear(in_features=10, out_features=3600, bias=True)
    )
  )
  (8): Linear(in_features=3600, out_features=10, bias=True)
)
Sequential(
  (0): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1))
  (1): BatchNorm2d(16, eps=16, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (4): BatchNorm2d(16, eps=16, momentum=0.1, affine=True, track_running_stats=True)
  (5): ReLU(inplace=True)
  (6): Flatten()
  (7): ODEBlock(
    (odefunc): ODEfunc(
      (fc1): Linear(in_features=3600, out_features=10, bias=True)
      (fc2): Linear(in_features=10, out_features=3600, bias=True)
    )
  )
  (8): Linear(in_features=3600, out_features=10, bias=True)
)
Sequential(
  (0): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1))
  (1): BatchNorm2d(16, eps=16, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (4): BatchNorm2d(16, eps=16, momentum=0.1, affine=True, track_running_stats=True)
  (5): ReLU(inplace=True)
  (6): Flatten()
  (7): ODEBlock(
    (odefunc): ODEfunc(
      (fc1): Linear(in_features=3600, out_features=10, bias=True)
      (fc2): Linear(in_features=10, out_features=3600, bias=True)
    )
  )
  (8): Linear(in_features=3600, out_features=10, bias=True)
)
Number of parameters: 116244
Number of parameters: 116244
Number of parameters: 116244
/home/manzand/Documents/Python/neuralODE_examples/gtsrb/odenet_gtsrb_example_small.py
/home/manzand/Documents/Python/neuralODE_examples/gtsrb/odenet_gtsrb_example_small.py
/home/manzand/Documents/Python/neuralODE_examples/gtsrb/odenet_gtsrb_example_small.py
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb  4 09:04:31 2021

@author: manzand
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 19 15:10:31 2021

@author: manzand
"""

import os
import argparse
import logging
import time
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms
from scipy.io import savemat
import gtsrb_dataset as dataset


parser = argparse.ArgumentParser()
parser.add_argument('--network', type=str, choices=['resnet', 'odenet'], default='odenet')
parser.add_argument('--tol', type=float, default=1e-3)
parser.add_argument('--adjoint', type=eval, default=False, choices=[True, False])
parser.add_argument('--downsampling-method', type=str, default='conv', choices=['conv', 'res'])
parser.add_argument('--nepochs', type=int, default=100)
parser.add_argument('--data_aug', type=eval, default=False, choices=[True, False])
parser.add_argument('--lr', type=float, default=0.01)
parser.add_argument('--batch_size', type=int, default=128)
parser.add_argument('--test_batch_size', type=int, default=1000)

parser.add_argument('--save', type=str, default='./experiment1')
parser.add_argument('--debug', action='store_true')
parser.add_argument('--gpu', type=int, default=0)
args = parser.parse_args()

if args.adjoint:
    from torchdiffeq import odeint_adjoint as odeint
else:
    from torchdiffeq import odeint


def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


def norm(dim):
    return nn.BatchNorm2d(min(64, dim), dim)


class ConcatConv2d(nn.Module):

    def __init__(self, dim_in, dim_out, ksize=3, stride=1, padding=0, dilation=1, groups=1, bias=True, transpose=False):
        super(ConcatConv2d, self).__init__()
        module = nn.ConvTranspose2d if transpose else nn.Conv2d
        self._layer = module(
            dim_in + 1, dim_out, kernel_size=ksize, stride=stride, padding=padding, dilation=dilation, groups=groups,
            bias=bias
        )

    def forward(self, t, x):
        tt = torch.ones_like(x[:, :1, :, :]) * t
        ttx = torch.cat([tt, x], 1)
        return self._layer(ttx)


class ODEfunc(nn.Module):

    def __init__(self,dim):
        super(ODEfunc, self).__init__()
        self.fc1 = nn.Linear(dim,10)
        self.fc2 = nn.Linear(10, dim)
        self.nfe = 0

    def forward(self, t, x):
        self.nfe += 1
        out = self.fc1(x)
        out = self.fc2(out)
        return out


class ODEBlock(nn.Module):

    def __init__(self, odefunc):
        super(ODEBlock, self).__init__()
        self.odefunc = odefunc
        self.integration_time = torch.tensor([0, 1]).float()

    def forward(self, x):
        self.integration_time = self.integration_time.type_as(x)
        out = odeint(self.odefunc, x, self.integration_time, rtol=args.tol, atol=args.tol)
        return out[1]

    @property
    def nfe(self):
        return self.odefunc.nfe

    @nfe.setter
    def nfe(self, value):
        self.odefunc.nfe = value


class Flatten(nn.Module):

    def __init__(self):
        super(Flatten, self).__init__()

    def forward(self, x):
        shape = torch.prod(torch.tensor(x.shape[1:])).item()
        return x.view(-1, shape)


class RunningAverageMeter(object):
    """Computes and stores the average and current value"""

    def __init__(self, momentum=0.99):
        self.momentum = momentum
        self.reset()

    def reset(self):
        self.val = None
        self.avg = 0

    def update(self, val):
        if self.val is None:
            self.avg = val
        else:
            self.avg = self.avg * self.momentum + val * (1 - self.momentum)
        self.val = val


def get_data_loaders(data_aug=False, batch_size=32, test_batch_size=1000, perc=1.0):
    # Create Transforms
    transform = transforms.Compose([
        transforms.Resize((32, 32)),
        transforms.ToTensor(),
        transforms.Normalize((0.3403, 0.3121, 0.3214),
                             (0.2724, 0.2608, 0.2669))
    ])
    
    root_dir = '/home/manzand/Documents/MATLAB/NeuralODEs/gtsrb/data'
    
    # Create Datasets
    trainset = dataset.GTSRB(
        root_dir=root_dir, train=True,  transform=transform)
    testset = dataset.GTSRB(
        root_dir=root_dir, train=False,  transform=transform)
    
    # Load Datasets
    train_loader = torch.utils.data.DataLoader(
        trainset, batch_size=128, shuffle=True, num_workers=2)
    train_eval_loader = torch.utils.data.DataLoader(
        trainset, batch_size=128, shuffle=False, num_workers=2)
    test_loader = torch.utils.data.DataLoader(
        testset, batch_size=128, shuffle=False, num_workers=2)

    return train_loader, test_loader, train_eval_loader


def inf_generator(iterable):
    """Allows training with DataLoaders in a single infinite loop:
        for i, (x, y) in enumerate(inf_generator(train_loader)):
    """
    iterator = iterable.__iter__()
    while True:
        try:
            yield iterator.__next__()
        except StopIteration:
            iterator = iterable.__iter__()


def learning_rate_with_decay(batch_size, batch_denom, batches_per_epoch, boundary_epochs, decay_rates):
    initial_learning_rate = args.lr * batch_size / batch_denom

    boundaries = [int(batches_per_epoch * epoch) for epoch in boundary_epochs]
    vals = [initial_learning_rate * decay for decay in decay_rates]

    def learning_rate_fn(itr):
        lt = [itr < b for b in boundaries] + [True]
        i = np.argmax(lt)
        return vals[i]

    return learning_rate_fn


def one_hot(x, K):
    return np.array(x[:, None] == np.arange(K)[None, :], dtype=int)


def accuracy(model, dataset_loader):
    total_correct = 0
    for x, y in dataset_loader:
        x = x.to(device)
        y = one_hot(np.array(y.numpy()), 10)

        target_class = np.argmax(y, axis=1)
        predicted_class = np.argmax(model(x).cpu().detach().numpy(), axis=1)
        total_correct += np.sum(predicted_class == target_class)
    return total_correct / len(dataset_loader.dataset)


def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)


def makedirs(dirname):
    if not os.path.exists(dirname):
        os.makedirs(dirname)


def get_logger(logpath, filepath, package_files=[], displaying=True, saving=True, debug=False):
    logger = logging.getLogger()
    if debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logger.setLevel(level)
    if saving:
        info_file_handler = logging.FileHandler(logpath, mode="a")
        info_file_handler.setLevel(level)
        logger.addHandler(info_file_handler)
    if displaying:
        console_handler = logging.StreamHandler()
        console_handler.setLevel(level)
        logger.addHandler(console_handler)
    logger.info(filepath)
    with open(filepath, "r") as f:
        logger.info(f.read())

    for f in package_files:
        logger.info(f)
        with open(f, "r") as package_f:
            logger.info(package_f.read())

    return logger


if __name__ == '__main__':

    makedirs(args.save)
    logger = get_logger(logpath=os.path.join(args.save, 'logs'), filepath=os.path.abspath(__file__))
    logger.info(args)

    device = torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')

    is_odenet = args.network == 'odenet'

    downsampling_layers = [
        nn.Conv2d(3, 16, 3, 1),
        norm(16),
        nn.ReLU(inplace=True),
        nn.Conv2d(16, 16, 4, 2, 1),
        norm(16),
        nn.ReLU(inplace=True),
        Flatten(),
    ]


    feature_layers = [ODEBlock(ODEfunc(3600))] 
    fc_layers = [nn.Linear(3600, 42)]

    model = nn.Sequential(*downsampling_layers, *feature_layers, *fc_layers).to(device)

    logger.info(model)
    logger.info('Number of parameters: {}'.format(count_parameters(model)))

    criterion = nn.CrossEntropyLoss().to(device)

    train_loader, test_loader, train_eval_loader = get_data_loaders(
        args.data_aug, args.batch_size, args.test_batch_size
    )

    data_gen = inf_generator(train_loader)
    batches_per_epoch = len(train_loader)

    lr_fn = learning_rate_with_decay(
        args.batch_size, batch_denom=128, batches_per_epoch=batches_per_epoch, boundary_epochs=[60, 100, 140],
        decay_rates=[1, 0.1, 0.01, 0.001]
    )

    optimizer = torch.optim.SGD(model.parameters(), lr=args.lr, momentum=0.9)

    best_acc = 0
    batch_time_meter = RunningAverageMeter()
    f_nfe_meter = RunningAverageMeter()
    b_nfe_meter = RunningAverageMeter()
    end = time.time()

    for itr in range(args.nepochs * batches_per_epoch):

        for param_group in optimizer.param_groups:
            param_group['lr'] = lr_fn(itr)

        optimizer.zero_grad()
        x, y = data_gen.__next__()
        x = x.to(device)
        y = y.to(device)
        logits = model(x)
        loss = criterion(logits, y)

        if is_odenet:
            nfe_forward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        loss.backward()
        optimizer.step()

        if is_odenet:
            nfe_backward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        batch_time_meter.update(time.time() - end)
        if is_odenet:
            f_nfe_meter.update(nfe_forward)
            b_nfe_meter.update(nfe_backward)
        end = time.time()

        if itr % batches_per_epoch == 0:
            with torch.no_grad():
                train_acc = accuracy(model, train_eval_loader)
                val_acc = accuracy(model, test_loader)
                if val_acc > best_acc:
                    torch.save({'state_dict': model.state_dict(), 'args': args}, os.path.join(args.save, 'model.pth'))
                    best_acc = val_acc
                if best_acc > 0.96:
                    break
                logger.info(
                    "Epoch {:04d} | Time {:.3f} ({:.3f}) | NFE-F {:.1f} | NFE-B {:.1f} | "
                    "Train Acc {:.4f} | Test Acc {:.4f}".format(
                        itr // batches_per_epoch, batch_time_meter.val, batch_time_meter.avg, f_nfe_meter.avg,
                        b_nfe_meter.avg, train_acc, val_acc
                    )
                )
    names = []
    params = []
    for name,param in model.named_parameters():
        names.append(name)
        params.append(param.detach().numpy())
    nn1 = dict({'Wb':params,'names':names})
    for name,param in model.named_buffers():
        names.append(name)
        params.append(param.detach().numpy())
    savemat("odecnn_gtsrb_small.mat",nn1)
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb  4 09:04:31 2021

@author: manzand
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 19 15:10:31 2021

@author: manzand
"""

import os
import argparse
import logging
import time
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms
from scipy.io import savemat
import gtsrb_dataset as dataset


parser = argparse.ArgumentParser()
parser.add_argument('--network', type=str, choices=['resnet', 'odenet'], default='odenet')
parser.add_argument('--tol', type=float, default=1e-3)
parser.add_argument('--adjoint', type=eval, default=False, choices=[True, False])
parser.add_argument('--downsampling-method', type=str, default='conv', choices=['conv', 'res'])
parser.add_argument('--nepochs', type=int, default=100)
parser.add_argument('--data_aug', type=eval, default=False, choices=[True, False])
parser.add_argument('--lr', type=float, default=0.01)
parser.add_argument('--batch_size', type=int, default=128)
parser.add_argument('--test_batch_size', type=int, default=1000)

parser.add_argument('--save', type=str, default='./experiment1')
parser.add_argument('--debug', action='store_true')
parser.add_argument('--gpu', type=int, default=0)
args = parser.parse_args()

if args.adjoint:
    from torchdiffeq import odeint_adjoint as odeint
else:
    from torchdiffeq import odeint


def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


def norm(dim):
    return nn.BatchNorm2d(min(64, dim), dim)


class ConcatConv2d(nn.Module):

    def __init__(self, dim_in, dim_out, ksize=3, stride=1, padding=0, dilation=1, groups=1, bias=True, transpose=False):
        super(ConcatConv2d, self).__init__()
        module = nn.ConvTranspose2d if transpose else nn.Conv2d
        self._layer = module(
            dim_in + 1, dim_out, kernel_size=ksize, stride=stride, padding=padding, dilation=dilation, groups=groups,
            bias=bias
        )

    def forward(self, t, x):
        tt = torch.ones_like(x[:, :1, :, :]) * t
        ttx = torch.cat([tt, x], 1)
        return self._layer(ttx)


class ODEfunc(nn.Module):

    def __init__(self,dim):
        super(ODEfunc, self).__init__()
        self.fc1 = nn.Linear(dim,10)
        self.fc2 = nn.Linear(10, dim)
        self.nfe = 0

    def forward(self, t, x):
        self.nfe += 1
        out = self.fc1(x)
        out = self.fc2(out)
        return out


class ODEBlock(nn.Module):

    def __init__(self, odefunc):
        super(ODEBlock, self).__init__()
        self.odefunc = odefunc
        self.integration_time = torch.tensor([0, 1]).float()

    def forward(self, x):
        self.integration_time = self.integration_time.type_as(x)
        out = odeint(self.odefunc, x, self.integration_time, rtol=args.tol, atol=args.tol)
        return out[1]

    @property
    def nfe(self):
        return self.odefunc.nfe

    @nfe.setter
    def nfe(self, value):
        self.odefunc.nfe = value


class Flatten(nn.Module):

    def __init__(self):
        super(Flatten, self).__init__()

    def forward(self, x):
        shape = torch.prod(torch.tensor(x.shape[1:])).item()
        return x.view(-1, shape)


class RunningAverageMeter(object):
    """Computes and stores the average and current value"""

    def __init__(self, momentum=0.99):
        self.momentum = momentum
        self.reset()

    def reset(self):
        self.val = None
        self.avg = 0

    def update(self, val):
        if self.val is None:
            self.avg = val
        else:
            self.avg = self.avg * self.momentum + val * (1 - self.momentum)
        self.val = val


def get_data_loaders(data_aug=False, batch_size=32, test_batch_size=1000, perc=1.0):
    # Create Transforms
    transform = transforms.Compose([
        transforms.Resize((32, 32)),
        transforms.ToTensor(),
        transforms.Normalize((0.3403, 0.3121, 0.3214),
                             (0.2724, 0.2608, 0.2669))
    ])
    
    root_dir = '/home/manzand/Documents/MATLAB/NeuralODEs/gtsrb/data'
    
    # Create Datasets
    trainset = dataset.GTSRB(
        root_dir=root_dir, train=True,  transform=transform)
    testset = dataset.GTSRB(
        root_dir=root_dir, train=False,  transform=transform)
    
    # Load Datasets
    train_loader = torch.utils.data.DataLoader(
        trainset, batch_size=128, shuffle=True, num_workers=2)
    train_eval_loader = torch.utils.data.DataLoader(
        trainset, batch_size=128, shuffle=False, num_workers=2)
    test_loader = torch.utils.data.DataLoader(
        testset, batch_size=128, shuffle=False, num_workers=2)

    return train_loader, test_loader, train_eval_loader


def inf_generator(iterable):
    """Allows training with DataLoaders in a single infinite loop:
        for i, (x, y) in enumerate(inf_generator(train_loader)):
    """
    iterator = iterable.__iter__()
    while True:
        try:
            yield iterator.__next__()
        except StopIteration:
            iterator = iterable.__iter__()


def learning_rate_with_decay(batch_size, batch_denom, batches_per_epoch, boundary_epochs, decay_rates):
    initial_learning_rate = args.lr * batch_size / batch_denom

    boundaries = [int(batches_per_epoch * epoch) for epoch in boundary_epochs]
    vals = [initial_learning_rate * decay for decay in decay_rates]

    def learning_rate_fn(itr):
        lt = [itr < b for b in boundaries] + [True]
        i = np.argmax(lt)
        return vals[i]

    return learning_rate_fn


def one_hot(x, K):
    return np.array(x[:, None] == np.arange(K)[None, :], dtype=int)


def accuracy(model, dataset_loader):
    total_correct = 0
    for x, y in dataset_loader:
        x = x.to(device)
        y = one_hot(np.array(y.numpy()), 10)

        target_class = np.argmax(y, axis=1)
        predicted_class = np.argmax(model(x).cpu().detach().numpy(), axis=1)
        total_correct += np.sum(predicted_class == target_class)
    return total_correct / len(dataset_loader.dataset)


def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)


def makedirs(dirname):
    if not os.path.exists(dirname):
        os.makedirs(dirname)


def get_logger(logpath, filepath, package_files=[], displaying=True, saving=True, debug=False):
    logger = logging.getLogger()
    if debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logger.setLevel(level)
    if saving:
        info_file_handler = logging.FileHandler(logpath, mode="a")
        info_file_handler.setLevel(level)
        logger.addHandler(info_file_handler)
    if displaying:
        console_handler = logging.StreamHandler()
        console_handler.setLevel(level)
        logger.addHandler(console_handler)
    logger.info(filepath)
    with open(filepath, "r") as f:
        logger.info(f.read())

    for f in package_files:
        logger.info(f)
        with open(f, "r") as package_f:
            logger.info(package_f.read())

    return logger


if __name__ == '__main__':

    makedirs(args.save)
    logger = get_logger(logpath=os.path.join(args.save, 'logs'), filepath=os.path.abspath(__file__))
    logger.info(args)

    device = torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')

    is_odenet = args.network == 'odenet'

    downsampling_layers = [
        nn.Conv2d(3, 16, 3, 1),
        norm(16),
        nn.ReLU(inplace=True),
        nn.Conv2d(16, 16, 4, 2, 1),
        norm(16),
        nn.ReLU(inplace=True),
        Flatten(),
    ]


    feature_layers = [ODEBlock(ODEfunc(3600))] 
    fc_layers = [nn.Linear(3600, 42)]

    model = nn.Sequential(*downsampling_layers, *feature_layers, *fc_layers).to(device)

    logger.info(model)
    logger.info('Number of parameters: {}'.format(count_parameters(model)))

    criterion = nn.CrossEntropyLoss().to(device)

    train_loader, test_loader, train_eval_loader = get_data_loaders(
        args.data_aug, args.batch_size, args.test_batch_size
    )

    data_gen = inf_generator(train_loader)
    batches_per_epoch = len(train_loader)

    lr_fn = learning_rate_with_decay(
        args.batch_size, batch_denom=128, batches_per_epoch=batches_per_epoch, boundary_epochs=[60, 100, 140],
        decay_rates=[1, 0.1, 0.01, 0.001]
    )

    optimizer = torch.optim.SGD(model.parameters(), lr=args.lr, momentum=0.9)

    best_acc = 0
    batch_time_meter = RunningAverageMeter()
    f_nfe_meter = RunningAverageMeter()
    b_nfe_meter = RunningAverageMeter()
    end = time.time()

    for itr in range(args.nepochs * batches_per_epoch):

        for param_group in optimizer.param_groups:
            param_group['lr'] = lr_fn(itr)

        optimizer.zero_grad()
        x, y = data_gen.__next__()
        x = x.to(device)
        y = y.to(device)
        logits = model(x)
        loss = criterion(logits, y)

        if is_odenet:
            nfe_forward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        loss.backward()
        optimizer.step()

        if is_odenet:
            nfe_backward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        batch_time_meter.update(time.time() - end)
        if is_odenet:
            f_nfe_meter.update(nfe_forward)
            b_nfe_meter.update(nfe_backward)
        end = time.time()

        if itr % batches_per_epoch == 0:
            with torch.no_grad():
                train_acc = accuracy(model, train_eval_loader)
                val_acc = accuracy(model, test_loader)
                if val_acc > best_acc:
                    torch.save({'state_dict': model.state_dict(), 'args': args}, os.path.join(args.save, 'model.pth'))
                    best_acc = val_acc
                if best_acc > 0.96:
                    break
                logger.info(
                    "Epoch {:04d} | Time {:.3f} ({:.3f}) | NFE-F {:.1f} | NFE-B {:.1f} | "
                    "Train Acc {:.4f} | Test Acc {:.4f}".format(
                        itr // batches_per_epoch, batch_time_meter.val, batch_time_meter.avg, f_nfe_meter.avg,
                        b_nfe_meter.avg, train_acc, val_acc
                    )
                )
    names = []
    params = []
    for name,param in model.named_parameters():
        names.append(name)
        params.append(param.detach().numpy())
    nn1 = dict({'Wb':params,'names':names})
    for name,param in model.named_buffers():
        names.append(name)
        params.append(param.detach().numpy())
    savemat("odecnn_gtsrb_small.mat",nn1)
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb  4 09:04:31 2021

@author: manzand
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 19 15:10:31 2021

@author: manzand
"""

import os
import argparse
import logging
import time
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms
from scipy.io import savemat
import gtsrb_dataset as dataset


parser = argparse.ArgumentParser()
parser.add_argument('--network', type=str, choices=['resnet', 'odenet'], default='odenet')
parser.add_argument('--tol', type=float, default=1e-3)
parser.add_argument('--adjoint', type=eval, default=False, choices=[True, False])
parser.add_argument('--downsampling-method', type=str, default='conv', choices=['conv', 'res'])
parser.add_argument('--nepochs', type=int, default=100)
parser.add_argument('--data_aug', type=eval, default=False, choices=[True, False])
parser.add_argument('--lr', type=float, default=0.01)
parser.add_argument('--batch_size', type=int, default=128)
parser.add_argument('--test_batch_size', type=int, default=1000)

parser.add_argument('--save', type=str, default='./experiment1')
parser.add_argument('--debug', action='store_true')
parser.add_argument('--gpu', type=int, default=0)
args = parser.parse_args()

if args.adjoint:
    from torchdiffeq import odeint_adjoint as odeint
else:
    from torchdiffeq import odeint


def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


def norm(dim):
    return nn.BatchNorm2d(min(64, dim), dim)


class ConcatConv2d(nn.Module):

    def __init__(self, dim_in, dim_out, ksize=3, stride=1, padding=0, dilation=1, groups=1, bias=True, transpose=False):
        super(ConcatConv2d, self).__init__()
        module = nn.ConvTranspose2d if transpose else nn.Conv2d
        self._layer = module(
            dim_in + 1, dim_out, kernel_size=ksize, stride=stride, padding=padding, dilation=dilation, groups=groups,
            bias=bias
        )

    def forward(self, t, x):
        tt = torch.ones_like(x[:, :1, :, :]) * t
        ttx = torch.cat([tt, x], 1)
        return self._layer(ttx)


class ODEfunc(nn.Module):

    def __init__(self,dim):
        super(ODEfunc, self).__init__()
        self.fc1 = nn.Linear(dim,10)
        self.fc2 = nn.Linear(10, dim)
        self.nfe = 0

    def forward(self, t, x):
        self.nfe += 1
        out = self.fc1(x)
        out = self.fc2(out)
        return out


class ODEBlock(nn.Module):

    def __init__(self, odefunc):
        super(ODEBlock, self).__init__()
        self.odefunc = odefunc
        self.integration_time = torch.tensor([0, 1]).float()

    def forward(self, x):
        self.integration_time = self.integration_time.type_as(x)
        out = odeint(self.odefunc, x, self.integration_time, rtol=args.tol, atol=args.tol)
        return out[1]

    @property
    def nfe(self):
        return self.odefunc.nfe

    @nfe.setter
    def nfe(self, value):
        self.odefunc.nfe = value


class Flatten(nn.Module):

    def __init__(self):
        super(Flatten, self).__init__()

    def forward(self, x):
        shape = torch.prod(torch.tensor(x.shape[1:])).item()
        return x.view(-1, shape)


class RunningAverageMeter(object):
    """Computes and stores the average and current value"""

    def __init__(self, momentum=0.99):
        self.momentum = momentum
        self.reset()

    def reset(self):
        self.val = None
        self.avg = 0

    def update(self, val):
        if self.val is None:
            self.avg = val
        else:
            self.avg = self.avg * self.momentum + val * (1 - self.momentum)
        self.val = val


def get_data_loaders(data_aug=False, batch_size=32, test_batch_size=1000, perc=1.0):
    # Create Transforms
    transform = transforms.Compose([
        transforms.Resize((32, 32)),
        transforms.ToTensor(),
        transforms.Normalize((0.3403, 0.3121, 0.3214),
                             (0.2724, 0.2608, 0.2669))
    ])
    
    root_dir = '/home/manzand/Documents/MATLAB/NeuralODEs/gtsrb/data'
    
    # Create Datasets
    trainset = dataset.GTSRB(
        root_dir=root_dir, train=True,  transform=transform)
    testset = dataset.GTSRB(
        root_dir=root_dir, train=False,  transform=transform)
    
    # Load Datasets
    train_loader = torch.utils.data.DataLoader(
        trainset, batch_size=128, shuffle=True, num_workers=2)
    train_eval_loader = torch.utils.data.DataLoader(
        trainset, batch_size=128, shuffle=False, num_workers=2)
    test_loader = torch.utils.data.DataLoader(
        testset, batch_size=128, shuffle=False, num_workers=2)

    return train_loader, test_loader, train_eval_loader


def inf_generator(iterable):
    """Allows training with DataLoaders in a single infinite loop:
        for i, (x, y) in enumerate(inf_generator(train_loader)):
    """
    iterator = iterable.__iter__()
    while True:
        try:
            yield iterator.__next__()
        except StopIteration:
            iterator = iterable.__iter__()


def learning_rate_with_decay(batch_size, batch_denom, batches_per_epoch, boundary_epochs, decay_rates):
    initial_learning_rate = args.lr * batch_size / batch_denom

    boundaries = [int(batches_per_epoch * epoch) for epoch in boundary_epochs]
    vals = [initial_learning_rate * decay for decay in decay_rates]

    def learning_rate_fn(itr):
        lt = [itr < b for b in boundaries] + [True]
        i = np.argmax(lt)
        return vals[i]

    return learning_rate_fn


def one_hot(x, K):
    return np.array(x[:, None] == np.arange(K)[None, :], dtype=int)


def accuracy(model, dataset_loader):
    total_correct = 0
    for x, y in dataset_loader:
        x = x.to(device)
        y = one_hot(np.array(y.numpy()), 10)

        target_class = np.argmax(y, axis=1)
        predicted_class = np.argmax(model(x).cpu().detach().numpy(), axis=1)
        total_correct += np.sum(predicted_class == target_class)
    return total_correct / len(dataset_loader.dataset)


def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)


def makedirs(dirname):
    if not os.path.exists(dirname):
        os.makedirs(dirname)


def get_logger(logpath, filepath, package_files=[], displaying=True, saving=True, debug=False):
    logger = logging.getLogger()
    if debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logger.setLevel(level)
    if saving:
        info_file_handler = logging.FileHandler(logpath, mode="a")
        info_file_handler.setLevel(level)
        logger.addHandler(info_file_handler)
    if displaying:
        console_handler = logging.StreamHandler()
        console_handler.setLevel(level)
        logger.addHandler(console_handler)
    logger.info(filepath)
    with open(filepath, "r") as f:
        logger.info(f.read())

    for f in package_files:
        logger.info(f)
        with open(f, "r") as package_f:
            logger.info(package_f.read())

    return logger


if __name__ == '__main__':

    makedirs(args.save)
    logger = get_logger(logpath=os.path.join(args.save, 'logs'), filepath=os.path.abspath(__file__))
    logger.info(args)

    device = torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')

    is_odenet = args.network == 'odenet'

    downsampling_layers = [
        nn.Conv2d(3, 16, 3, 1),
        norm(16),
        nn.ReLU(inplace=True),
        nn.Conv2d(16, 16, 4, 2, 1),
        norm(16),
        nn.ReLU(inplace=True),
        Flatten(),
    ]


    feature_layers = [ODEBlock(ODEfunc(3600))] 
    fc_layers = [nn.Linear(3600, 42)]

    model = nn.Sequential(*downsampling_layers, *feature_layers, *fc_layers).to(device)

    logger.info(model)
    logger.info('Number of parameters: {}'.format(count_parameters(model)))

    criterion = nn.CrossEntropyLoss().to(device)

    train_loader, test_loader, train_eval_loader = get_data_loaders(
        args.data_aug, args.batch_size, args.test_batch_size
    )

    data_gen = inf_generator(train_loader)
    batches_per_epoch = len(train_loader)

    lr_fn = learning_rate_with_decay(
        args.batch_size, batch_denom=128, batches_per_epoch=batches_per_epoch, boundary_epochs=[60, 100, 140],
        decay_rates=[1, 0.1, 0.01, 0.001]
    )

    optimizer = torch.optim.SGD(model.parameters(), lr=args.lr, momentum=0.9)

    best_acc = 0
    batch_time_meter = RunningAverageMeter()
    f_nfe_meter = RunningAverageMeter()
    b_nfe_meter = RunningAverageMeter()
    end = time.time()

    for itr in range(args.nepochs * batches_per_epoch):

        for param_group in optimizer.param_groups:
            param_group['lr'] = lr_fn(itr)

        optimizer.zero_grad()
        x, y = data_gen.__next__()
        x = x.to(device)
        y = y.to(device)
        logits = model(x)
        loss = criterion(logits, y)

        if is_odenet:
            nfe_forward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        loss.backward()
        optimizer.step()

        if is_odenet:
            nfe_backward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        batch_time_meter.update(time.time() - end)
        if is_odenet:
            f_nfe_meter.update(nfe_forward)
            b_nfe_meter.update(nfe_backward)
        end = time.time()

        if itr % batches_per_epoch == 0:
            with torch.no_grad():
                train_acc = accuracy(model, train_eval_loader)
                val_acc = accuracy(model, test_loader)
                if val_acc > best_acc:
                    torch.save({'state_dict': model.state_dict(), 'args': args}, os.path.join(args.save, 'model.pth'))
                    best_acc = val_acc
                if best_acc > 0.96:
                    break
                logger.info(
                    "Epoch {:04d} | Time {:.3f} ({:.3f}) | NFE-F {:.1f} | NFE-B {:.1f} | "
                    "Train Acc {:.4f} | Test Acc {:.4f}".format(
                        itr // batches_per_epoch, batch_time_meter.val, batch_time_meter.avg, f_nfe_meter.avg,
                        b_nfe_meter.avg, train_acc, val_acc
                    )
                )
    names = []
    params = []
    for name,param in model.named_parameters():
        names.append(name)
        params.append(param.detach().numpy())
    nn1 = dict({'Wb':params,'names':names})
    for name,param in model.named_buffers():
        names.append(name)
        params.append(param.detach().numpy())
    savemat("odecnn_gtsrb_small.mat",nn1)
Namespace(adjoint=False, batch_size=128, data_aug=False, debug=False, downsampling_method='conv', gpu=0, lr=0.01, nepochs=100, network='odenet', save='./experiment1', test_batch_size=1000, tol=0.001)
Namespace(adjoint=False, batch_size=128, data_aug=False, debug=False, downsampling_method='conv', gpu=0, lr=0.01, nepochs=100, network='odenet', save='./experiment1', test_batch_size=1000, tol=0.001)
Namespace(adjoint=False, batch_size=128, data_aug=False, debug=False, downsampling_method='conv', gpu=0, lr=0.01, nepochs=100, network='odenet', save='./experiment1', test_batch_size=1000, tol=0.001)
Sequential(
  (0): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1))
  (1): BatchNorm2d(16, eps=16, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (4): BatchNorm2d(16, eps=16, momentum=0.1, affine=True, track_running_stats=True)
  (5): ReLU(inplace=True)
  (6): Flatten()
  (7): ODEBlock(
    (odefunc): ODEfunc(
      (fc1): Linear(in_features=3600, out_features=10, bias=True)
      (fc2): Linear(in_features=10, out_features=3600, bias=True)
    )
  )
  (8): Linear(in_features=3600, out_features=42, bias=True)
)
Sequential(
  (0): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1))
  (1): BatchNorm2d(16, eps=16, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (4): BatchNorm2d(16, eps=16, momentum=0.1, affine=True, track_running_stats=True)
  (5): ReLU(inplace=True)
  (6): Flatten()
  (7): ODEBlock(
    (odefunc): ODEfunc(
      (fc1): Linear(in_features=3600, out_features=10, bias=True)
      (fc2): Linear(in_features=10, out_features=3600, bias=True)
    )
  )
  (8): Linear(in_features=3600, out_features=42, bias=True)
)
Sequential(
  (0): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1))
  (1): BatchNorm2d(16, eps=16, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (4): BatchNorm2d(16, eps=16, momentum=0.1, affine=True, track_running_stats=True)
  (5): ReLU(inplace=True)
  (6): Flatten()
  (7): ODEBlock(
    (odefunc): ODEfunc(
      (fc1): Linear(in_features=3600, out_features=10, bias=True)
      (fc2): Linear(in_features=10, out_features=3600, bias=True)
    )
  )
  (8): Linear(in_features=3600, out_features=42, bias=True)
)
Number of parameters: 231476
Number of parameters: 231476
Number of parameters: 231476
Epoch 0000 | Time 0.636 (0.636) | NFE-F 20.0 | NFE-B 0.0 | Train Acc 0.0000 | Test Acc 0.0000
Epoch 0000 | Time 0.636 (0.636) | NFE-F 20.0 | NFE-B 0.0 | Train Acc 0.0000 | Test Acc 0.0000
Epoch 0000 | Time 0.636 (0.636) | NFE-F 20.0 | NFE-B 0.0 | Train Acc 0.0000 | Test Acc 0.0000
